// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package admin_test

import (
	"context"

	admin "cloud.google.com/go/bigtable/admin/apiv2"
	"google.golang.org/api/iterator"
	adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"
	iampb "google.golang.org/genproto/googleapis/iam/v1"
)

func ExampleNewBigtableInstanceAdminClient() {
	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use client.
	_ = c
}

func ExampleBigtableInstanceAdminClient_CreateInstance() {
	// import adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.CreateInstanceRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.CreateInstance(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableInstanceAdminClient_GetInstance() {
	// import adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.GetInstanceRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetInstance(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableInstanceAdminClient_ListInstances() {
	// import adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.ListInstancesRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ListInstances(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableInstanceAdminClient_UpdateInstance() {
	// import adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.Instance{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateInstance(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableInstanceAdminClient_PartialUpdateInstance() {
	// import adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.PartialUpdateInstanceRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.PartialUpdateInstance(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableInstanceAdminClient_DeleteInstance() {
	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.DeleteInstanceRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteInstance(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleBigtableInstanceAdminClient_CreateCluster() {
	// import adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.CreateClusterRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.CreateCluster(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableInstanceAdminClient_GetCluster() {
	// import adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.GetClusterRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetCluster(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableInstanceAdminClient_ListClusters() {
	// import adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.ListClustersRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ListClusters(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableInstanceAdminClient_UpdateCluster() {
	// import adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.Cluster{
		// TODO: Fill request struct fields.
	}
	op, err := c.UpdateCluster(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableInstanceAdminClient_DeleteCluster() {
	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.DeleteClusterRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteCluster(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleBigtableInstanceAdminClient_CreateAppProfile() {
	// import adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.CreateAppProfileRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CreateAppProfile(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableInstanceAdminClient_GetAppProfile() {
	// import adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.GetAppProfileRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetAppProfile(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableInstanceAdminClient_ListAppProfiles() {
	// import adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"
	// import "google.golang.org/api/iterator"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.ListAppProfilesRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListAppProfiles(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleBigtableInstanceAdminClient_UpdateAppProfile() {
	// import adminpb "google.golang.org/genproto/googleapis/bigtable/admin/v2"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.UpdateAppProfileRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.UpdateAppProfile(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableInstanceAdminClient_DeleteAppProfile() {
	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &adminpb.DeleteAppProfileRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteAppProfile(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleBigtableInstanceAdminClient_GetIamPolicy() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.GetIamPolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetIamPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableInstanceAdminClient_SetIamPolicy() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.SetIamPolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.SetIamPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleBigtableInstanceAdminClient_TestIamPermissions() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1"

	ctx := context.Background()
	c, err := admin.NewBigtableInstanceAdminClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.TestIamPermissionsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.TestIamPermissions(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package graph_test

import (
	"context"

	graph "google.golang.org/api/homegraph/v1"
	graphpb "google.golang.org/genproto/googleapis/home/graph/v1"
)

func ExampleNewHomeGraphApiClient() {
	ctx := context.Background()
	c, err := graph.NewHomeGraphApiClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use client.
	_ = c
}

func ExampleHomeGraphApiClient_RequestSyncDevices() {
	// import graphpb "google.golang.org/genproto/googleapis/home/graph/v1"

	ctx := context.Background()
	c, err := graph.NewHomeGraphApiClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &graphpb.RequestSyncDevicesRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.RequestSyncDevices(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleHomeGraphApiClient_ReportStateAndNotification() {
	// import graphpb "google.golang.org/genproto/googleapis/home/graph/v1"

	ctx := context.Background()
	c, err := graph.NewHomeGraphApiClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &graphpb.ReportStateAndNotificationRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ReportStateAndNotification(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleHomeGraphApiClient_DeleteAgentUser() {
	ctx := context.Background()
	c, err := graph.NewHomeGraphApiClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &graphpb.DeleteAgentUserRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteAgentUser(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleHomeGraphApiClient_Query() {
	// import graphpb "google.golang.org/genproto/googleapis/home/graph/v1"

	ctx := context.Background()
	c, err := graph.NewHomeGraphApiClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &graphpb.QueryRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.Query(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleHomeGraphApiClient_Sync() {
	// import graphpb "google.golang.org/genproto/googleapis/home/graph/v1"

	ctx := context.Background()
	c, err := graph.NewHomeGraphApiClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &graphpb.SyncRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.Sync(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

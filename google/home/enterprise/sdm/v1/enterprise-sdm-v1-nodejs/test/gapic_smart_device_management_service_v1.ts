// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as smartdevicemanagementserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.SmartDeviceManagementServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.smartDeviceManagementServiceStub, undefined);
        await client.initialize();
        assert(client.smartDeviceManagementServiceStub);
    });

    it('has close method', () => {
        const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getDevice', () => {
        it('invokes getDevice without error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.GetDeviceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Device());
            client.innerApiCalls.getDevice = stubSimpleCall(expectedResponse);
            const [response] = await client.getDevice(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getDevice as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getDevice without error using callback', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.GetDeviceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Device());
            client.innerApiCalls.getDevice = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getDevice(
                    request,
                    (err?: Error|null, result?: protos.google.home.enterprise.sdm.v1.IDevice|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getDevice as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getDevice with error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.GetDeviceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getDevice = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getDevice(request), expectedError);
            assert((client.innerApiCalls.getDevice as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('executeDeviceCommand', () => {
        it('invokes executeDeviceCommand without error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ExecuteDeviceCommandRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ExecuteDeviceCommandResponse());
            client.innerApiCalls.executeDeviceCommand = stubSimpleCall(expectedResponse);
            const [response] = await client.executeDeviceCommand(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.executeDeviceCommand as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes executeDeviceCommand without error using callback', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ExecuteDeviceCommandRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ExecuteDeviceCommandResponse());
            client.innerApiCalls.executeDeviceCommand = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.executeDeviceCommand(
                    request,
                    (err?: Error|null, result?: protos.google.home.enterprise.sdm.v1.IExecuteDeviceCommandResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.executeDeviceCommand as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes executeDeviceCommand with error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ExecuteDeviceCommandRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.executeDeviceCommand = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.executeDeviceCommand(request), expectedError);
            assert((client.innerApiCalls.executeDeviceCommand as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getStructure', () => {
        it('invokes getStructure without error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.GetStructureRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Structure());
            client.innerApiCalls.getStructure = stubSimpleCall(expectedResponse);
            const [response] = await client.getStructure(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getStructure as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getStructure without error using callback', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.GetStructureRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Structure());
            client.innerApiCalls.getStructure = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getStructure(
                    request,
                    (err?: Error|null, result?: protos.google.home.enterprise.sdm.v1.IStructure|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getStructure as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getStructure with error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.GetStructureRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getStructure = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getStructure(request), expectedError);
            assert((client.innerApiCalls.getStructure as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getRoom', () => {
        it('invokes getRoom without error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.GetRoomRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Room());
            client.innerApiCalls.getRoom = stubSimpleCall(expectedResponse);
            const [response] = await client.getRoom(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getRoom without error using callback', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.GetRoomRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Room());
            client.innerApiCalls.getRoom = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRoom(
                    request,
                    (err?: Error|null, result?: protos.google.home.enterprise.sdm.v1.IRoom|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getRoom with error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.GetRoomRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getRoom = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRoom(request), expectedError);
            assert((client.innerApiCalls.getRoom as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listDevices', () => {
        it('invokes listDevices without error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListDevicesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Device()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Device()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Device()),
            ];
            client.innerApiCalls.listDevices = stubSimpleCall(expectedResponse);
            const [response] = await client.listDevices(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listDevices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listDevices without error using callback', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListDevicesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Device()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Device()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Device()),
            ];
            client.innerApiCalls.listDevices = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDevices(
                    request,
                    (err?: Error|null, result?: protos.google.home.enterprise.sdm.v1.IDevice[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listDevices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listDevices with error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListDevicesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listDevices = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDevices(request), expectedError);
            assert((client.innerApiCalls.listDevices as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listDevicesStream without error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListDevicesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Device()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Device()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Device()),
            ];
            client.descriptors.page.listDevices.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDevicesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.home.enterprise.sdm.v1.Device[] = [];
                stream.on('data', (response: protos.google.home.enterprise.sdm.v1.Device) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDevices.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDevices, request));
            assert.strictEqual(
                (client.descriptors.page.listDevices.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listDevicesStream with error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListDevicesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listDevices.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDevicesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.home.enterprise.sdm.v1.Device[] = [];
                stream.on('data', (response: protos.google.home.enterprise.sdm.v1.Device) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDevices.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDevices, request));
            assert.strictEqual(
                (client.descriptors.page.listDevices.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listDevices without error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListDevicesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Device()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Device()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Device()),
            ];
            client.descriptors.page.listDevices.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.home.enterprise.sdm.v1.IDevice[] = [];
            const iterable = client.listDevicesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDevices.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listDevices.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listDevices with error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListDevicesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listDevices.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDevicesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.home.enterprise.sdm.v1.IDevice[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDevices.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listDevices.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listStructures', () => {
        it('invokes listStructures without error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListStructuresRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Structure()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Structure()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Structure()),
            ];
            client.innerApiCalls.listStructures = stubSimpleCall(expectedResponse);
            const [response] = await client.listStructures(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listStructures as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listStructures without error using callback', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListStructuresRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Structure()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Structure()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Structure()),
            ];
            client.innerApiCalls.listStructures = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listStructures(
                    request,
                    (err?: Error|null, result?: protos.google.home.enterprise.sdm.v1.IStructure[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listStructures as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listStructures with error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListStructuresRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listStructures = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listStructures(request), expectedError);
            assert((client.innerApiCalls.listStructures as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listStructuresStream without error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListStructuresRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Structure()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Structure()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Structure()),
            ];
            client.descriptors.page.listStructures.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listStructuresStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.home.enterprise.sdm.v1.Structure[] = [];
                stream.on('data', (response: protos.google.home.enterprise.sdm.v1.Structure) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listStructures.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listStructures, request));
            assert.strictEqual(
                (client.descriptors.page.listStructures.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listStructuresStream with error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListStructuresRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listStructures.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listStructuresStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.home.enterprise.sdm.v1.Structure[] = [];
                stream.on('data', (response: protos.google.home.enterprise.sdm.v1.Structure) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listStructures.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listStructures, request));
            assert.strictEqual(
                (client.descriptors.page.listStructures.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listStructures without error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListStructuresRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Structure()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Structure()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Structure()),
            ];
            client.descriptors.page.listStructures.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.home.enterprise.sdm.v1.IStructure[] = [];
            const iterable = client.listStructuresAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listStructures.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listStructures.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listStructures with error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListStructuresRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listStructures.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listStructuresAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.home.enterprise.sdm.v1.IStructure[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listStructures.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listStructures.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listRooms', () => {
        it('invokes listRooms without error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListRoomsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Room()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Room()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Room()),
            ];
            client.innerApiCalls.listRooms = stubSimpleCall(expectedResponse);
            const [response] = await client.listRooms(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listRooms as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listRooms without error using callback', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListRoomsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Room()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Room()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Room()),
            ];
            client.innerApiCalls.listRooms = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listRooms(
                    request,
                    (err?: Error|null, result?: protos.google.home.enterprise.sdm.v1.IRoom[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listRooms as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listRooms with error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListRoomsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listRooms = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listRooms(request), expectedError);
            assert((client.innerApiCalls.listRooms as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listRoomsStream without error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListRoomsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Room()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Room()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Room()),
            ];
            client.descriptors.page.listRooms.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listRoomsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.home.enterprise.sdm.v1.Room[] = [];
                stream.on('data', (response: protos.google.home.enterprise.sdm.v1.Room) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listRooms.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRooms, request));
            assert.strictEqual(
                (client.descriptors.page.listRooms.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listRoomsStream with error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListRoomsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listRooms.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listRoomsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.home.enterprise.sdm.v1.Room[] = [];
                stream.on('data', (response: protos.google.home.enterprise.sdm.v1.Room) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listRooms.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRooms, request));
            assert.strictEqual(
                (client.descriptors.page.listRooms.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listRooms without error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListRoomsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Room()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Room()),
              generateSampleMessage(new protos.google.home.enterprise.sdm.v1.Room()),
            ];
            client.descriptors.page.listRooms.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.home.enterprise.sdm.v1.IRoom[] = [];
            const iterable = client.listRoomsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listRooms.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listRooms.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listRooms with error', async () => {
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.home.enterprise.sdm.v1.ListRoomsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listRooms.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listRoomsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.home.enterprise.sdm.v1.IRoom[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listRooms.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listRooms.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('device', () => {
            const fakePath = "/rendered/path/device";
            const expectedParameters = {
                enterprise: "enterpriseValue",
                device: "deviceValue",
            };
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.devicePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.devicePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('devicePath', () => {
                const result = client.devicePath("enterpriseValue", "deviceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.devicePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchEnterpriseFromDeviceName', () => {
                const result = client.matchEnterpriseFromDeviceName(fakePath);
                assert.strictEqual(result, "enterpriseValue");
                assert((client.pathTemplates.devicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDeviceFromDeviceName', () => {
                const result = client.matchDeviceFromDeviceName(fakePath);
                assert.strictEqual(result, "deviceValue");
                assert((client.pathTemplates.devicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('room', () => {
            const fakePath = "/rendered/path/room";
            const expectedParameters = {
                enterprise: "enterpriseValue",
                structure: "structureValue",
                room: "roomValue",
            };
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.roomPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.roomPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('roomPath', () => {
                const result = client.roomPath("enterpriseValue", "structureValue", "roomValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.roomPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchEnterpriseFromRoomName', () => {
                const result = client.matchEnterpriseFromRoomName(fakePath);
                assert.strictEqual(result, "enterpriseValue");
                assert((client.pathTemplates.roomPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStructureFromRoomName', () => {
                const result = client.matchStructureFromRoomName(fakePath);
                assert.strictEqual(result, "structureValue");
                assert((client.pathTemplates.roomPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRoomFromRoomName', () => {
                const result = client.matchRoomFromRoomName(fakePath);
                assert.strictEqual(result, "roomValue");
                assert((client.pathTemplates.roomPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('structure', () => {
            const fakePath = "/rendered/path/structure";
            const expectedParameters = {
                enterprise: "enterpriseValue",
                structure: "structureValue",
            };
            const client = new smartdevicemanagementserviceModule.v1.SmartDeviceManagementServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.structurePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.structurePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('structurePath', () => {
                const result = client.structurePath("enterpriseValue", "structureValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.structurePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchEnterpriseFromStructureName', () => {
                const result = client.matchEnterpriseFromStructureName(fakePath);
                assert.strictEqual(result, "enterpriseValue");
                assert((client.pathTemplates.structurePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStructureFromStructureName', () => {
                const result = client.matchStructureFromStructureName(fakePath);
                assert.strictEqual(result, "structureValue");
                assert((client.pathTemplates.structurePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});

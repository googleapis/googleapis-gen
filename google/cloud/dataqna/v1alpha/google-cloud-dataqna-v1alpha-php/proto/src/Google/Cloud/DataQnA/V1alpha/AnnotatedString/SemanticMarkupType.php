<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/dataqna/v1alpha/annotated_string.proto

namespace Google\Cloud\DataQnA\V1alpha\AnnotatedString;

use UnexpectedValueException;

/**
 * Semantic markup types.
 *
 * Protobuf type <code>google.cloud.dataqna.v1alpha.AnnotatedString.SemanticMarkupType</code>
 */
class SemanticMarkupType
{
    /**
     * No markup type was specified.
     *
     * Generated from protobuf enum <code>MARKUP_TYPE_UNSPECIFIED = 0;</code>
     */
    const MARKUP_TYPE_UNSPECIFIED = 0;
    /**
     * Markup for a substring denoting a metric.
     *
     * Generated from protobuf enum <code>METRIC = 1;</code>
     */
    const METRIC = 1;
    /**
     * Markup for a substring denoting a dimension.
     *
     * Generated from protobuf enum <code>DIMENSION = 2;</code>
     */
    const DIMENSION = 2;
    /**
     * Markup for a substring denoting a filter.
     *
     * Generated from protobuf enum <code>FILTER = 3;</code>
     */
    const FILTER = 3;
    /**
     * Markup for an unused substring.
     *
     * Generated from protobuf enum <code>UNUSED = 4;</code>
     */
    const UNUSED = 4;
    /**
     * Markup for a substring containing blocked phrases.
     *
     * Generated from protobuf enum <code>BLOCKED = 5;</code>
     */
    const BLOCKED = 5;
    /**
     * Markup for a substring that contains terms for row.
     *
     * Generated from protobuf enum <code>ROW = 6;</code>
     */
    const ROW = 6;

    private static $valueToName = [
        self::MARKUP_TYPE_UNSPECIFIED => 'MARKUP_TYPE_UNSPECIFIED',
        self::METRIC => 'METRIC',
        self::DIMENSION => 'DIMENSION',
        self::FILTER => 'FILTER',
        self::UNUSED => 'UNUSED',
        self::BLOCKED => 'BLOCKED',
        self::ROW => 'ROW',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(SemanticMarkupType::class, \Google\Cloud\DataQnA\V1alpha\AnnotatedString_SemanticMarkupType::class);


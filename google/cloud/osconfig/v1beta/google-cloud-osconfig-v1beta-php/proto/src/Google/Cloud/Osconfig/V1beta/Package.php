<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/osconfig/v1beta/guest_policies.proto

namespace Google\Cloud\Osconfig\V1beta;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Package is a reference to the software package to be installed or removed.
 * The agent on the VM instance uses the system package manager to apply the
 * config.
 * These are the commands that the agent uses to install or remove
 * packages.
 * Apt
 * install: `apt-get update && apt-get -y install package1 package2 package3`
 * remove: `apt-get -y remove package1 package2 package3`
 * Yum
 * install: `yum -y install package1 package2 package3`
 * remove: `yum -y remove package1 package2 package3`
 * Zypper
 * install: `zypper install package1 package2 package3`
 * remove: `zypper rm package1 package2`
 * Googet
 * install: `googet -noconfirm install package1 package2 package3`
 * remove: `googet -noconfirm remove package1 package2 package3`
 *
 * Generated from protobuf message <code>google.cloud.osconfig.v1beta.Package</code>
 */
class Package extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The name of the package. A package is uniquely identified for conflict
     * validation by checking the package name and the manager(s) that the
     * package targets.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $name = '';
    /**
     * The desired_state the agent should maintain for this package. The
     * default is to ensure the package is installed.
     *
     * Generated from protobuf field <code>.google.cloud.osconfig.v1beta.DesiredState desired_state = 2;</code>
     */
    protected $desired_state = 0;
    /**
     * Type of package manager that can be used to install this package.
     * If a system does not have the package manager, the package is not
     * installed or removed no error message is returned. By default,
     * or if you specify `ANY`,
     * the agent attempts to install and remove this package using the default
     * package manager. This is useful when creating a policy that applies to
     * different types of systems.
     * The default behavior is ANY.
     *
     * Generated from protobuf field <code>.google.cloud.osconfig.v1beta.Package.Manager manager = 3;</code>
     */
    protected $manager = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           Required. The name of the package. A package is uniquely identified for conflict
     *           validation by checking the package name and the manager(s) that the
     *           package targets.
     *     @type int $desired_state
     *           The desired_state the agent should maintain for this package. The
     *           default is to ensure the package is installed.
     *     @type int $manager
     *           Type of package manager that can be used to install this package.
     *           If a system does not have the package manager, the package is not
     *           installed or removed no error message is returned. By default,
     *           or if you specify `ANY`,
     *           the agent attempts to install and remove this package using the default
     *           package manager. This is useful when creating a policy that applies to
     *           different types of systems.
     *           The default behavior is ANY.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Osconfig\V1Beta\GuestPolicies::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The name of the package. A package is uniquely identified for conflict
     * validation by checking the package name and the manager(s) that the
     * package targets.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Required. The name of the package. A package is uniquely identified for conflict
     * validation by checking the package name and the manager(s) that the
     * package targets.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * The desired_state the agent should maintain for this package. The
     * default is to ensure the package is installed.
     *
     * Generated from protobuf field <code>.google.cloud.osconfig.v1beta.DesiredState desired_state = 2;</code>
     * @return int
     */
    public function getDesiredState()
    {
        return $this->desired_state;
    }

    /**
     * The desired_state the agent should maintain for this package. The
     * default is to ensure the package is installed.
     *
     * Generated from protobuf field <code>.google.cloud.osconfig.v1beta.DesiredState desired_state = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setDesiredState($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\Osconfig\V1beta\DesiredState::class);
        $this->desired_state = $var;

        return $this;
    }

    /**
     * Type of package manager that can be used to install this package.
     * If a system does not have the package manager, the package is not
     * installed or removed no error message is returned. By default,
     * or if you specify `ANY`,
     * the agent attempts to install and remove this package using the default
     * package manager. This is useful when creating a policy that applies to
     * different types of systems.
     * The default behavior is ANY.
     *
     * Generated from protobuf field <code>.google.cloud.osconfig.v1beta.Package.Manager manager = 3;</code>
     * @return int
     */
    public function getManager()
    {
        return $this->manager;
    }

    /**
     * Type of package manager that can be used to install this package.
     * If a system does not have the package manager, the package is not
     * installed or removed no error message is returned. By default,
     * or if you specify `ANY`,
     * the agent attempts to install and remove this package using the default
     * package manager. This is useful when creating a policy that applies to
     * different types of systems.
     * The default behavior is ANY.
     *
     * Generated from protobuf field <code>.google.cloud.osconfig.v1beta.Package.Manager manager = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setManager($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\Osconfig\V1beta\Package\Manager::class);
        $this->manager = $var;

        return $this;
    }

}


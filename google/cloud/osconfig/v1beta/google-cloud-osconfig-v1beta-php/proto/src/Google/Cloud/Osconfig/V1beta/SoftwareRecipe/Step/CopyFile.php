<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/osconfig/v1beta/guest_policies.proto

namespace Google\Cloud\Osconfig\V1beta\SoftwareRecipe\Step;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Copies the artifact to the specified path on the instance.
 *
 * Generated from protobuf message <code>google.cloud.osconfig.v1beta.SoftwareRecipe.Step.CopyFile</code>
 */
class CopyFile extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The id of the relevant artifact in the recipe.
     *
     * Generated from protobuf field <code>string artifact_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $artifact_id = '';
    /**
     * Required. The absolute path on the instance to put the file.
     *
     * Generated from protobuf field <code>string destination = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $destination = '';
    /**
     * Whether to allow this step to overwrite existing files. If this is
     * false and the file already exists the file is not overwritten
     * and the step is considered a success. Defaults to false.
     *
     * Generated from protobuf field <code>bool overwrite = 3;</code>
     */
    protected $overwrite = false;
    /**
     * Consists of three octal digits which represent, in
     * order, the permissions of the owner, group, and other users for the
     * file (similarly to the numeric mode used in the linux chmod utility).
     * Each digit represents a three bit number with the 4 bit
     * corresponding to the read permissions, the 2 bit corresponds to the
     * write bit, and the one bit corresponds to the execute permission.
     * Default behavior is 755.
     * Below are some examples of permissions and their associated values:
     * read, write, and execute: 7
     * read and execute: 5
     * read and write: 6
     * read only: 4
     *
     * Generated from protobuf field <code>string permissions = 4;</code>
     */
    protected $permissions = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $artifact_id
     *           Required. The id of the relevant artifact in the recipe.
     *     @type string $destination
     *           Required. The absolute path on the instance to put the file.
     *     @type bool $overwrite
     *           Whether to allow this step to overwrite existing files. If this is
     *           false and the file already exists the file is not overwritten
     *           and the step is considered a success. Defaults to false.
     *     @type string $permissions
     *           Consists of three octal digits which represent, in
     *           order, the permissions of the owner, group, and other users for the
     *           file (similarly to the numeric mode used in the linux chmod utility).
     *           Each digit represents a three bit number with the 4 bit
     *           corresponding to the read permissions, the 2 bit corresponds to the
     *           write bit, and the one bit corresponds to the execute permission.
     *           Default behavior is 755.
     *           Below are some examples of permissions and their associated values:
     *           read, write, and execute: 7
     *           read and execute: 5
     *           read and write: 6
     *           read only: 4
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Osconfig\V1Beta\GuestPolicies::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The id of the relevant artifact in the recipe.
     *
     * Generated from protobuf field <code>string artifact_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getArtifactId()
    {
        return $this->artifact_id;
    }

    /**
     * Required. The id of the relevant artifact in the recipe.
     *
     * Generated from protobuf field <code>string artifact_id = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setArtifactId($var)
    {
        GPBUtil::checkString($var, True);
        $this->artifact_id = $var;

        return $this;
    }

    /**
     * Required. The absolute path on the instance to put the file.
     *
     * Generated from protobuf field <code>string destination = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getDestination()
    {
        return $this->destination;
    }

    /**
     * Required. The absolute path on the instance to put the file.
     *
     * Generated from protobuf field <code>string destination = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setDestination($var)
    {
        GPBUtil::checkString($var, True);
        $this->destination = $var;

        return $this;
    }

    /**
     * Whether to allow this step to overwrite existing files. If this is
     * false and the file already exists the file is not overwritten
     * and the step is considered a success. Defaults to false.
     *
     * Generated from protobuf field <code>bool overwrite = 3;</code>
     * @return bool
     */
    public function getOverwrite()
    {
        return $this->overwrite;
    }

    /**
     * Whether to allow this step to overwrite existing files. If this is
     * false and the file already exists the file is not overwritten
     * and the step is considered a success. Defaults to false.
     *
     * Generated from protobuf field <code>bool overwrite = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setOverwrite($var)
    {
        GPBUtil::checkBool($var);
        $this->overwrite = $var;

        return $this;
    }

    /**
     * Consists of three octal digits which represent, in
     * order, the permissions of the owner, group, and other users for the
     * file (similarly to the numeric mode used in the linux chmod utility).
     * Each digit represents a three bit number with the 4 bit
     * corresponding to the read permissions, the 2 bit corresponds to the
     * write bit, and the one bit corresponds to the execute permission.
     * Default behavior is 755.
     * Below are some examples of permissions and their associated values:
     * read, write, and execute: 7
     * read and execute: 5
     * read and write: 6
     * read only: 4
     *
     * Generated from protobuf field <code>string permissions = 4;</code>
     * @return string
     */
    public function getPermissions()
    {
        return $this->permissions;
    }

    /**
     * Consists of three octal digits which represent, in
     * order, the permissions of the owner, group, and other users for the
     * file (similarly to the numeric mode used in the linux chmod utility).
     * Each digit represents a three bit number with the 4 bit
     * corresponding to the read permissions, the 2 bit corresponds to the
     * write bit, and the one bit corresponds to the execute permission.
     * Default behavior is 755.
     * Below are some examples of permissions and their associated values:
     * read, write, and execute: 7
     * read and execute: 5
     * read and write: 6
     * read only: 4
     *
     * Generated from protobuf field <code>string permissions = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setPermissions($var)
    {
        GPBUtil::checkString($var, True);
        $this->permissions = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(CopyFile::class, \Google\Cloud\Osconfig\V1beta\SoftwareRecipe_Step_CopyFile::class);


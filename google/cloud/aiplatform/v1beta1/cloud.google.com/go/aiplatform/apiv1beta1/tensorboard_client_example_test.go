// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package aiplatform_test

import (
	"context"

	aiplatform "cloud.google.com/go/aiplatform/apiv1beta1"
	"google.golang.org/api/iterator"
	aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"
)

func ExampleNewTensorboardClient() {
	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use client.
	_ = c
}

func ExampleTensorboardClient_CreateTensorboard() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.CreateTensorboardRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.CreateTensorboard(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleTensorboardClient_GetTensorboard() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.GetTensorboardRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetTensorboard(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleTensorboardClient_UpdateTensorboard() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.UpdateTensorboardRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.UpdateTensorboard(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleTensorboardClient_ListTensorboards() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"
	// import "google.golang.org/api/iterator"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.ListTensorboardsRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListTensorboards(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleTensorboardClient_DeleteTensorboard() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.DeleteTensorboardRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.DeleteTensorboard(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	err = op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleTensorboardClient_CreateTensorboardExperiment() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.CreateTensorboardExperimentRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CreateTensorboardExperiment(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleTensorboardClient_GetTensorboardExperiment() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.GetTensorboardExperimentRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetTensorboardExperiment(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleTensorboardClient_UpdateTensorboardExperiment() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.UpdateTensorboardExperimentRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateTensorboardExperiment(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleTensorboardClient_ListTensorboardExperiments() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"
	// import "google.golang.org/api/iterator"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.ListTensorboardExperimentsRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListTensorboardExperiments(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleTensorboardClient_DeleteTensorboardExperiment() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.DeleteTensorboardExperimentRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.DeleteTensorboardExperiment(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	err = op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleTensorboardClient_CreateTensorboardRun() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.CreateTensorboardRunRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CreateTensorboardRun(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleTensorboardClient_GetTensorboardRun() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.GetTensorboardRunRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetTensorboardRun(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleTensorboardClient_UpdateTensorboardRun() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.UpdateTensorboardRunRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateTensorboardRun(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleTensorboardClient_ListTensorboardRuns() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"
	// import "google.golang.org/api/iterator"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.ListTensorboardRunsRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListTensorboardRuns(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleTensorboardClient_DeleteTensorboardRun() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.DeleteTensorboardRunRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.DeleteTensorboardRun(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	err = op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleTensorboardClient_CreateTensorboardTimeSeries() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.CreateTensorboardTimeSeriesRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CreateTensorboardTimeSeries(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleTensorboardClient_GetTensorboardTimeSeries() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.GetTensorboardTimeSeriesRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetTensorboardTimeSeries(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleTensorboardClient_UpdateTensorboardTimeSeries() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.UpdateTensorboardTimeSeriesRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateTensorboardTimeSeries(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleTensorboardClient_ListTensorboardTimeSeries() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"
	// import "google.golang.org/api/iterator"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.ListTensorboardTimeSeriesRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListTensorboardTimeSeries(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleTensorboardClient_DeleteTensorboardTimeSeries() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.DeleteTensorboardTimeSeriesRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.DeleteTensorboardTimeSeries(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	err = op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleTensorboardClient_ReadTensorboardTimeSeriesData() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.ReadTensorboardTimeSeriesDataRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ReadTensorboardTimeSeriesData(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleTensorboardClient_WriteTensorboardRunData() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.WriteTensorboardRunDataRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.WriteTensorboardRunData(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleTensorboardClient_ExportTensorboardTimeSeriesData() {
	// import aiplatformpb "google.golang.org/genproto/googleapis/cloud/aiplatform/v1beta1"
	// import "google.golang.org/api/iterator"

	ctx := context.Background()
	c, err := aiplatform.NewTensorboardClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &aiplatformpb.ExportTensorboardTimeSeriesDataRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ExportTensorboardTimeSeriesData(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

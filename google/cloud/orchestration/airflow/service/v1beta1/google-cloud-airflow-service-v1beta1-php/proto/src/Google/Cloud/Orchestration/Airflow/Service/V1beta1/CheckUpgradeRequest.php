<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/orchestration/airflow/service/v1beta1/environments.proto

namespace Google\Cloud\Orchestration\Airflow\Service\V1beta1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request to check whether image upgrade will succeed.
 *
 * Generated from protobuf message <code>google.cloud.orchestration.airflow.service.v1beta1.CheckUpgradeRequest</code>
 */
class CheckUpgradeRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The resource name of the environment to check upgrade for, in the
     * form:
     * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
     *
     * Generated from protobuf field <code>string environment = 1;</code>
     */
    protected $environment = '';
    /**
     * The version of the software running in the environment.
     * This encapsulates both the version of Cloud Composer functionality and the
     * version of Apache Airflow. It must match the regular expression
     * `composer-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`.
     * When used as input, the server also checks if the provided version is
     * supported and denies the request for an unsupported version.
     * The Cloud Composer portion of the version is a
     * [semantic version](https://semver.org) or `latest`. When the patch version
     * is omitted, the current Cloud Composer patch version is selected.
     * When `latest` is provided instead of an explicit version number,
     * the server replaces `latest` with the current Cloud Composer version
     * and stores that version number in the same field.
     * The portion of the image version that follows `airflow-` is an
     * official Apache Airflow repository
     * [release name](https://github.com/apache/incubator-airflow/releases).
     * See also [Version List]
     * (/composer/docs/concepts/versioning/composer-versions).
     *
     * Generated from protobuf field <code>string image_version = 2;</code>
     */
    protected $image_version = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $environment
     *           The resource name of the environment to check upgrade for, in the
     *           form:
     *           "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
     *     @type string $image_version
     *           The version of the software running in the environment.
     *           This encapsulates both the version of Cloud Composer functionality and the
     *           version of Apache Airflow. It must match the regular expression
     *           `composer-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`.
     *           When used as input, the server also checks if the provided version is
     *           supported and denies the request for an unsupported version.
     *           The Cloud Composer portion of the version is a
     *           [semantic version](https://semver.org) or `latest`. When the patch version
     *           is omitted, the current Cloud Composer patch version is selected.
     *           When `latest` is provided instead of an explicit version number,
     *           the server replaces `latest` with the current Cloud Composer version
     *           and stores that version number in the same field.
     *           The portion of the image version that follows `airflow-` is an
     *           official Apache Airflow repository
     *           [release name](https://github.com/apache/incubator-airflow/releases).
     *           See also [Version List]
     *           (/composer/docs/concepts/versioning/composer-versions).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Orchestration\Airflow\Service\V1Beta1\Environments::initOnce();
        parent::__construct($data);
    }

    /**
     * The resource name of the environment to check upgrade for, in the
     * form:
     * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
     *
     * Generated from protobuf field <code>string environment = 1;</code>
     * @return string
     */
    public function getEnvironment()
    {
        return $this->environment;
    }

    /**
     * The resource name of the environment to check upgrade for, in the
     * form:
     * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
     *
     * Generated from protobuf field <code>string environment = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setEnvironment($var)
    {
        GPBUtil::checkString($var, True);
        $this->environment = $var;

        return $this;
    }

    /**
     * The version of the software running in the environment.
     * This encapsulates both the version of Cloud Composer functionality and the
     * version of Apache Airflow. It must match the regular expression
     * `composer-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`.
     * When used as input, the server also checks if the provided version is
     * supported and denies the request for an unsupported version.
     * The Cloud Composer portion of the version is a
     * [semantic version](https://semver.org) or `latest`. When the patch version
     * is omitted, the current Cloud Composer patch version is selected.
     * When `latest` is provided instead of an explicit version number,
     * the server replaces `latest` with the current Cloud Composer version
     * and stores that version number in the same field.
     * The portion of the image version that follows `airflow-` is an
     * official Apache Airflow repository
     * [release name](https://github.com/apache/incubator-airflow/releases).
     * See also [Version List]
     * (/composer/docs/concepts/versioning/composer-versions).
     *
     * Generated from protobuf field <code>string image_version = 2;</code>
     * @return string
     */
    public function getImageVersion()
    {
        return $this->image_version;
    }

    /**
     * The version of the software running in the environment.
     * This encapsulates both the version of Cloud Composer functionality and the
     * version of Apache Airflow. It must match the regular expression
     * `composer-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`.
     * When used as input, the server also checks if the provided version is
     * supported and denies the request for an unsupported version.
     * The Cloud Composer portion of the version is a
     * [semantic version](https://semver.org) or `latest`. When the patch version
     * is omitted, the current Cloud Composer patch version is selected.
     * When `latest` is provided instead of an explicit version number,
     * the server replaces `latest` with the current Cloud Composer version
     * and stores that version number in the same field.
     * The portion of the image version that follows `airflow-` is an
     * official Apache Airflow repository
     * [release name](https://github.com/apache/incubator-airflow/releases).
     * See also [Version List]
     * (/composer/docs/concepts/versioning/composer-versions).
     *
     * Generated from protobuf field <code>string image_version = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setImageVersion($var)
    {
        GPBUtil::checkString($var, True);
        $this->image_version = $var;

        return $this;
    }

}


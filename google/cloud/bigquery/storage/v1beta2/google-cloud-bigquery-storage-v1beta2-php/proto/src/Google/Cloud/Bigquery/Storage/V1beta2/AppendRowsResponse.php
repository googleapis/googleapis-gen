<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/bigquery/storage/v1beta2/storage.proto

namespace Google\Cloud\Bigquery\Storage\V1beta2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Response message for `AppendRows`.
 *
 * Generated from protobuf message <code>google.cloud.bigquery.storage.v1beta2.AppendRowsResponse</code>
 */
class AppendRowsResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * If backend detects a schema update, pass it to user so that user can
     * use it to input new type of message. It will be empty when there is no
     * schema updates.
     *
     * Generated from protobuf field <code>.google.cloud.bigquery.storage.v1beta2.TableSchema updated_schema = 3;</code>
     */
    protected $updated_schema = null;
    protected $response;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Cloud\Bigquery\Storage\V1beta2\AppendRowsResponse\AppendResult $append_result
     *           Result if the append is successful.
     *     @type \Google\Rpc\Status $error
     *           Error in case of request failed. If set, it means rows are not accepted
     *           into the system. Users can retry or continue with other requests within
     *           the same connection.
     *           ALREADY_EXISTS: happens when offset is specified, it means the entire
     *             request is already appended, it is safe to ignore this error.
     *           OUT_OF_RANGE: happens when offset is specified, it means the specified
     *             offset is beyond the end of the stream.
     *           INVALID_ARGUMENT: error caused by malformed request or data.
     *           RESOURCE_EXHAUSTED: request rejected due to throttling. Only happens when
     *             append without offset.
     *           ABORTED: request processing is aborted because of prior failures, request
     *             can be retried if previous failure is fixed.
     *           INTERNAL: server side errors that can be retried.
     *     @type \Google\Cloud\Bigquery\Storage\V1beta2\TableSchema $updated_schema
     *           If backend detects a schema update, pass it to user so that user can
     *           use it to input new type of message. It will be empty when there is no
     *           schema updates.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Bigquery\Storage\V1Beta2\Storage::initOnce();
        parent::__construct($data);
    }

    /**
     * Result if the append is successful.
     *
     * Generated from protobuf field <code>.google.cloud.bigquery.storage.v1beta2.AppendRowsResponse.AppendResult append_result = 1;</code>
     * @return \Google\Cloud\Bigquery\Storage\V1beta2\AppendRowsResponse\AppendResult|null
     */
    public function getAppendResult()
    {
        return $this->readOneof(1);
    }

    public function hasAppendResult()
    {
        return $this->hasOneof(1);
    }

    /**
     * Result if the append is successful.
     *
     * Generated from protobuf field <code>.google.cloud.bigquery.storage.v1beta2.AppendRowsResponse.AppendResult append_result = 1;</code>
     * @param \Google\Cloud\Bigquery\Storage\V1beta2\AppendRowsResponse\AppendResult $var
     * @return $this
     */
    public function setAppendResult($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Bigquery\Storage\V1beta2\AppendRowsResponse\AppendResult::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Error in case of request failed. If set, it means rows are not accepted
     * into the system. Users can retry or continue with other requests within
     * the same connection.
     * ALREADY_EXISTS: happens when offset is specified, it means the entire
     *   request is already appended, it is safe to ignore this error.
     * OUT_OF_RANGE: happens when offset is specified, it means the specified
     *   offset is beyond the end of the stream.
     * INVALID_ARGUMENT: error caused by malformed request or data.
     * RESOURCE_EXHAUSTED: request rejected due to throttling. Only happens when
     *   append without offset.
     * ABORTED: request processing is aborted because of prior failures, request
     *   can be retried if previous failure is fixed.
     * INTERNAL: server side errors that can be retried.
     *
     * Generated from protobuf field <code>.google.rpc.Status error = 2;</code>
     * @return \Google\Rpc\Status|null
     */
    public function getError()
    {
        return $this->readOneof(2);
    }

    public function hasError()
    {
        return $this->hasOneof(2);
    }

    /**
     * Error in case of request failed. If set, it means rows are not accepted
     * into the system. Users can retry or continue with other requests within
     * the same connection.
     * ALREADY_EXISTS: happens when offset is specified, it means the entire
     *   request is already appended, it is safe to ignore this error.
     * OUT_OF_RANGE: happens when offset is specified, it means the specified
     *   offset is beyond the end of the stream.
     * INVALID_ARGUMENT: error caused by malformed request or data.
     * RESOURCE_EXHAUSTED: request rejected due to throttling. Only happens when
     *   append without offset.
     * ABORTED: request processing is aborted because of prior failures, request
     *   can be retried if previous failure is fixed.
     * INTERNAL: server side errors that can be retried.
     *
     * Generated from protobuf field <code>.google.rpc.Status error = 2;</code>
     * @param \Google\Rpc\Status $var
     * @return $this
     */
    public function setError($var)
    {
        GPBUtil::checkMessage($var, \Google\Rpc\Status::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * If backend detects a schema update, pass it to user so that user can
     * use it to input new type of message. It will be empty when there is no
     * schema updates.
     *
     * Generated from protobuf field <code>.google.cloud.bigquery.storage.v1beta2.TableSchema updated_schema = 3;</code>
     * @return \Google\Cloud\Bigquery\Storage\V1beta2\TableSchema|null
     */
    public function getUpdatedSchema()
    {
        return isset($this->updated_schema) ? $this->updated_schema : null;
    }

    public function hasUpdatedSchema()
    {
        return isset($this->updated_schema);
    }

    public function clearUpdatedSchema()
    {
        unset($this->updated_schema);
    }

    /**
     * If backend detects a schema update, pass it to user so that user can
     * use it to input new type of message. It will be empty when there is no
     * schema updates.
     *
     * Generated from protobuf field <code>.google.cloud.bigquery.storage.v1beta2.TableSchema updated_schema = 3;</code>
     * @param \Google\Cloud\Bigquery\Storage\V1beta2\TableSchema $var
     * @return $this
     */
    public function setUpdatedSchema($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Bigquery\Storage\V1beta2\TableSchema::class);
        $this->updated_schema = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getResponse()
    {
        return $this->whichOneof("response");
    }

}


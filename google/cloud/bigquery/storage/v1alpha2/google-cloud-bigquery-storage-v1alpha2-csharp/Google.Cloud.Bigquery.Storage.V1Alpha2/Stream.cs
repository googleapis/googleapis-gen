// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/bigquery/storage/v1alpha2/stream.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Bigquery.Storage.V1Alpha2 {

  /// <summary>Holder for reflection information generated from google/cloud/bigquery/storage/v1alpha2/stream.proto</summary>
  public static partial class StreamReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/bigquery/storage/v1alpha2/stream.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StreamReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjNnb29nbGUvY2xvdWQvYmlncXVlcnkvc3RvcmFnZS92MWFscGhhMi9zdHJl",
            "YW0ucHJvdG8SJmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5zdG9yYWdlLnYxYWxw",
            "aGEyGh9nb29nbGUvYXBpL2ZpZWxkX2JlaGF2aW9yLnByb3RvGhlnb29nbGUv",
            "YXBpL3Jlc291cmNlLnByb3RvGjJnb29nbGUvY2xvdWQvYmlncXVlcnkvc3Rv",
            "cmFnZS92MWFscGhhMi90YWJsZS5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3Rp",
            "bWVzdGFtcC5wcm90byL+AwoLV3JpdGVTdHJlYW0SEQoEbmFtZRgBIAEoCUID",
            "4EEDEksKBHR5cGUYAiABKA4yOC5nb29nbGUuY2xvdWQuYmlncXVlcnkuc3Rv",
            "cmFnZS52MWFscGhhMi5Xcml0ZVN0cmVhbS5UeXBlQgPgQQUSNAoLY3JlYXRl",
            "X3RpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMS",
            "NAoLY29tbWl0X3RpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wQgPgQQMSTgoMdGFibGVfc2NoZW1hGAUgASgLMjMuZ29vZ2xlLmNsb3Vk",
            "LmJpZ3F1ZXJ5LnN0b3JhZ2UudjFhbHBoYTIuVGFibGVTY2hlbWFCA+BBAxIT",
            "CgtleHRlcm5hbF9pZBgGIAEoCSJGCgRUeXBlEhQKEFRZUEVfVU5TUEVDSUZJ",
            "RUQQABINCglDT01NSVRURUQQARILCgdQRU5ESU5HEAISDAoIQlVGRkVSRUQQ",
            "Azp26kFzCipiaWdxdWVyeXN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vV3JpdGVT",
            "dHJlYW0SRXByb2plY3RzL3twcm9qZWN0fS9kYXRhc2V0cy97ZGF0YXNldH0v",
            "dGFibGVzL3t0YWJsZX0vc3RyZWFtcy97c3RyZWFtfULaAQoqY29tLmdvb2ds",
            "ZS5jbG91ZC5iaWdxdWVyeS5zdG9yYWdlLnYxYWxwaGEyWk1nb29nbGUuZ29s",
            "YW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Nsb3VkL2JpZ3F1ZXJ5L3N0",
            "b3JhZ2UvdjFhbHBoYTI7c3RvcmFnZepBXAokYmlncXVlcnlzdG9yYWdlLmdv",
            "b2dsZWFwaXMuY29tL1RhYmxlEjRwcm9qZWN0cy97cHJvamVjdH0vZGF0YXNl",
            "dHMve2RhdGFzZXR9L3RhYmxlcy97dGFibGV9YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Cloud.Bigquery.Storage.V1Alpha2.TableReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigquery.Storage.V1Alpha2.WriteStream), global::Google.Cloud.Bigquery.Storage.V1Alpha2.WriteStream.Parser, new[]{ "Name", "Type", "CreateTime", "CommitTime", "TableSchema", "ExternalId" }, null, new[]{ typeof(global::Google.Cloud.Bigquery.Storage.V1Alpha2.WriteStream.Types.Type) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Information about a single stream that gets data inside the storage system.
  /// </summary>
  public sealed partial class WriteStream : pb::IMessage<WriteStream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WriteStream> _parser = new pb::MessageParser<WriteStream>(() => new WriteStream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteStream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Bigquery.Storage.V1Alpha2.StreamReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteStream(WriteStream other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      commitTime_ = other.commitTime_ != null ? other.commitTime_.Clone() : null;
      tableSchema_ = other.tableSchema_ != null ? other.tableSchema_.Clone() : null;
      externalId_ = other.externalId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteStream Clone() {
      return new WriteStream(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Output only. Name of the stream, in the form
    /// `projects/{project}/datasets/{dataset}/tables/{table}/streams/{stream}`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Google.Cloud.Bigquery.Storage.V1Alpha2.WriteStream.Types.Type type_ = global::Google.Cloud.Bigquery.Storage.V1Alpha2.WriteStream.Types.Type.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Bigquery.Storage.V1Alpha2.WriteStream.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Output only. Create time of the stream. For the _default stream, this is the
    /// creation_time of the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "commit_time" field.</summary>
    public const int CommitTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp commitTime_;
    /// <summary>
    /// Output only. Commit time of the stream.
    /// If a stream is of `COMMITTED` type, then it will have a commit_time same as
    /// `create_time`. If the stream is of `PENDING` type, commit_time being empty
    /// means it is not committed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CommitTime {
      get { return commitTime_; }
      set {
        commitTime_ = value;
      }
    }

    /// <summary>Field number for the "table_schema" field.</summary>
    public const int TableSchemaFieldNumber = 5;
    private global::Google.Cloud.Bigquery.Storage.V1Alpha2.TableSchema tableSchema_;
    /// <summary>
    /// Output only. The schema of the destination table. It is only returned in
    /// `CreateWriteStream` response. Caller should generate data that's
    /// compatible with this schema to send in initial `AppendRowsRequest`.
    /// The table schema could go out of date during the life time of the stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Bigquery.Storage.V1Alpha2.TableSchema TableSchema {
      get { return tableSchema_; }
      set {
        tableSchema_ = value;
      }
    }

    /// <summary>Field number for the "external_id" field.</summary>
    public const int ExternalIdFieldNumber = 6;
    private string externalId_ = "";
    /// <summary>
    /// Id set by client to annotate its identity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalId {
      get { return externalId_; }
      set {
        externalId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteStream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(CommitTime, other.CommitTime)) return false;
      if (!object.Equals(TableSchema, other.TableSchema)) return false;
      if (ExternalId != other.ExternalId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != global::Google.Cloud.Bigquery.Storage.V1Alpha2.WriteStream.Types.Type.Unspecified) hash ^= Type.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (commitTime_ != null) hash ^= CommitTime.GetHashCode();
      if (tableSchema_ != null) hash ^= TableSchema.GetHashCode();
      if (ExternalId.Length != 0) hash ^= ExternalId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != global::Google.Cloud.Bigquery.Storage.V1Alpha2.WriteStream.Types.Type.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (createTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreateTime);
      }
      if (commitTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CommitTime);
      }
      if (tableSchema_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TableSchema);
      }
      if (ExternalId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ExternalId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != global::Google.Cloud.Bigquery.Storage.V1Alpha2.WriteStream.Types.Type.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (createTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreateTime);
      }
      if (commitTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CommitTime);
      }
      if (tableSchema_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TableSchema);
      }
      if (ExternalId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ExternalId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != global::Google.Cloud.Bigquery.Storage.V1Alpha2.WriteStream.Types.Type.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (commitTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommitTime);
      }
      if (tableSchema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableSchema);
      }
      if (ExternalId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteStream other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != global::Google.Cloud.Bigquery.Storage.V1Alpha2.WriteStream.Types.Type.Unspecified) {
        Type = other.Type;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.commitTime_ != null) {
        if (commitTime_ == null) {
          CommitTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CommitTime.MergeFrom(other.CommitTime);
      }
      if (other.tableSchema_ != null) {
        if (tableSchema_ == null) {
          TableSchema = new global::Google.Cloud.Bigquery.Storage.V1Alpha2.TableSchema();
        }
        TableSchema.MergeFrom(other.TableSchema);
      }
      if (other.ExternalId.Length != 0) {
        ExternalId = other.ExternalId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Google.Cloud.Bigquery.Storage.V1Alpha2.WriteStream.Types.Type) input.ReadEnum();
            break;
          }
          case 26: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 34: {
            if (commitTime_ == null) {
              CommitTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CommitTime);
            break;
          }
          case 42: {
            if (tableSchema_ == null) {
              TableSchema = new global::Google.Cloud.Bigquery.Storage.V1Alpha2.TableSchema();
            }
            input.ReadMessage(TableSchema);
            break;
          }
          case 50: {
            ExternalId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Google.Cloud.Bigquery.Storage.V1Alpha2.WriteStream.Types.Type) input.ReadEnum();
            break;
          }
          case 26: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 34: {
            if (commitTime_ == null) {
              CommitTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CommitTime);
            break;
          }
          case 42: {
            if (tableSchema_ == null) {
              TableSchema = new global::Google.Cloud.Bigquery.Storage.V1Alpha2.TableSchema();
            }
            input.ReadMessage(TableSchema);
            break;
          }
          case 50: {
            ExternalId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the WriteStream message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        /// <summary>
        /// Unknown type.
        /// </summary>
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Data will commit automatically and appear as soon as the write is
        /// acknowledged.
        /// </summary>
        [pbr::OriginalName("COMMITTED")] Committed = 1,
        /// <summary>
        /// Data is invisible until the stream is committed.
        /// </summary>
        [pbr::OriginalName("PENDING")] Pending = 2,
        /// <summary>
        /// Data is only visible up to the offset to which it was flushed.
        /// </summary>
        [pbr::OriginalName("BUFFERED")] Buffered = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code

// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as adminserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.AdminServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = adminserviceModule.v1.AdminServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = adminserviceModule.v1.AdminServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = adminserviceModule.v1.AdminServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new adminserviceModule.v1.AdminServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new adminserviceModule.v1.AdminServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.adminServiceStub, undefined);
        await client.initialize();
        assert(client.adminServiceStub);
    });

    it('has close method', () => {
        const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('createTopic', () => {
        it('invokes createTopic without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.CreateTopicRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic());
            client.innerApiCalls.createTopic = stubSimpleCall(expectedResponse);
            const [response] = await client.createTopic(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createTopic as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createTopic without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.CreateTopicRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic());
            client.innerApiCalls.createTopic = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createTopic(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.ITopic|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createTopic as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createTopic with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.CreateTopicRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createTopic = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createTopic(request), expectedError);
            assert((client.innerApiCalls.createTopic as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getTopic', () => {
        it('invokes getTopic without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.GetTopicRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic());
            client.innerApiCalls.getTopic = stubSimpleCall(expectedResponse);
            const [response] = await client.getTopic(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTopic as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getTopic without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.GetTopicRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic());
            client.innerApiCalls.getTopic = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getTopic(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.ITopic|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTopic as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getTopic with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.GetTopicRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getTopic = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getTopic(request), expectedError);
            assert((client.innerApiCalls.getTopic as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getTopicPartitions', () => {
        it('invokes getTopicPartitions without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.GetTopicPartitionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.TopicPartitions());
            client.innerApiCalls.getTopicPartitions = stubSimpleCall(expectedResponse);
            const [response] = await client.getTopicPartitions(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTopicPartitions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getTopicPartitions without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.GetTopicPartitionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.TopicPartitions());
            client.innerApiCalls.getTopicPartitions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getTopicPartitions(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.ITopicPartitions|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTopicPartitions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getTopicPartitions with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.GetTopicPartitionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getTopicPartitions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getTopicPartitions(request), expectedError);
            assert((client.innerApiCalls.getTopicPartitions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateTopic', () => {
        it('invokes updateTopic without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.UpdateTopicRequest());
            request.topic = {};
            request.topic.name = '';
            const expectedHeaderRequestParams = "topic.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic());
            client.innerApiCalls.updateTopic = stubSimpleCall(expectedResponse);
            const [response] = await client.updateTopic(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateTopic as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateTopic without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.UpdateTopicRequest());
            request.topic = {};
            request.topic.name = '';
            const expectedHeaderRequestParams = "topic.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic());
            client.innerApiCalls.updateTopic = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateTopic(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.ITopic|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateTopic as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateTopic with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.UpdateTopicRequest());
            request.topic = {};
            request.topic.name = '';
            const expectedHeaderRequestParams = "topic.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateTopic = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateTopic(request), expectedError);
            assert((client.innerApiCalls.updateTopic as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteTopic', () => {
        it('invokes deleteTopic without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.DeleteTopicRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteTopic = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteTopic(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteTopic as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteTopic without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.DeleteTopicRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteTopic = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteTopic(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteTopic as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteTopic with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.DeleteTopicRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteTopic = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteTopic(request), expectedError);
            assert((client.innerApiCalls.deleteTopic as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createSubscription', () => {
        it('invokes createSubscription without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.CreateSubscriptionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription());
            client.innerApiCalls.createSubscription = stubSimpleCall(expectedResponse);
            const [response] = await client.createSubscription(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createSubscription without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.CreateSubscriptionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription());
            client.innerApiCalls.createSubscription = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createSubscription(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.ISubscription|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createSubscription with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.CreateSubscriptionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createSubscription = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createSubscription(request), expectedError);
            assert((client.innerApiCalls.createSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getSubscription', () => {
        it('invokes getSubscription without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.GetSubscriptionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription());
            client.innerApiCalls.getSubscription = stubSimpleCall(expectedResponse);
            const [response] = await client.getSubscription(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getSubscription without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.GetSubscriptionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription());
            client.innerApiCalls.getSubscription = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getSubscription(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.ISubscription|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getSubscription with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.GetSubscriptionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getSubscription = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getSubscription(request), expectedError);
            assert((client.innerApiCalls.getSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateSubscription', () => {
        it('invokes updateSubscription without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.UpdateSubscriptionRequest());
            request.subscription = {};
            request.subscription.name = '';
            const expectedHeaderRequestParams = "subscription.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription());
            client.innerApiCalls.updateSubscription = stubSimpleCall(expectedResponse);
            const [response] = await client.updateSubscription(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateSubscription without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.UpdateSubscriptionRequest());
            request.subscription = {};
            request.subscription.name = '';
            const expectedHeaderRequestParams = "subscription.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription());
            client.innerApiCalls.updateSubscription = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateSubscription(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.ISubscription|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateSubscription with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.UpdateSubscriptionRequest());
            request.subscription = {};
            request.subscription.name = '';
            const expectedHeaderRequestParams = "subscription.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateSubscription = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateSubscription(request), expectedError);
            assert((client.innerApiCalls.updateSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteSubscription', () => {
        it('invokes deleteSubscription without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.DeleteSubscriptionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteSubscription = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteSubscription(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteSubscription without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.DeleteSubscriptionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteSubscription = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteSubscription(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteSubscription with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.DeleteSubscriptionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteSubscription = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteSubscription(request), expectedError);
            assert((client.innerApiCalls.deleteSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createReservation', () => {
        it('invokes createReservation without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.CreateReservationRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation());
            client.innerApiCalls.createReservation = stubSimpleCall(expectedResponse);
            const [response] = await client.createReservation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createReservation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createReservation without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.CreateReservationRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation());
            client.innerApiCalls.createReservation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createReservation(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.IReservation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createReservation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createReservation with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.CreateReservationRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createReservation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createReservation(request), expectedError);
            assert((client.innerApiCalls.createReservation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getReservation', () => {
        it('invokes getReservation without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.GetReservationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation());
            client.innerApiCalls.getReservation = stubSimpleCall(expectedResponse);
            const [response] = await client.getReservation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getReservation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getReservation without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.GetReservationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation());
            client.innerApiCalls.getReservation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getReservation(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.IReservation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getReservation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getReservation with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.GetReservationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getReservation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getReservation(request), expectedError);
            assert((client.innerApiCalls.getReservation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateReservation', () => {
        it('invokes updateReservation without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.UpdateReservationRequest());
            request.reservation = {};
            request.reservation.name = '';
            const expectedHeaderRequestParams = "reservation.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation());
            client.innerApiCalls.updateReservation = stubSimpleCall(expectedResponse);
            const [response] = await client.updateReservation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateReservation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateReservation without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.UpdateReservationRequest());
            request.reservation = {};
            request.reservation.name = '';
            const expectedHeaderRequestParams = "reservation.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation());
            client.innerApiCalls.updateReservation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateReservation(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.IReservation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateReservation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateReservation with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.UpdateReservationRequest());
            request.reservation = {};
            request.reservation.name = '';
            const expectedHeaderRequestParams = "reservation.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateReservation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateReservation(request), expectedError);
            assert((client.innerApiCalls.updateReservation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteReservation', () => {
        it('invokes deleteReservation without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.DeleteReservationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteReservation = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteReservation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteReservation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteReservation without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.DeleteReservationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteReservation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteReservation(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteReservation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteReservation with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.DeleteReservationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteReservation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteReservation(request), expectedError);
            assert((client.innerApiCalls.deleteReservation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('seekSubscription', () => {
        it('invokes seekSubscription without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.SeekSubscriptionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.seekSubscription = stubLongRunningCall(expectedResponse);
            const [operation] = await client.seekSubscription(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.seekSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes seekSubscription without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.SeekSubscriptionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.seekSubscription = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.seekSubscription(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.pubsublite.v1.ISeekSubscriptionResponse, protos.google.cloud.pubsublite.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.pubsublite.v1.ISeekSubscriptionResponse, protos.google.cloud.pubsublite.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.seekSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes seekSubscription with call error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.SeekSubscriptionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.seekSubscription = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.seekSubscription(request), expectedError);
            assert((client.innerApiCalls.seekSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes seekSubscription with LRO error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.SeekSubscriptionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.seekSubscription = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.seekSubscription(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.seekSubscription as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkSeekSubscriptionProgress without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkSeekSubscriptionProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkSeekSubscriptionProgress with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkSeekSubscriptionProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listTopics', () => {
        it('invokes listTopics without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListTopicsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic()),
            ];
            client.innerApiCalls.listTopics = stubSimpleCall(expectedResponse);
            const [response] = await client.listTopics(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTopics as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTopics without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListTopicsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic()),
            ];
            client.innerApiCalls.listTopics = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listTopics(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.ITopic[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTopics as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listTopics with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListTopicsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listTopics = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listTopics(request), expectedError);
            assert((client.innerApiCalls.listTopics as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTopicsStream without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListTopicsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic()),
            ];
            client.descriptors.page.listTopics.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listTopicsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.pubsublite.v1.Topic[] = [];
                stream.on('data', (response: protos.google.cloud.pubsublite.v1.Topic) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listTopics.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTopics, request));
            assert.strictEqual(
                (client.descriptors.page.listTopics.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listTopicsStream with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListTopicsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listTopics.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listTopicsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.pubsublite.v1.Topic[] = [];
                stream.on('data', (response: protos.google.cloud.pubsublite.v1.Topic) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listTopics.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTopics, request));
            assert.strictEqual(
                (client.descriptors.page.listTopics.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTopics without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListTopicsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Topic()),
            ];
            client.descriptors.page.listTopics.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.pubsublite.v1.ITopic[] = [];
            const iterable = client.listTopicsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listTopics.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTopics.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTopics with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListTopicsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listTopics.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listTopicsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.pubsublite.v1.ITopic[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listTopics.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTopics.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listTopicSubscriptions', () => {
        it('invokes listTopicSubscriptions without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListTopicSubscriptionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [new String(), new String(), new String()];
            client.innerApiCalls.listTopicSubscriptions = stubSimpleCall(expectedResponse);
            const [response] = await client.listTopicSubscriptions(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTopicSubscriptions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTopicSubscriptions without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListTopicSubscriptionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [new String(), new String(), new String()];
            client.innerApiCalls.listTopicSubscriptions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listTopicSubscriptions(
                    request,
                    (err?: Error|null, result?: string[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTopicSubscriptions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listTopicSubscriptions with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListTopicSubscriptionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listTopicSubscriptions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listTopicSubscriptions(request), expectedError);
            assert((client.innerApiCalls.listTopicSubscriptions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTopicSubscriptionsStream without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListTopicSubscriptionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedResponse = [new String(), new String(), new String()];
            client.descriptors.page.listTopicSubscriptions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listTopicSubscriptionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: string[] = [];
                stream.on('data', (response: string) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listTopicSubscriptions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTopicSubscriptions, request));
            assert.strictEqual(
                (client.descriptors.page.listTopicSubscriptions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listTopicSubscriptionsStream with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListTopicSubscriptionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedError = new Error('expected');
            client.descriptors.page.listTopicSubscriptions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listTopicSubscriptionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: string[] = [];
                stream.on('data', (response: string) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listTopicSubscriptions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTopicSubscriptions, request));
            assert.strictEqual(
                (client.descriptors.page.listTopicSubscriptions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTopicSubscriptions without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListTopicSubscriptionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedResponse = [new String(), new String(), new String()];
            client.descriptors.page.listTopicSubscriptions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: string[] = [];
            const iterable = client.listTopicSubscriptionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listTopicSubscriptions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTopicSubscriptions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTopicSubscriptions with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListTopicSubscriptionsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";const expectedError = new Error('expected');
            client.descriptors.page.listTopicSubscriptions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listTopicSubscriptionsAsync(request);
            await assert.rejects(async () => {
                const responses: string[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listTopicSubscriptions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTopicSubscriptions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listSubscriptions', () => {
        it('invokes listSubscriptions without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListSubscriptionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription()),
            ];
            client.innerApiCalls.listSubscriptions = stubSimpleCall(expectedResponse);
            const [response] = await client.listSubscriptions(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listSubscriptions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listSubscriptions without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListSubscriptionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription()),
            ];
            client.innerApiCalls.listSubscriptions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listSubscriptions(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.ISubscription[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listSubscriptions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listSubscriptions with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListSubscriptionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listSubscriptions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listSubscriptions(request), expectedError);
            assert((client.innerApiCalls.listSubscriptions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listSubscriptionsStream without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListSubscriptionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription()),
            ];
            client.descriptors.page.listSubscriptions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listSubscriptionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.pubsublite.v1.Subscription[] = [];
                stream.on('data', (response: protos.google.cloud.pubsublite.v1.Subscription) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listSubscriptions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSubscriptions, request));
            assert.strictEqual(
                (client.descriptors.page.listSubscriptions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listSubscriptionsStream with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListSubscriptionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listSubscriptions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listSubscriptionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.pubsublite.v1.Subscription[] = [];
                stream.on('data', (response: protos.google.cloud.pubsublite.v1.Subscription) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listSubscriptions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listSubscriptions, request));
            assert.strictEqual(
                (client.descriptors.page.listSubscriptions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listSubscriptions without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListSubscriptionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Subscription()),
            ];
            client.descriptors.page.listSubscriptions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.pubsublite.v1.ISubscription[] = [];
            const iterable = client.listSubscriptionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listSubscriptions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listSubscriptions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listSubscriptions with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListSubscriptionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listSubscriptions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listSubscriptionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.pubsublite.v1.ISubscription[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listSubscriptions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listSubscriptions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listReservations', () => {
        it('invokes listReservations without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListReservationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation()),
            ];
            client.innerApiCalls.listReservations = stubSimpleCall(expectedResponse);
            const [response] = await client.listReservations(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listReservations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listReservations without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListReservationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation()),
            ];
            client.innerApiCalls.listReservations = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listReservations(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.pubsublite.v1.IReservation[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listReservations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listReservations with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListReservationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listReservations = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listReservations(request), expectedError);
            assert((client.innerApiCalls.listReservations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listReservationsStream without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListReservationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation()),
            ];
            client.descriptors.page.listReservations.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listReservationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.pubsublite.v1.Reservation[] = [];
                stream.on('data', (response: protos.google.cloud.pubsublite.v1.Reservation) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listReservations.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listReservations, request));
            assert.strictEqual(
                (client.descriptors.page.listReservations.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listReservationsStream with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListReservationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listReservations.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listReservationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.pubsublite.v1.Reservation[] = [];
                stream.on('data', (response: protos.google.cloud.pubsublite.v1.Reservation) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listReservations.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listReservations, request));
            assert.strictEqual(
                (client.descriptors.page.listReservations.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listReservations without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListReservationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation()),
              generateSampleMessage(new protos.google.cloud.pubsublite.v1.Reservation()),
            ];
            client.descriptors.page.listReservations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.pubsublite.v1.IReservation[] = [];
            const iterable = client.listReservationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listReservations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listReservations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listReservations with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListReservationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listReservations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listReservationsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.pubsublite.v1.IReservation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listReservations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listReservations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listReservationTopics', () => {
        it('invokes listReservationTopics without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListReservationTopicsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [new String(), new String(), new String()];
            client.innerApiCalls.listReservationTopics = stubSimpleCall(expectedResponse);
            const [response] = await client.listReservationTopics(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listReservationTopics as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listReservationTopics without error using callback', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListReservationTopicsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [new String(), new String(), new String()];
            client.innerApiCalls.listReservationTopics = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listReservationTopics(
                    request,
                    (err?: Error|null, result?: string[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listReservationTopics as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listReservationTopics with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListReservationTopicsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listReservationTopics = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listReservationTopics(request), expectedError);
            assert((client.innerApiCalls.listReservationTopics as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listReservationTopicsStream without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListReservationTopicsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedResponse = [new String(), new String(), new String()];
            client.descriptors.page.listReservationTopics.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listReservationTopicsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: string[] = [];
                stream.on('data', (response: string) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listReservationTopics.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listReservationTopics, request));
            assert.strictEqual(
                (client.descriptors.page.listReservationTopics.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listReservationTopicsStream with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListReservationTopicsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedError = new Error('expected');
            client.descriptors.page.listReservationTopics.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listReservationTopicsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: string[] = [];
                stream.on('data', (response: string) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listReservationTopics.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listReservationTopics, request));
            assert.strictEqual(
                (client.descriptors.page.listReservationTopics.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listReservationTopics without error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListReservationTopicsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedResponse = [new String(), new String(), new String()];
            client.descriptors.page.listReservationTopics.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: string[] = [];
            const iterable = client.listReservationTopicsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listReservationTopics.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listReservationTopics.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listReservationTopics with error', async () => {
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.pubsublite.v1.ListReservationTopicsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";const expectedError = new Error('expected');
            client.descriptors.page.listReservationTopics.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listReservationTopicsAsync(request);
            await assert.rejects(async () => {
                const responses: string[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listReservationTopics.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listReservationTopics.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('location', () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('reservation', () => {
            const fakePath = "/rendered/path/reservation";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                reservation: "reservationValue",
            };
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.reservationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.reservationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('reservationPath', () => {
                const result = client.reservationPath("projectValue", "locationValue", "reservationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.reservationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromReservationName', () => {
                const result = client.matchProjectFromReservationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.reservationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromReservationName', () => {
                const result = client.matchLocationFromReservationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.reservationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchReservationFromReservationName', () => {
                const result = client.matchReservationFromReservationName(fakePath);
                assert.strictEqual(result, "reservationValue");
                assert((client.pathTemplates.reservationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('subscription', () => {
            const fakePath = "/rendered/path/subscription";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                subscription: "subscriptionValue",
            };
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.subscriptionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.subscriptionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('subscriptionPath', () => {
                const result = client.subscriptionPath("projectValue", "locationValue", "subscriptionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.subscriptionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromSubscriptionName', () => {
                const result = client.matchProjectFromSubscriptionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.subscriptionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSubscriptionName', () => {
                const result = client.matchLocationFromSubscriptionName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.subscriptionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSubscriptionFromSubscriptionName', () => {
                const result = client.matchSubscriptionFromSubscriptionName(fakePath);
                assert.strictEqual(result, "subscriptionValue");
                assert((client.pathTemplates.subscriptionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('topic', () => {
            const fakePath = "/rendered/path/topic";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                topic: "topicValue",
            };
            const client = new adminserviceModule.v1.AdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.topicPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.topicPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('topicPath', () => {
                const result = client.topicPath("projectValue", "locationValue", "topicValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.topicPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromTopicName', () => {
                const result = client.matchProjectFromTopicName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.topicPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromTopicName', () => {
                const result = client.matchLocationFromTopicName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.topicPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTopicFromTopicName', () => {
                const result = client.matchTopicFromTopicName(fakePath);
                assert.strictEqual(result, "topicValue");
                assert((client.pathTemplates.topicPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});

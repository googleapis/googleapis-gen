// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/ondemandscanning/v1beta1/scanner_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.OnDemandScanning.V1Beta1 {
  /// <summary>
  /// The Scanner service of the On-Demand Scanning API.
  ///
  /// This service provides a way to find vulnerabilities for the packages in some
  /// container image. A user provides a a list of packages to `AnalyzePackages`
  /// and receives a list of vulnerabilities in return. The `AnalyzePackages`
  /// method is asynchronous, implementing Long-running Operations to track
  /// progress.
  /// </summary>
  public static partial class ScannerService
  {
    static readonly string __ServiceName = "google.cloud.ondemandscanning.v1beta1.ScannerService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Google.Cloud.OnDemandScanning.V1Beta1.AnalyzePackagesRequest> __Marshaller_google_cloud_ondemandscanning_v1beta1_AnalyzePackagesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OnDemandScanning.V1Beta1.AnalyzePackagesRequest.Parser));
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesRequest> __Marshaller_google_cloud_ondemandscanning_v1beta1_ListVulnerabilitiesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesRequest.Parser));
    static readonly grpc::Marshaller<global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesResponse> __Marshaller_google_cloud_ondemandscanning_v1beta1_ListVulnerabilitiesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesResponse.Parser));

    static readonly grpc::Method<global::Google.Cloud.OnDemandScanning.V1Beta1.AnalyzePackagesRequest, global::Google.LongRunning.Operation> __Method_AnalyzePackages = new grpc::Method<global::Google.Cloud.OnDemandScanning.V1Beta1.AnalyzePackagesRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AnalyzePackages",
        __Marshaller_google_cloud_ondemandscanning_v1beta1_AnalyzePackagesRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesRequest, global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesResponse> __Method_ListVulnerabilities = new grpc::Method<global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesRequest, global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListVulnerabilities",
        __Marshaller_google_cloud_ondemandscanning_v1beta1_ListVulnerabilitiesRequest,
        __Marshaller_google_cloud_ondemandscanning_v1beta1_ListVulnerabilitiesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.OnDemandScanning.V1Beta1.ScannerServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ScannerService</summary>
    [grpc::BindServiceMethod(typeof(ScannerService), "BindService")]
    public abstract partial class ScannerServiceBase
    {
      /// <summary>
      /// Initiates an analysis of the provided packages.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> AnalyzePackages(global::Google.Cloud.OnDemandScanning.V1Beta1.AnalyzePackagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists vulnerabilities resulting from a successfully completed scan.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesResponse> ListVulnerabilities(global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ScannerService</summary>
    public partial class ScannerServiceClient : grpc::ClientBase<ScannerServiceClient>
    {
      /// <summary>Creates a new client for ScannerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ScannerServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ScannerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ScannerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ScannerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ScannerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Initiates an analysis of the provided packages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation AnalyzePackages(global::Google.Cloud.OnDemandScanning.V1Beta1.AnalyzePackagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzePackages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initiates an analysis of the provided packages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation AnalyzePackages(global::Google.Cloud.OnDemandScanning.V1Beta1.AnalyzePackagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AnalyzePackages, null, options, request);
      }
      /// <summary>
      /// Initiates an analysis of the provided packages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AnalyzePackagesAsync(global::Google.Cloud.OnDemandScanning.V1Beta1.AnalyzePackagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzePackagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initiates an analysis of the provided packages.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AnalyzePackagesAsync(global::Google.Cloud.OnDemandScanning.V1Beta1.AnalyzePackagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AnalyzePackages, null, options, request);
      }
      /// <summary>
      /// Lists vulnerabilities resulting from a successfully completed scan.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesResponse ListVulnerabilities(global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVulnerabilities(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists vulnerabilities resulting from a successfully completed scan.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesResponse ListVulnerabilities(global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListVulnerabilities, null, options, request);
      }
      /// <summary>
      /// Lists vulnerabilities resulting from a successfully completed scan.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesResponse> ListVulnerabilitiesAsync(global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVulnerabilitiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists vulnerabilities resulting from a successfully completed scan.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesResponse> ListVulnerabilitiesAsync(global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListVulnerabilities, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ScannerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ScannerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ScannerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AnalyzePackages, serviceImpl.AnalyzePackages)
          .AddMethod(__Method_ListVulnerabilities, serviceImpl.ListVulnerabilities).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ScannerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AnalyzePackages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OnDemandScanning.V1Beta1.AnalyzePackagesRequest, global::Google.LongRunning.Operation>(serviceImpl.AnalyzePackages));
      serviceBinder.AddMethod(__Method_ListVulnerabilities, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesRequest, global::Google.Cloud.OnDemandScanning.V1Beta1.ListVulnerabilitiesResponse>(serviceImpl.ListVulnerabilities));
    }

  }
}
#endregion

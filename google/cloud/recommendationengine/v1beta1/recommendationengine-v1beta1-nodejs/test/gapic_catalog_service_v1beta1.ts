// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as catalogserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.CatalogServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = catalogserviceModule.v1beta1.CatalogServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = catalogserviceModule.v1beta1.CatalogServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = catalogserviceModule.v1beta1.CatalogServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new catalogserviceModule.v1beta1.CatalogServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.catalogServiceStub, undefined);
        await client.initialize();
        assert(client.catalogServiceStub);
    });

    it('has close method', () => {
        const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('createCatalogItem', () => {
        it('invokes createCatalogItem without error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CreateCatalogItemRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem());
            client.innerApiCalls.createCatalogItem = stubSimpleCall(expectedResponse);
            const [response] = await client.createCatalogItem(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCatalogItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createCatalogItem without error using callback', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CreateCatalogItemRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem());
            client.innerApiCalls.createCatalogItem = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCatalogItem(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.recommendationengine.v1beta1.ICatalogItem|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCatalogItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createCatalogItem with error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CreateCatalogItemRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createCatalogItem = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createCatalogItem(request), expectedError);
            assert((client.innerApiCalls.createCatalogItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getCatalogItem', () => {
        it('invokes getCatalogItem without error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.GetCatalogItemRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem());
            client.innerApiCalls.getCatalogItem = stubSimpleCall(expectedResponse);
            const [response] = await client.getCatalogItem(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCatalogItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getCatalogItem without error using callback', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.GetCatalogItemRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem());
            client.innerApiCalls.getCatalogItem = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCatalogItem(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.recommendationengine.v1beta1.ICatalogItem|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCatalogItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getCatalogItem with error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.GetCatalogItemRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getCatalogItem = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCatalogItem(request), expectedError);
            assert((client.innerApiCalls.getCatalogItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateCatalogItem', () => {
        it('invokes updateCatalogItem without error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UpdateCatalogItemRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem());
            client.innerApiCalls.updateCatalogItem = stubSimpleCall(expectedResponse);
            const [response] = await client.updateCatalogItem(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCatalogItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCatalogItem without error using callback', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UpdateCatalogItemRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem());
            client.innerApiCalls.updateCatalogItem = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCatalogItem(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.recommendationengine.v1beta1.ICatalogItem|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCatalogItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateCatalogItem with error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.UpdateCatalogItemRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCatalogItem = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateCatalogItem(request), expectedError);
            assert((client.innerApiCalls.updateCatalogItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteCatalogItem', () => {
        it('invokes deleteCatalogItem without error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.DeleteCatalogItemRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteCatalogItem = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteCatalogItem(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteCatalogItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteCatalogItem without error using callback', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.DeleteCatalogItemRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteCatalogItem = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteCatalogItem(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteCatalogItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteCatalogItem with error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.DeleteCatalogItemRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCatalogItem = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteCatalogItem(request), expectedError);
            assert((client.innerApiCalls.deleteCatalogItem as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('importCatalogItems', () => {
        it('invokes importCatalogItems without error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.ImportCatalogItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.importCatalogItems = stubLongRunningCall(expectedResponse);
            const [operation] = await client.importCatalogItems(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.importCatalogItems as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes importCatalogItems without error using callback', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.ImportCatalogItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.importCatalogItems = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.importCatalogItems(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.recommendationengine.v1beta1.IImportCatalogItemsResponse, protos.google.cloud.recommendationengine.v1beta1.IImportMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.recommendationengine.v1beta1.IImportCatalogItemsResponse, protos.google.cloud.recommendationengine.v1beta1.IImportMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.importCatalogItems as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes importCatalogItems with call error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.ImportCatalogItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.importCatalogItems = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.importCatalogItems(request), expectedError);
            assert((client.innerApiCalls.importCatalogItems as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes importCatalogItems with LRO error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.ImportCatalogItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.importCatalogItems = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.importCatalogItems(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.importCatalogItems as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkImportCatalogItemsProgress without error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkImportCatalogItemsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkImportCatalogItemsProgress with error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkImportCatalogItemsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listCatalogItems', () => {
        it('invokes listCatalogItems without error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.ListCatalogItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem()),
            ];
            client.innerApiCalls.listCatalogItems = stubSimpleCall(expectedResponse);
            const [response] = await client.listCatalogItems(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCatalogItems as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCatalogItems without error using callback', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.ListCatalogItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem()),
            ];
            client.innerApiCalls.listCatalogItems = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listCatalogItems(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.recommendationengine.v1beta1.ICatalogItem[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listCatalogItems as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listCatalogItems with error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.ListCatalogItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listCatalogItems = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCatalogItems(request), expectedError);
            assert((client.innerApiCalls.listCatalogItems as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listCatalogItemsStream without error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.ListCatalogItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem()),
            ];
            client.descriptors.page.listCatalogItems.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listCatalogItemsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.recommendationengine.v1beta1.CatalogItem[] = [];
                stream.on('data', (response: protos.google.cloud.recommendationengine.v1beta1.CatalogItem) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listCatalogItems.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCatalogItems, request));
            assert.strictEqual(
                (client.descriptors.page.listCatalogItems.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listCatalogItemsStream with error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.ListCatalogItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listCatalogItems.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCatalogItemsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.recommendationengine.v1beta1.CatalogItem[] = [];
                stream.on('data', (response: protos.google.cloud.recommendationengine.v1beta1.CatalogItem) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listCatalogItems.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCatalogItems, request));
            assert.strictEqual(
                (client.descriptors.page.listCatalogItems.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listCatalogItems without error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.ListCatalogItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem()),
              generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.CatalogItem()),
            ];
            client.descriptors.page.listCatalogItems.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.recommendationengine.v1beta1.ICatalogItem[] = [];
            const iterable = client.listCatalogItemsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listCatalogItems.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listCatalogItems.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listCatalogItems with error', async () => {
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.recommendationengine.v1beta1.ListCatalogItemsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listCatalogItems.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCatalogItemsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.recommendationengine.v1beta1.ICatalogItem[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listCatalogItems.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listCatalogItems.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('catalog', () => {
            const fakePath = "/rendered/path/catalog";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
            };
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.catalogPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.catalogPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('catalogPath', () => {
                const result = client.catalogPath("projectValue", "locationValue", "catalogValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.catalogPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCatalogName', () => {
                const result = client.matchProjectFromCatalogName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.catalogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCatalogName', () => {
                const result = client.matchLocationFromCatalogName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.catalogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromCatalogName', () => {
                const result = client.matchCatalogFromCatalogName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.catalogPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('catalogItemPath', () => {
            const fakePath = "/rendered/path/catalogItemPath";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                catalog: "catalogValue",
                catalog_item_path: "catalogItemPathValue",
            };
            const client = new catalogserviceModule.v1beta1.CatalogServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.catalogItemPathPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.catalogItemPathPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('catalogItemPathPath', () => {
                const result = client.catalogItemPathPath("projectValue", "locationValue", "catalogValue", "catalogItemPathValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.catalogItemPathPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCatalogItemPathName', () => {
                const result = client.matchProjectFromCatalogItemPathName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.catalogItemPathPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCatalogItemPathName', () => {
                const result = client.matchLocationFromCatalogItemPathName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.catalogItemPathPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogFromCatalogItemPathName', () => {
                const result = client.matchCatalogFromCatalogItemPathName(fakePath);
                assert.strictEqual(result, "catalogValue");
                assert((client.pathTemplates.catalogItemPathPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCatalogItemPathFromCatalogItemPathName', () => {
                const result = client.matchCatalogItemPathFromCatalogItemPathName(fakePath);
                assert.strictEqual(result, "catalogItemPathValue");
                assert((client.pathTemplates.catalogItemPathPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});

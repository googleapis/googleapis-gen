<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/videointelligence/v1p3beta1/video_intelligence.proto

namespace Google\Cloud\VideoIntelligence\V1p3beta1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Config for streaming storage option.
 *
 * Generated from protobuf message <code>google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig</code>
 */
class StreamingStorageConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Enable streaming storage. Default: false.
     *
     * Generated from protobuf field <code>bool enable_storage_annotation_result = 1;</code>
     */
    protected $enable_storage_annotation_result = false;
    /**
     * Cloud Storage URI to store all annotation results for one client. Client
     * should specify this field as the top-level storage directory. Annotation
     * results of different sessions will be put into different sub-directories
     * denoted by project_name and session_id. All sub-directories will be auto
     * generated by program and will be made accessible to client in response
     * proto. URIs must be specified in the following format:
     * `gs://bucket-id/object-id` `bucket-id` should be a valid Cloud Storage
     * bucket created by client and bucket permission shall also be configured
     * properly. `object-id` can be arbitrary string that make sense to client.
     * Other URI formats will return error and cause Cloud Storage write failure.
     *
     * Generated from protobuf field <code>string annotation_result_storage_directory = 3;</code>
     */
    protected $annotation_result_storage_directory = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $enable_storage_annotation_result
     *           Enable streaming storage. Default: false.
     *     @type string $annotation_result_storage_directory
     *           Cloud Storage URI to store all annotation results for one client. Client
     *           should specify this field as the top-level storage directory. Annotation
     *           results of different sessions will be put into different sub-directories
     *           denoted by project_name and session_id. All sub-directories will be auto
     *           generated by program and will be made accessible to client in response
     *           proto. URIs must be specified in the following format:
     *           `gs://bucket-id/object-id` `bucket-id` should be a valid Cloud Storage
     *           bucket created by client and bucket permission shall also be configured
     *           properly. `object-id` can be arbitrary string that make sense to client.
     *           Other URI formats will return error and cause Cloud Storage write failure.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Videointelligence\V1P3Beta1\VideoIntelligence::initOnce();
        parent::__construct($data);
    }

    /**
     * Enable streaming storage. Default: false.
     *
     * Generated from protobuf field <code>bool enable_storage_annotation_result = 1;</code>
     * @return bool
     */
    public function getEnableStorageAnnotationResult()
    {
        return $this->enable_storage_annotation_result;
    }

    /**
     * Enable streaming storage. Default: false.
     *
     * Generated from protobuf field <code>bool enable_storage_annotation_result = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setEnableStorageAnnotationResult($var)
    {
        GPBUtil::checkBool($var);
        $this->enable_storage_annotation_result = $var;

        return $this;
    }

    /**
     * Cloud Storage URI to store all annotation results for one client. Client
     * should specify this field as the top-level storage directory. Annotation
     * results of different sessions will be put into different sub-directories
     * denoted by project_name and session_id. All sub-directories will be auto
     * generated by program and will be made accessible to client in response
     * proto. URIs must be specified in the following format:
     * `gs://bucket-id/object-id` `bucket-id` should be a valid Cloud Storage
     * bucket created by client and bucket permission shall also be configured
     * properly. `object-id` can be arbitrary string that make sense to client.
     * Other URI formats will return error and cause Cloud Storage write failure.
     *
     * Generated from protobuf field <code>string annotation_result_storage_directory = 3;</code>
     * @return string
     */
    public function getAnnotationResultStorageDirectory()
    {
        return $this->annotation_result_storage_directory;
    }

    /**
     * Cloud Storage URI to store all annotation results for one client. Client
     * should specify this field as the top-level storage directory. Annotation
     * results of different sessions will be put into different sub-directories
     * denoted by project_name and session_id. All sub-directories will be auto
     * generated by program and will be made accessible to client in response
     * proto. URIs must be specified in the following format:
     * `gs://bucket-id/object-id` `bucket-id` should be a valid Cloud Storage
     * bucket created by client and bucket permission shall also be configured
     * properly. `object-id` can be arbitrary string that make sense to client.
     * Other URI formats will return error and cause Cloud Storage write failure.
     *
     * Generated from protobuf field <code>string annotation_result_storage_directory = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setAnnotationResultStorageDirectory($var)
    {
        GPBUtil::checkString($var, True);
        $this->annotation_result_storage_directory = $var;

        return $this;
    }

}


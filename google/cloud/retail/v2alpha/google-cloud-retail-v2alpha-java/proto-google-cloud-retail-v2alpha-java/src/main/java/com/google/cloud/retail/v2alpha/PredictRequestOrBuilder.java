// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/retail/v2alpha/prediction_service.proto

package com.google.cloud.retail.v2alpha;

public interface PredictRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.retail.v2alpha.PredictRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Required. Full resource name of the format:
   * {name=projects/&#42;&#47;locations/global/catalogs/default_catalog/placements/&#42;}
   * The id of the recommendation engine placement. This id is used to identify
   * the set of models that will be used to make the prediction.
   * We currently support three placements with the following IDs by default:
   * * `shopping_cart`: Predicts products frequently bought together with one or
   *   more  products in the same shopping session. Commonly displayed after
   *   `add-to-cart` events, on product detail pages, or on the shopping cart
   *   page.
   * * `home_page`: Predicts the next product that a user will most likely
   *   engage with or purchase based on the shopping or viewing history of the
   *   specified `userId` or `visitorId`. For example - Recommendations for you.
   * * `product_detail`: Predicts the next product that a user will most likely
   *   engage with or purchase. The prediction is based on the shopping or
   *   viewing history of the specified `userId` or `visitorId` and its
   *   relevance to a specified `CatalogItem`. Typically used on product detail
   *   pages. For example - More products like this.
   * * `recently_viewed_default`: Returns up to 75 products recently viewed by
   *   the specified `userId` or `visitorId`, most recent ones first. Returns
   *   nothing if neither of them has viewed any products yet. For example -
   *   Recently viewed.
   * The full list of available placements can be seen at
   * https://console.cloud.google.com/recommendation/catalogs/default_catalog/placements
   * </pre>
   *
   * <code>string placement = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The placement.
   */
  java.lang.String getPlacement();
  /**
   * <pre>
   * Required. Full resource name of the format:
   * {name=projects/&#42;&#47;locations/global/catalogs/default_catalog/placements/&#42;}
   * The id of the recommendation engine placement. This id is used to identify
   * the set of models that will be used to make the prediction.
   * We currently support three placements with the following IDs by default:
   * * `shopping_cart`: Predicts products frequently bought together with one or
   *   more  products in the same shopping session. Commonly displayed after
   *   `add-to-cart` events, on product detail pages, or on the shopping cart
   *   page.
   * * `home_page`: Predicts the next product that a user will most likely
   *   engage with or purchase based on the shopping or viewing history of the
   *   specified `userId` or `visitorId`. For example - Recommendations for you.
   * * `product_detail`: Predicts the next product that a user will most likely
   *   engage with or purchase. The prediction is based on the shopping or
   *   viewing history of the specified `userId` or `visitorId` and its
   *   relevance to a specified `CatalogItem`. Typically used on product detail
   *   pages. For example - More products like this.
   * * `recently_viewed_default`: Returns up to 75 products recently viewed by
   *   the specified `userId` or `visitorId`, most recent ones first. Returns
   *   nothing if neither of them has viewed any products yet. For example -
   *   Recently viewed.
   * The full list of available placements can be seen at
   * https://console.cloud.google.com/recommendation/catalogs/default_catalog/placements
   * </pre>
   *
   * <code>string placement = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The bytes for placement.
   */
  com.google.protobuf.ByteString
      getPlacementBytes();

  /**
   * <pre>
   * Required. Context about the user, what they are looking at and what action
   * they took to trigger the predict request. Note that this user event detail
   * won't be ingested to userEvent logs. Thus, a separate userEvent write
   * request is required for event logging.
   * </pre>
   *
   * <code>.google.cloud.retail.v2alpha.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return Whether the userEvent field is set.
   */
  boolean hasUserEvent();
  /**
   * <pre>
   * Required. Context about the user, what they are looking at and what action
   * they took to trigger the predict request. Note that this user event detail
   * won't be ingested to userEvent logs. Thus, a separate userEvent write
   * request is required for event logging.
   * </pre>
   *
   * <code>.google.cloud.retail.v2alpha.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The userEvent.
   */
  com.google.cloud.retail.v2alpha.UserEvent getUserEvent();
  /**
   * <pre>
   * Required. Context about the user, what they are looking at and what action
   * they took to trigger the predict request. Note that this user event detail
   * won't be ingested to userEvent logs. Thus, a separate userEvent write
   * request is required for event logging.
   * </pre>
   *
   * <code>.google.cloud.retail.v2alpha.UserEvent user_event = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  com.google.cloud.retail.v2alpha.UserEventOrBuilder getUserEventOrBuilder();

  /**
   * <pre>
   * Maximum number of results to return per page. Set this property
   * to the number of prediction results needed. If zero, the service will
   * choose a reasonable default. The maximum allowed value is 100. Values
   * above 100 will be coerced to 100.
   * </pre>
   *
   * <code>int32 page_size = 3;</code>
   * @return The pageSize.
   */
  int getPageSize();

  /**
   * <pre>
   * The previous PredictResponse.next_page_token.
   * </pre>
   *
   * <code>string page_token = 4;</code>
   * @return The pageToken.
   */
  java.lang.String getPageToken();
  /**
   * <pre>
   * The previous PredictResponse.next_page_token.
   * </pre>
   *
   * <code>string page_token = 4;</code>
   * @return The bytes for pageToken.
   */
  com.google.protobuf.ByteString
      getPageTokenBytes();

  /**
   * <pre>
   * Filter for restricting prediction results with a length limit of 5,000
   * characters. Accepts values for tags and the `filterOutOfStockItems` flag.
   *  * Tag expressions. Restricts predictions to products that match all of the
   *    specified tags. Boolean operators `OR` and `NOT` are supported if the
   *    expression is enclosed in parentheses, and must be separated from the
   *    tag values by a space. `-"tagA"` is also supported and is equivalent to
   *    `NOT "tagA"`. Tag values must be double quoted UTF-8 encoded strings
   *    with a size limit of 1,000 characters.
   *  * filterOutOfStockItems. Restricts predictions to products that do not
   *  have a
   *    stockState value of OUT_OF_STOCK.
   * Examples:
   *  * tag=("Red" OR "Blue") tag="New-Arrival" tag=(NOT "promotional")
   *  * filterOutOfStockItems  tag=(-"promotional")
   *  * filterOutOfStockItems
   * If your filter blocks all prediction results, nothing will be returned. If
   * you want generic (unfiltered) popular products to be returned instead, set
   * `strictFiltering` to false in `PredictRequest.params`.
   * </pre>
   *
   * <code>string filter = 5;</code>
   * @return The filter.
   */
  java.lang.String getFilter();
  /**
   * <pre>
   * Filter for restricting prediction results with a length limit of 5,000
   * characters. Accepts values for tags and the `filterOutOfStockItems` flag.
   *  * Tag expressions. Restricts predictions to products that match all of the
   *    specified tags. Boolean operators `OR` and `NOT` are supported if the
   *    expression is enclosed in parentheses, and must be separated from the
   *    tag values by a space. `-"tagA"` is also supported and is equivalent to
   *    `NOT "tagA"`. Tag values must be double quoted UTF-8 encoded strings
   *    with a size limit of 1,000 characters.
   *  * filterOutOfStockItems. Restricts predictions to products that do not
   *  have a
   *    stockState value of OUT_OF_STOCK.
   * Examples:
   *  * tag=("Red" OR "Blue") tag="New-Arrival" tag=(NOT "promotional")
   *  * filterOutOfStockItems  tag=(-"promotional")
   *  * filterOutOfStockItems
   * If your filter blocks all prediction results, nothing will be returned. If
   * you want generic (unfiltered) popular products to be returned instead, set
   * `strictFiltering` to false in `PredictRequest.params`.
   * </pre>
   *
   * <code>string filter = 5;</code>
   * @return The bytes for filter.
   */
  com.google.protobuf.ByteString
      getFilterBytes();

  /**
   * <pre>
   * Use validate only mode for this prediction query. If set to true, a
   * dummy model will be used that returns arbitrary products.
   * Note that the validate only mode should only be used for testing the API,
   * or if the model is not ready.
   * </pre>
   *
   * <code>bool validate_only = 6;</code>
   * @return The validateOnly.
   */
  boolean getValidateOnly();

  /**
   * <pre>
   * Additional domain specific parameters for the predictions.
   * Allowed values:
   * * `returnProduct`: Boolean. If set to true, the associated product
   *    object will be returned in the `results.metadata` field in the
   *    prediction response.
   * * `returnScore`: Boolean. If set to true, the prediction 'score'
   *    corresponding to each returned product will be set in the
   *    `results.metadata` field in the prediction response. The given
   *    'score' indicates the probability of an product being clicked/purchased
   *    given the user's context and history.
   * * `strictFiltering`: Boolean. True by default. If set to false, the service
   *    will return generic (unfiltered) popular products instead of empty if
   *    your filter blocks all prediction results.
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.Value&gt; params = 7;</code>
   */
  int getParamsCount();
  /**
   * <pre>
   * Additional domain specific parameters for the predictions.
   * Allowed values:
   * * `returnProduct`: Boolean. If set to true, the associated product
   *    object will be returned in the `results.metadata` field in the
   *    prediction response.
   * * `returnScore`: Boolean. If set to true, the prediction 'score'
   *    corresponding to each returned product will be set in the
   *    `results.metadata` field in the prediction response. The given
   *    'score' indicates the probability of an product being clicked/purchased
   *    given the user's context and history.
   * * `strictFiltering`: Boolean. True by default. If set to false, the service
   *    will return generic (unfiltered) popular products instead of empty if
   *    your filter blocks all prediction results.
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.Value&gt; params = 7;</code>
   */
  boolean containsParams(
      java.lang.String key);
  /**
   * Use {@link #getParamsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.google.protobuf.Value>
  getParams();
  /**
   * <pre>
   * Additional domain specific parameters for the predictions.
   * Allowed values:
   * * `returnProduct`: Boolean. If set to true, the associated product
   *    object will be returned in the `results.metadata` field in the
   *    prediction response.
   * * `returnScore`: Boolean. If set to true, the prediction 'score'
   *    corresponding to each returned product will be set in the
   *    `results.metadata` field in the prediction response. The given
   *    'score' indicates the probability of an product being clicked/purchased
   *    given the user's context and history.
   * * `strictFiltering`: Boolean. True by default. If set to false, the service
   *    will return generic (unfiltered) popular products instead of empty if
   *    your filter blocks all prediction results.
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.Value&gt; params = 7;</code>
   */
  java.util.Map<java.lang.String, com.google.protobuf.Value>
  getParamsMap();
  /**
   * <pre>
   * Additional domain specific parameters for the predictions.
   * Allowed values:
   * * `returnProduct`: Boolean. If set to true, the associated product
   *    object will be returned in the `results.metadata` field in the
   *    prediction response.
   * * `returnScore`: Boolean. If set to true, the prediction 'score'
   *    corresponding to each returned product will be set in the
   *    `results.metadata` field in the prediction response. The given
   *    'score' indicates the probability of an product being clicked/purchased
   *    given the user's context and history.
   * * `strictFiltering`: Boolean. True by default. If set to false, the service
   *    will return generic (unfiltered) popular products instead of empty if
   *    your filter blocks all prediction results.
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.Value&gt; params = 7;</code>
   */

  com.google.protobuf.Value getParamsOrDefault(
      java.lang.String key,
      com.google.protobuf.Value defaultValue);
  /**
   * <pre>
   * Additional domain specific parameters for the predictions.
   * Allowed values:
   * * `returnProduct`: Boolean. If set to true, the associated product
   *    object will be returned in the `results.metadata` field in the
   *    prediction response.
   * * `returnScore`: Boolean. If set to true, the prediction 'score'
   *    corresponding to each returned product will be set in the
   *    `results.metadata` field in the prediction response. The given
   *    'score' indicates the probability of an product being clicked/purchased
   *    given the user's context and history.
   * * `strictFiltering`: Boolean. True by default. If set to false, the service
   *    will return generic (unfiltered) popular products instead of empty if
   *    your filter blocks all prediction results.
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.Value&gt; params = 7;</code>
   */

  com.google.protobuf.Value getParamsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * The labels for the predict request.
   *  * Label keys can contain lowercase letters, digits and hyphens, must start
   *    with a letter, and must end with a letter or digit.
   *  * Non-zero label values can contain lowercase letters, digits and hyphens,
   *    must start with a letter, and must end with a letter or digit.
   *  * No more than 64 labels can be associated with a given request.
   * See https://goo.gl/xmQnxf for more information on and examples of labels.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 8;</code>
   */
  int getLabelsCount();
  /**
   * <pre>
   * The labels for the predict request.
   *  * Label keys can contain lowercase letters, digits and hyphens, must start
   *    with a letter, and must end with a letter or digit.
   *  * Non-zero label values can contain lowercase letters, digits and hyphens,
   *    must start with a letter, and must end with a letter or digit.
   *  * No more than 64 labels can be associated with a given request.
   * See https://goo.gl/xmQnxf for more information on and examples of labels.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 8;</code>
   */
  boolean containsLabels(
      java.lang.String key);
  /**
   * Use {@link #getLabelsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getLabels();
  /**
   * <pre>
   * The labels for the predict request.
   *  * Label keys can contain lowercase letters, digits and hyphens, must start
   *    with a letter, and must end with a letter or digit.
   *  * Non-zero label values can contain lowercase letters, digits and hyphens,
   *    must start with a letter, and must end with a letter or digit.
   *  * No more than 64 labels can be associated with a given request.
   * See https://goo.gl/xmQnxf for more information on and examples of labels.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 8;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getLabelsMap();
  /**
   * <pre>
   * The labels for the predict request.
   *  * Label keys can contain lowercase letters, digits and hyphens, must start
   *    with a letter, and must end with a letter or digit.
   *  * Non-zero label values can contain lowercase letters, digits and hyphens,
   *    must start with a letter, and must end with a letter or digit.
   *  * No more than 64 labels can be associated with a given request.
   * See https://goo.gl/xmQnxf for more information on and examples of labels.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 8;</code>
   */

  java.lang.String getLabelsOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <pre>
   * The labels for the predict request.
   *  * Label keys can contain lowercase letters, digits and hyphens, must start
   *    with a letter, and must end with a letter or digit.
   *  * Non-zero label values can contain lowercase letters, digits and hyphens,
   *    must start with a letter, and must end with a letter or digit.
   *  * No more than 64 labels can be associated with a given request.
   * See https://goo.gl/xmQnxf for more information on and examples of labels.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 8;</code>
   */

  java.lang.String getLabelsOrThrow(
      java.lang.String key);
}

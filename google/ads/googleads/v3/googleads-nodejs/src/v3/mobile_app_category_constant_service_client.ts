// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions} from 'google-gax';
import * as path from 'path';

import * as protos from '../../protos/protos';
/**
 * Client JSON configuration object, loaded from
 * `src/v3/mobile_app_category_constant_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './mobile_app_category_constant_service_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Service to fetch mobile app category constants.
 * @class
 * @memberof v3
 */
export class MobileAppCategoryConstantServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  mobileAppCategoryConstantServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of MobileAppCategoryConstantServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof MobileAppCategoryConstantServiceClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback ?
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      accountBudgetPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/accountBudgets/{account_budget}'
      ),
      accountBudgetProposalPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/accountBudgetProposals/{account_budget_proposal}'
      ),
      adPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/ads/{ad}'
      ),
      adGroupPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adGroups/{ad_group}'
      ),
      adGroupAdPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adGroupAds/{ad_group_ad}'
      ),
      adGroupAdAssetViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adGroupAdAssets/{ad_group_ad_asset_view}'
      ),
      adGroupAdLabelPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adGroupAdLabels/{ad_group_ad_label}'
      ),
      adGroupAudienceViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adGroupAudienceViews/{ad_group_audience_view}'
      ),
      adGroupBidModifierPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adGroupBidModifiers/{ad_group_bid_modifier}'
      ),
      adGroupCriterionPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adGroupCriteria/{ad_group_criterion}'
      ),
      adGroupCriterionLabelPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adGroupCriterionLabels/{ad_group_criterion_label}'
      ),
      adGroupCriterionSimulationPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adGroupCriterionSimulations/{ad_group_criterion_simulation}'
      ),
      adGroupExtensionSettingPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adGroupExtensionSettings/{ad_group_extension_setting}'
      ),
      adGroupFeedPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adGroupFeeds/{ad_group_feed}'
      ),
      adGroupLabelPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adGroupLabels/{ad_group_label}'
      ),
      adGroupSimulationPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adGroupSimulations/{ad_group_simulation}'
      ),
      adParameterPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adParameters/{ad_parameter}'
      ),
      adScheduleViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/adScheduleViews/{ad_schedule_view}'
      ),
      ageRangeViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/ageRangeViews/{age_range_view}'
      ),
      assetPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/assets/{asset}'
      ),
      biddingStrategyPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/biddingStrategies/{bidding_strategy}'
      ),
      billingSetupPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/billingSetups/{billing_setup}'
      ),
      campaignPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/campaigns/{campaign}'
      ),
      campaignAudienceViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/campaignAudienceViews/{campaign_audience_view}'
      ),
      campaignBidModifierPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/campaignBidModifiers/{campaign_bid_modifier}'
      ),
      campaignBudgetPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/campaignBudgets/{campaign_budget}'
      ),
      campaignCriterionPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/campaignCriteria/{campaign_criterion}'
      ),
      campaignCriterionSimulationPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/campaignCriterionSimulations/{campaign_criterion_simulation}'
      ),
      campaignDraftPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/campaignDrafts/{campaign_draft}'
      ),
      campaignExperimentPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/campaignExperiments/{campaign_experiment}'
      ),
      campaignExtensionSettingPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/campaignExtensionSettings/{campaign_extension_setting}'
      ),
      campaignFeedPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/campaignFeeds/{campaign_feed}'
      ),
      campaignLabelPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/campaignLabels/{campaign_label}'
      ),
      campaignSharedSetPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/campaignSharedSets/{campaign_shared_set}'
      ),
      carrierConstantPathTemplate: new this._gaxModule.PathTemplate(
        'carrierConstants/{carrier_constant}'
      ),
      changeStatusPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/changeStatus/{change_status}'
      ),
      clickViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/clickViews/{click_view}'
      ),
      conversionActionPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/conversionActions/{conversion_action}'
      ),
      currencyConstantPathTemplate: new this._gaxModule.PathTemplate(
        'currencyConstants/{currency_constant}'
      ),
      customInterestPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/customInterests/{custom_interest}'
      ),
      customerPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}'
      ),
      customerClientPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/customerClients/{customer_client}'
      ),
      customerClientLinkPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/customerClientLinks/{customer_client_link}'
      ),
      customerExtensionSettingPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/customerExtensionSettings/{customer_extension_setting}'
      ),
      customerFeedPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/customerFeeds/{customer_feed}'
      ),
      customerLabelPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/customerLabels/{customer_label}'
      ),
      customerManagerLinkPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/customerManagerLinks/{customer_manager_link}'
      ),
      customerNegativeCriterionPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/customerNegativeCriteria/{customer_negative_criterion}'
      ),
      detailPlacementViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/detailPlacementViews/{detail_placement_view}'
      ),
      displayKeywordViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/displayKeywordViews/{display_keyword_view}'
      ),
      distanceViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/distanceViews/{distance_view}'
      ),
      domainCategoryPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/domainCategories/{domain_category}'
      ),
      dynamicSearchAdsSearchTermViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/dynamicSearchAdsSearchTermViews/{dynamic_search_ads_search_term_view}'
      ),
      expandedLandingPageViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/expandedLandingPageViews/{expanded_landing_page_view}'
      ),
      extensionFeedItemPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/extensionFeedItems/{extension_feed_item}'
      ),
      feedPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/feeds/{feed}'
      ),
      feedItemPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/feedItems/{feed_item}'
      ),
      feedItemTargetPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/feedItemTargets/{feed_item_target}'
      ),
      feedMappingPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/feedMappings/{feed_mapping}'
      ),
      feedPlaceholderViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/feedPlaceholderViews/{feed_placeholder_view}'
      ),
      genderViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/genderViews/{gender_view}'
      ),
      geoTargetConstantPathTemplate: new this._gaxModule.PathTemplate(
        'geoTargetConstants/{geo_target_constant}'
      ),
      geographicViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/geographicViews/{geographic_view}'
      ),
      googleAdsFieldPathTemplate: new this._gaxModule.PathTemplate(
        'googleAdsFields/{google_ads_field}'
      ),
      groupPlacementViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/groupPlacementViews/{group_placement_view}'
      ),
      hotelGroupViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/hotelGroupViews/{hotel_group_view}'
      ),
      hotelPerformanceViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/hotelPerformanceView'
      ),
      invoicePathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/invoices/{invoice}'
      ),
      keywordPlanPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/keywordPlans/{keyword_plan}'
      ),
      keywordPlanAdGroupPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/keywordPlanAdGroups/{keyword_plan_ad_group}'
      ),
      keywordPlanCampaignPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/keywordPlanCampaigns/{keyword_plan_campaign}'
      ),
      keywordPlanKeywordPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/keywordPlanKeywords/{keyword_plan_keyword}'
      ),
      keywordPlanNegativeKeywordPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/keywordPlanNegativeKeywords/{keyword_plan_negative_keyword}'
      ),
      keywordViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/keywordViews/{keyword_view}'
      ),
      labelPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/labels/{label}'
      ),
      landingPageViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/landingPageViews/{landing_page_view}'
      ),
      languageConstantPathTemplate: new this._gaxModule.PathTemplate(
        'languageConstants/{language_constant}'
      ),
      locationViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/locationViews/{location_view}'
      ),
      managedPlacementViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/managedPlacementViews/{managed_placement_view}'
      ),
      mediaFilePathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/mediaFiles/{media_file}'
      ),
      merchantCenterLinkPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/merchantCenterLinks/{merchant_center_link}'
      ),
      mobileAppCategoryConstantPathTemplate: new this._gaxModule.PathTemplate(
        'mobileAppCategoryConstants/{mobile_app_category_constant}'
      ),
      mobileDeviceConstantPathTemplate: new this._gaxModule.PathTemplate(
        'mobileDeviceConstants/{mobile_device_constant}'
      ),
      mutateJobPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/mutateJobs/{mutate_job}'
      ),
      offlineUserDataJobPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/offlineUserDataJobs/{offline_user_data_job}'
      ),
      operatingSystemVersionConstantPathTemplate: new this._gaxModule.PathTemplate(
        'operatingSystemVersionConstants/{operating_system_version_constant}'
      ),
      paidOrganicSearchTermViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/paidOrganicSearchTermViews/{paid_organic_search_term_view}'
      ),
      parentalStatusViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/parentalStatusViews/{parental_status_view}'
      ),
      paymentsAccountPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/paymentsAccounts/{payments_account}'
      ),
      productBiddingCategoryConstantPathTemplate: new this._gaxModule.PathTemplate(
        'productBiddingCategoryConstants/{product_bidding_category_constant}'
      ),
      productGroupViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/productGroupViews/{product_group_view}'
      ),
      recommendationPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/recommendations/{recommendation}'
      ),
      remarketingActionPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/remarketingActions/{remarketing_action}'
      ),
      searchTermViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/searchTermViews/{search_term_view}'
      ),
      sharedCriterionPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/sharedCriteria/{shared_criterion}'
      ),
      sharedSetPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/sharedSets/{shared_set}'
      ),
      shoppingPerformanceViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/shoppingPerformanceView'
      ),
      topicConstantPathTemplate: new this._gaxModule.PathTemplate(
        'topicConstants/{topic_constant}'
      ),
      topicViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/topicViews/{topic_view}'
      ),
      userInterestPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/userInterests/{user_interest}'
      ),
      userListPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/userLists/{user_list}'
      ),
      userLocationViewPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/userLocationViews/{user_location_view}'
      ),
      videoPathTemplate: new this._gaxModule.PathTemplate(
        'customers/{customer}/videos/{video}'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.ads.googleads.v3.services.MobileAppCategoryConstantService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.mobileAppCategoryConstantServiceStub) {
      return this.mobileAppCategoryConstantServiceStub;
    }

    // Put together the "service stub" for
    // google.ads.googleads.v3.services.MobileAppCategoryConstantService.
    this.mobileAppCategoryConstantServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.ads.googleads.v3.services.MobileAppCategoryConstantService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.ads.googleads.v3.services.MobileAppCategoryConstantService,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const mobileAppCategoryConstantServiceStubMethods =
        ['getMobileAppCategoryConstant'];
    for (const methodName of mobileAppCategoryConstantServiceStubMethods) {
      const callPromise = this.mobileAppCategoryConstantServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.mobileAppCategoryConstantServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'googleads.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'googleads.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/adwords'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getMobileAppCategoryConstant(
      request: protos.google.ads.googleads.v3.services.IGetMobileAppCategoryConstantRequest,
      options?: CallOptions):
      Promise<[
        protos.google.ads.googleads.v3.resources.IMobileAppCategoryConstant,
        protos.google.ads.googleads.v3.services.IGetMobileAppCategoryConstantRequest|undefined, {}|undefined
      ]>;
  getMobileAppCategoryConstant(
      request: protos.google.ads.googleads.v3.services.IGetMobileAppCategoryConstantRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.ads.googleads.v3.resources.IMobileAppCategoryConstant,
          protos.google.ads.googleads.v3.services.IGetMobileAppCategoryConstantRequest|null|undefined,
          {}|null|undefined>): void;
  getMobileAppCategoryConstant(
      request: protos.google.ads.googleads.v3.services.IGetMobileAppCategoryConstantRequest,
      callback: Callback<
          protos.google.ads.googleads.v3.resources.IMobileAppCategoryConstant,
          protos.google.ads.googleads.v3.services.IGetMobileAppCategoryConstantRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns the requested mobile app category constant.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resourceName
 *   Required. Resource name of the mobile app category constant to fetch.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [MobileAppCategoryConstant]{@link google.ads.googleads.v3.resources.MobileAppCategoryConstant}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getMobileAppCategoryConstant(request);
 */
  getMobileAppCategoryConstant(
      request: protos.google.ads.googleads.v3.services.IGetMobileAppCategoryConstantRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.ads.googleads.v3.resources.IMobileAppCategoryConstant,
          protos.google.ads.googleads.v3.services.IGetMobileAppCategoryConstantRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.ads.googleads.v3.resources.IMobileAppCategoryConstant,
          protos.google.ads.googleads.v3.services.IGetMobileAppCategoryConstantRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.ads.googleads.v3.resources.IMobileAppCategoryConstant,
        protos.google.ads.googleads.v3.services.IGetMobileAppCategoryConstantRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'resource_name': request.resourceName || '',
    });
    this.initialize();
    return this.innerApiCalls.getMobileAppCategoryConstant(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified accountBudget resource name string.
   *
   * @param {string} customer
   * @param {string} account_budget
   * @returns {string} Resource name string.
   */
  accountBudgetPath(customer:string,accountBudget:string) {
    return this.pathTemplates.accountBudgetPathTemplate.render({
      customer: customer,
      account_budget: accountBudget,
    });
  }

  /**
   * Parse the customer from AccountBudget resource.
   *
   * @param {string} accountBudgetName
   *   A fully-qualified path representing AccountBudget resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAccountBudgetName(accountBudgetName: string) {
    return this.pathTemplates.accountBudgetPathTemplate.match(accountBudgetName).customer;
  }

  /**
   * Parse the account_budget from AccountBudget resource.
   *
   * @param {string} accountBudgetName
   *   A fully-qualified path representing AccountBudget resource.
   * @returns {string} A string representing the account_budget.
   */
  matchAccountBudgetFromAccountBudgetName(accountBudgetName: string) {
    return this.pathTemplates.accountBudgetPathTemplate.match(accountBudgetName).account_budget;
  }

  /**
   * Return a fully-qualified accountBudgetProposal resource name string.
   *
   * @param {string} customer
   * @param {string} account_budget_proposal
   * @returns {string} Resource name string.
   */
  accountBudgetProposalPath(customer:string,accountBudgetProposal:string) {
    return this.pathTemplates.accountBudgetProposalPathTemplate.render({
      customer: customer,
      account_budget_proposal: accountBudgetProposal,
    });
  }

  /**
   * Parse the customer from AccountBudgetProposal resource.
   *
   * @param {string} accountBudgetProposalName
   *   A fully-qualified path representing AccountBudgetProposal resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAccountBudgetProposalName(accountBudgetProposalName: string) {
    return this.pathTemplates.accountBudgetProposalPathTemplate.match(accountBudgetProposalName).customer;
  }

  /**
   * Parse the account_budget_proposal from AccountBudgetProposal resource.
   *
   * @param {string} accountBudgetProposalName
   *   A fully-qualified path representing AccountBudgetProposal resource.
   * @returns {string} A string representing the account_budget_proposal.
   */
  matchAccountBudgetProposalFromAccountBudgetProposalName(accountBudgetProposalName: string) {
    return this.pathTemplates.accountBudgetProposalPathTemplate.match(accountBudgetProposalName).account_budget_proposal;
  }

  /**
   * Return a fully-qualified ad resource name string.
   *
   * @param {string} customer
   * @param {string} ad
   * @returns {string} Resource name string.
   */
  adPath(customer:string,ad:string) {
    return this.pathTemplates.adPathTemplate.render({
      customer: customer,
      ad: ad,
    });
  }

  /**
   * Parse the customer from Ad resource.
   *
   * @param {string} adName
   *   A fully-qualified path representing Ad resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdName(adName: string) {
    return this.pathTemplates.adPathTemplate.match(adName).customer;
  }

  /**
   * Parse the ad from Ad resource.
   *
   * @param {string} adName
   *   A fully-qualified path representing Ad resource.
   * @returns {string} A string representing the ad.
   */
  matchAdFromAdName(adName: string) {
    return this.pathTemplates.adPathTemplate.match(adName).ad;
  }

  /**
   * Return a fully-qualified adGroup resource name string.
   *
   * @param {string} customer
   * @param {string} ad_group
   * @returns {string} Resource name string.
   */
  adGroupPath(customer:string,adGroup:string) {
    return this.pathTemplates.adGroupPathTemplate.render({
      customer: customer,
      ad_group: adGroup,
    });
  }

  /**
   * Parse the customer from AdGroup resource.
   *
   * @param {string} adGroupName
   *   A fully-qualified path representing AdGroup resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdGroupName(adGroupName: string) {
    return this.pathTemplates.adGroupPathTemplate.match(adGroupName).customer;
  }

  /**
   * Parse the ad_group from AdGroup resource.
   *
   * @param {string} adGroupName
   *   A fully-qualified path representing AdGroup resource.
   * @returns {string} A string representing the ad_group.
   */
  matchAdGroupFromAdGroupName(adGroupName: string) {
    return this.pathTemplates.adGroupPathTemplate.match(adGroupName).ad_group;
  }

  /**
   * Return a fully-qualified adGroupAd resource name string.
   *
   * @param {string} customer
   * @param {string} ad_group_ad
   * @returns {string} Resource name string.
   */
  adGroupAdPath(customer:string,adGroupAd:string) {
    return this.pathTemplates.adGroupAdPathTemplate.render({
      customer: customer,
      ad_group_ad: adGroupAd,
    });
  }

  /**
   * Parse the customer from AdGroupAd resource.
   *
   * @param {string} adGroupAdName
   *   A fully-qualified path representing AdGroupAd resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdGroupAdName(adGroupAdName: string) {
    return this.pathTemplates.adGroupAdPathTemplate.match(adGroupAdName).customer;
  }

  /**
   * Parse the ad_group_ad from AdGroupAd resource.
   *
   * @param {string} adGroupAdName
   *   A fully-qualified path representing AdGroupAd resource.
   * @returns {string} A string representing the ad_group_ad.
   */
  matchAdGroupAdFromAdGroupAdName(adGroupAdName: string) {
    return this.pathTemplates.adGroupAdPathTemplate.match(adGroupAdName).ad_group_ad;
  }

  /**
   * Return a fully-qualified adGroupAdAssetView resource name string.
   *
   * @param {string} customer
   * @param {string} ad_group_ad_asset_view
   * @returns {string} Resource name string.
   */
  adGroupAdAssetViewPath(customer:string,adGroupAdAssetView:string) {
    return this.pathTemplates.adGroupAdAssetViewPathTemplate.render({
      customer: customer,
      ad_group_ad_asset_view: adGroupAdAssetView,
    });
  }

  /**
   * Parse the customer from AdGroupAdAssetView resource.
   *
   * @param {string} adGroupAdAssetViewName
   *   A fully-qualified path representing AdGroupAdAssetView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdGroupAdAssetViewName(adGroupAdAssetViewName: string) {
    return this.pathTemplates.adGroupAdAssetViewPathTemplate.match(adGroupAdAssetViewName).customer;
  }

  /**
   * Parse the ad_group_ad_asset_view from AdGroupAdAssetView resource.
   *
   * @param {string} adGroupAdAssetViewName
   *   A fully-qualified path representing AdGroupAdAssetView resource.
   * @returns {string} A string representing the ad_group_ad_asset_view.
   */
  matchAdGroupAdAssetViewFromAdGroupAdAssetViewName(adGroupAdAssetViewName: string) {
    return this.pathTemplates.adGroupAdAssetViewPathTemplate.match(adGroupAdAssetViewName).ad_group_ad_asset_view;
  }

  /**
   * Return a fully-qualified adGroupAdLabel resource name string.
   *
   * @param {string} customer
   * @param {string} ad_group_ad_label
   * @returns {string} Resource name string.
   */
  adGroupAdLabelPath(customer:string,adGroupAdLabel:string) {
    return this.pathTemplates.adGroupAdLabelPathTemplate.render({
      customer: customer,
      ad_group_ad_label: adGroupAdLabel,
    });
  }

  /**
   * Parse the customer from AdGroupAdLabel resource.
   *
   * @param {string} adGroupAdLabelName
   *   A fully-qualified path representing AdGroupAdLabel resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdGroupAdLabelName(adGroupAdLabelName: string) {
    return this.pathTemplates.adGroupAdLabelPathTemplate.match(adGroupAdLabelName).customer;
  }

  /**
   * Parse the ad_group_ad_label from AdGroupAdLabel resource.
   *
   * @param {string} adGroupAdLabelName
   *   A fully-qualified path representing AdGroupAdLabel resource.
   * @returns {string} A string representing the ad_group_ad_label.
   */
  matchAdGroupAdLabelFromAdGroupAdLabelName(adGroupAdLabelName: string) {
    return this.pathTemplates.adGroupAdLabelPathTemplate.match(adGroupAdLabelName).ad_group_ad_label;
  }

  /**
   * Return a fully-qualified adGroupAudienceView resource name string.
   *
   * @param {string} customer
   * @param {string} ad_group_audience_view
   * @returns {string} Resource name string.
   */
  adGroupAudienceViewPath(customer:string,adGroupAudienceView:string) {
    return this.pathTemplates.adGroupAudienceViewPathTemplate.render({
      customer: customer,
      ad_group_audience_view: adGroupAudienceView,
    });
  }

  /**
   * Parse the customer from AdGroupAudienceView resource.
   *
   * @param {string} adGroupAudienceViewName
   *   A fully-qualified path representing AdGroupAudienceView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdGroupAudienceViewName(adGroupAudienceViewName: string) {
    return this.pathTemplates.adGroupAudienceViewPathTemplate.match(adGroupAudienceViewName).customer;
  }

  /**
   * Parse the ad_group_audience_view from AdGroupAudienceView resource.
   *
   * @param {string} adGroupAudienceViewName
   *   A fully-qualified path representing AdGroupAudienceView resource.
   * @returns {string} A string representing the ad_group_audience_view.
   */
  matchAdGroupAudienceViewFromAdGroupAudienceViewName(adGroupAudienceViewName: string) {
    return this.pathTemplates.adGroupAudienceViewPathTemplate.match(adGroupAudienceViewName).ad_group_audience_view;
  }

  /**
   * Return a fully-qualified adGroupBidModifier resource name string.
   *
   * @param {string} customer
   * @param {string} ad_group_bid_modifier
   * @returns {string} Resource name string.
   */
  adGroupBidModifierPath(customer:string,adGroupBidModifier:string) {
    return this.pathTemplates.adGroupBidModifierPathTemplate.render({
      customer: customer,
      ad_group_bid_modifier: adGroupBidModifier,
    });
  }

  /**
   * Parse the customer from AdGroupBidModifier resource.
   *
   * @param {string} adGroupBidModifierName
   *   A fully-qualified path representing AdGroupBidModifier resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdGroupBidModifierName(adGroupBidModifierName: string) {
    return this.pathTemplates.adGroupBidModifierPathTemplate.match(adGroupBidModifierName).customer;
  }

  /**
   * Parse the ad_group_bid_modifier from AdGroupBidModifier resource.
   *
   * @param {string} adGroupBidModifierName
   *   A fully-qualified path representing AdGroupBidModifier resource.
   * @returns {string} A string representing the ad_group_bid_modifier.
   */
  matchAdGroupBidModifierFromAdGroupBidModifierName(adGroupBidModifierName: string) {
    return this.pathTemplates.adGroupBidModifierPathTemplate.match(adGroupBidModifierName).ad_group_bid_modifier;
  }

  /**
   * Return a fully-qualified adGroupCriterion resource name string.
   *
   * @param {string} customer
   * @param {string} ad_group_criterion
   * @returns {string} Resource name string.
   */
  adGroupCriterionPath(customer:string,adGroupCriterion:string) {
    return this.pathTemplates.adGroupCriterionPathTemplate.render({
      customer: customer,
      ad_group_criterion: adGroupCriterion,
    });
  }

  /**
   * Parse the customer from AdGroupCriterion resource.
   *
   * @param {string} adGroupCriterionName
   *   A fully-qualified path representing AdGroupCriterion resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdGroupCriterionName(adGroupCriterionName: string) {
    return this.pathTemplates.adGroupCriterionPathTemplate.match(adGroupCriterionName).customer;
  }

  /**
   * Parse the ad_group_criterion from AdGroupCriterion resource.
   *
   * @param {string} adGroupCriterionName
   *   A fully-qualified path representing AdGroupCriterion resource.
   * @returns {string} A string representing the ad_group_criterion.
   */
  matchAdGroupCriterionFromAdGroupCriterionName(adGroupCriterionName: string) {
    return this.pathTemplates.adGroupCriterionPathTemplate.match(adGroupCriterionName).ad_group_criterion;
  }

  /**
   * Return a fully-qualified adGroupCriterionLabel resource name string.
   *
   * @param {string} customer
   * @param {string} ad_group_criterion_label
   * @returns {string} Resource name string.
   */
  adGroupCriterionLabelPath(customer:string,adGroupCriterionLabel:string) {
    return this.pathTemplates.adGroupCriterionLabelPathTemplate.render({
      customer: customer,
      ad_group_criterion_label: adGroupCriterionLabel,
    });
  }

  /**
   * Parse the customer from AdGroupCriterionLabel resource.
   *
   * @param {string} adGroupCriterionLabelName
   *   A fully-qualified path representing AdGroupCriterionLabel resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdGroupCriterionLabelName(adGroupCriterionLabelName: string) {
    return this.pathTemplates.adGroupCriterionLabelPathTemplate.match(adGroupCriterionLabelName).customer;
  }

  /**
   * Parse the ad_group_criterion_label from AdGroupCriterionLabel resource.
   *
   * @param {string} adGroupCriterionLabelName
   *   A fully-qualified path representing AdGroupCriterionLabel resource.
   * @returns {string} A string representing the ad_group_criterion_label.
   */
  matchAdGroupCriterionLabelFromAdGroupCriterionLabelName(adGroupCriterionLabelName: string) {
    return this.pathTemplates.adGroupCriterionLabelPathTemplate.match(adGroupCriterionLabelName).ad_group_criterion_label;
  }

  /**
   * Return a fully-qualified adGroupCriterionSimulation resource name string.
   *
   * @param {string} customer
   * @param {string} ad_group_criterion_simulation
   * @returns {string} Resource name string.
   */
  adGroupCriterionSimulationPath(customer:string,adGroupCriterionSimulation:string) {
    return this.pathTemplates.adGroupCriterionSimulationPathTemplate.render({
      customer: customer,
      ad_group_criterion_simulation: adGroupCriterionSimulation,
    });
  }

  /**
   * Parse the customer from AdGroupCriterionSimulation resource.
   *
   * @param {string} adGroupCriterionSimulationName
   *   A fully-qualified path representing AdGroupCriterionSimulation resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdGroupCriterionSimulationName(adGroupCriterionSimulationName: string) {
    return this.pathTemplates.adGroupCriterionSimulationPathTemplate.match(adGroupCriterionSimulationName).customer;
  }

  /**
   * Parse the ad_group_criterion_simulation from AdGroupCriterionSimulation resource.
   *
   * @param {string} adGroupCriterionSimulationName
   *   A fully-qualified path representing AdGroupCriterionSimulation resource.
   * @returns {string} A string representing the ad_group_criterion_simulation.
   */
  matchAdGroupCriterionSimulationFromAdGroupCriterionSimulationName(adGroupCriterionSimulationName: string) {
    return this.pathTemplates.adGroupCriterionSimulationPathTemplate.match(adGroupCriterionSimulationName).ad_group_criterion_simulation;
  }

  /**
   * Return a fully-qualified adGroupExtensionSetting resource name string.
   *
   * @param {string} customer
   * @param {string} ad_group_extension_setting
   * @returns {string} Resource name string.
   */
  adGroupExtensionSettingPath(customer:string,adGroupExtensionSetting:string) {
    return this.pathTemplates.adGroupExtensionSettingPathTemplate.render({
      customer: customer,
      ad_group_extension_setting: adGroupExtensionSetting,
    });
  }

  /**
   * Parse the customer from AdGroupExtensionSetting resource.
   *
   * @param {string} adGroupExtensionSettingName
   *   A fully-qualified path representing AdGroupExtensionSetting resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdGroupExtensionSettingName(adGroupExtensionSettingName: string) {
    return this.pathTemplates.adGroupExtensionSettingPathTemplate.match(adGroupExtensionSettingName).customer;
  }

  /**
   * Parse the ad_group_extension_setting from AdGroupExtensionSetting resource.
   *
   * @param {string} adGroupExtensionSettingName
   *   A fully-qualified path representing AdGroupExtensionSetting resource.
   * @returns {string} A string representing the ad_group_extension_setting.
   */
  matchAdGroupExtensionSettingFromAdGroupExtensionSettingName(adGroupExtensionSettingName: string) {
    return this.pathTemplates.adGroupExtensionSettingPathTemplate.match(adGroupExtensionSettingName).ad_group_extension_setting;
  }

  /**
   * Return a fully-qualified adGroupFeed resource name string.
   *
   * @param {string} customer
   * @param {string} ad_group_feed
   * @returns {string} Resource name string.
   */
  adGroupFeedPath(customer:string,adGroupFeed:string) {
    return this.pathTemplates.adGroupFeedPathTemplate.render({
      customer: customer,
      ad_group_feed: adGroupFeed,
    });
  }

  /**
   * Parse the customer from AdGroupFeed resource.
   *
   * @param {string} adGroupFeedName
   *   A fully-qualified path representing AdGroupFeed resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdGroupFeedName(adGroupFeedName: string) {
    return this.pathTemplates.adGroupFeedPathTemplate.match(adGroupFeedName).customer;
  }

  /**
   * Parse the ad_group_feed from AdGroupFeed resource.
   *
   * @param {string} adGroupFeedName
   *   A fully-qualified path representing AdGroupFeed resource.
   * @returns {string} A string representing the ad_group_feed.
   */
  matchAdGroupFeedFromAdGroupFeedName(adGroupFeedName: string) {
    return this.pathTemplates.adGroupFeedPathTemplate.match(adGroupFeedName).ad_group_feed;
  }

  /**
   * Return a fully-qualified adGroupLabel resource name string.
   *
   * @param {string} customer
   * @param {string} ad_group_label
   * @returns {string} Resource name string.
   */
  adGroupLabelPath(customer:string,adGroupLabel:string) {
    return this.pathTemplates.adGroupLabelPathTemplate.render({
      customer: customer,
      ad_group_label: adGroupLabel,
    });
  }

  /**
   * Parse the customer from AdGroupLabel resource.
   *
   * @param {string} adGroupLabelName
   *   A fully-qualified path representing AdGroupLabel resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdGroupLabelName(adGroupLabelName: string) {
    return this.pathTemplates.adGroupLabelPathTemplate.match(adGroupLabelName).customer;
  }

  /**
   * Parse the ad_group_label from AdGroupLabel resource.
   *
   * @param {string} adGroupLabelName
   *   A fully-qualified path representing AdGroupLabel resource.
   * @returns {string} A string representing the ad_group_label.
   */
  matchAdGroupLabelFromAdGroupLabelName(adGroupLabelName: string) {
    return this.pathTemplates.adGroupLabelPathTemplate.match(adGroupLabelName).ad_group_label;
  }

  /**
   * Return a fully-qualified adGroupSimulation resource name string.
   *
   * @param {string} customer
   * @param {string} ad_group_simulation
   * @returns {string} Resource name string.
   */
  adGroupSimulationPath(customer:string,adGroupSimulation:string) {
    return this.pathTemplates.adGroupSimulationPathTemplate.render({
      customer: customer,
      ad_group_simulation: adGroupSimulation,
    });
  }

  /**
   * Parse the customer from AdGroupSimulation resource.
   *
   * @param {string} adGroupSimulationName
   *   A fully-qualified path representing AdGroupSimulation resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdGroupSimulationName(adGroupSimulationName: string) {
    return this.pathTemplates.adGroupSimulationPathTemplate.match(adGroupSimulationName).customer;
  }

  /**
   * Parse the ad_group_simulation from AdGroupSimulation resource.
   *
   * @param {string} adGroupSimulationName
   *   A fully-qualified path representing AdGroupSimulation resource.
   * @returns {string} A string representing the ad_group_simulation.
   */
  matchAdGroupSimulationFromAdGroupSimulationName(adGroupSimulationName: string) {
    return this.pathTemplates.adGroupSimulationPathTemplate.match(adGroupSimulationName).ad_group_simulation;
  }

  /**
   * Return a fully-qualified adParameter resource name string.
   *
   * @param {string} customer
   * @param {string} ad_parameter
   * @returns {string} Resource name string.
   */
  adParameterPath(customer:string,adParameter:string) {
    return this.pathTemplates.adParameterPathTemplate.render({
      customer: customer,
      ad_parameter: adParameter,
    });
  }

  /**
   * Parse the customer from AdParameter resource.
   *
   * @param {string} adParameterName
   *   A fully-qualified path representing AdParameter resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdParameterName(adParameterName: string) {
    return this.pathTemplates.adParameterPathTemplate.match(adParameterName).customer;
  }

  /**
   * Parse the ad_parameter from AdParameter resource.
   *
   * @param {string} adParameterName
   *   A fully-qualified path representing AdParameter resource.
   * @returns {string} A string representing the ad_parameter.
   */
  matchAdParameterFromAdParameterName(adParameterName: string) {
    return this.pathTemplates.adParameterPathTemplate.match(adParameterName).ad_parameter;
  }

  /**
   * Return a fully-qualified adScheduleView resource name string.
   *
   * @param {string} customer
   * @param {string} ad_schedule_view
   * @returns {string} Resource name string.
   */
  adScheduleViewPath(customer:string,adScheduleView:string) {
    return this.pathTemplates.adScheduleViewPathTemplate.render({
      customer: customer,
      ad_schedule_view: adScheduleView,
    });
  }

  /**
   * Parse the customer from AdScheduleView resource.
   *
   * @param {string} adScheduleViewName
   *   A fully-qualified path representing AdScheduleView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAdScheduleViewName(adScheduleViewName: string) {
    return this.pathTemplates.adScheduleViewPathTemplate.match(adScheduleViewName).customer;
  }

  /**
   * Parse the ad_schedule_view from AdScheduleView resource.
   *
   * @param {string} adScheduleViewName
   *   A fully-qualified path representing AdScheduleView resource.
   * @returns {string} A string representing the ad_schedule_view.
   */
  matchAdScheduleViewFromAdScheduleViewName(adScheduleViewName: string) {
    return this.pathTemplates.adScheduleViewPathTemplate.match(adScheduleViewName).ad_schedule_view;
  }

  /**
   * Return a fully-qualified ageRangeView resource name string.
   *
   * @param {string} customer
   * @param {string} age_range_view
   * @returns {string} Resource name string.
   */
  ageRangeViewPath(customer:string,ageRangeView:string) {
    return this.pathTemplates.ageRangeViewPathTemplate.render({
      customer: customer,
      age_range_view: ageRangeView,
    });
  }

  /**
   * Parse the customer from AgeRangeView resource.
   *
   * @param {string} ageRangeViewName
   *   A fully-qualified path representing AgeRangeView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAgeRangeViewName(ageRangeViewName: string) {
    return this.pathTemplates.ageRangeViewPathTemplate.match(ageRangeViewName).customer;
  }

  /**
   * Parse the age_range_view from AgeRangeView resource.
   *
   * @param {string} ageRangeViewName
   *   A fully-qualified path representing AgeRangeView resource.
   * @returns {string} A string representing the age_range_view.
   */
  matchAgeRangeViewFromAgeRangeViewName(ageRangeViewName: string) {
    return this.pathTemplates.ageRangeViewPathTemplate.match(ageRangeViewName).age_range_view;
  }

  /**
   * Return a fully-qualified asset resource name string.
   *
   * @param {string} customer
   * @param {string} asset
   * @returns {string} Resource name string.
   */
  assetPath(customer:string,asset:string) {
    return this.pathTemplates.assetPathTemplate.render({
      customer: customer,
      asset: asset,
    });
  }

  /**
   * Parse the customer from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).customer;
  }

  /**
   * Parse the asset from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).asset;
  }

  /**
   * Return a fully-qualified biddingStrategy resource name string.
   *
   * @param {string} customer
   * @param {string} bidding_strategy
   * @returns {string} Resource name string.
   */
  biddingStrategyPath(customer:string,biddingStrategy:string) {
    return this.pathTemplates.biddingStrategyPathTemplate.render({
      customer: customer,
      bidding_strategy: biddingStrategy,
    });
  }

  /**
   * Parse the customer from BiddingStrategy resource.
   *
   * @param {string} biddingStrategyName
   *   A fully-qualified path representing BiddingStrategy resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromBiddingStrategyName(biddingStrategyName: string) {
    return this.pathTemplates.biddingStrategyPathTemplate.match(biddingStrategyName).customer;
  }

  /**
   * Parse the bidding_strategy from BiddingStrategy resource.
   *
   * @param {string} biddingStrategyName
   *   A fully-qualified path representing BiddingStrategy resource.
   * @returns {string} A string representing the bidding_strategy.
   */
  matchBiddingStrategyFromBiddingStrategyName(biddingStrategyName: string) {
    return this.pathTemplates.biddingStrategyPathTemplate.match(biddingStrategyName).bidding_strategy;
  }

  /**
   * Return a fully-qualified billingSetup resource name string.
   *
   * @param {string} customer
   * @param {string} billing_setup
   * @returns {string} Resource name string.
   */
  billingSetupPath(customer:string,billingSetup:string) {
    return this.pathTemplates.billingSetupPathTemplate.render({
      customer: customer,
      billing_setup: billingSetup,
    });
  }

  /**
   * Parse the customer from BillingSetup resource.
   *
   * @param {string} billingSetupName
   *   A fully-qualified path representing BillingSetup resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromBillingSetupName(billingSetupName: string) {
    return this.pathTemplates.billingSetupPathTemplate.match(billingSetupName).customer;
  }

  /**
   * Parse the billing_setup from BillingSetup resource.
   *
   * @param {string} billingSetupName
   *   A fully-qualified path representing BillingSetup resource.
   * @returns {string} A string representing the billing_setup.
   */
  matchBillingSetupFromBillingSetupName(billingSetupName: string) {
    return this.pathTemplates.billingSetupPathTemplate.match(billingSetupName).billing_setup;
  }

  /**
   * Return a fully-qualified campaign resource name string.
   *
   * @param {string} customer
   * @param {string} campaign
   * @returns {string} Resource name string.
   */
  campaignPath(customer:string,campaign:string) {
    return this.pathTemplates.campaignPathTemplate.render({
      customer: customer,
      campaign: campaign,
    });
  }

  /**
   * Parse the customer from Campaign resource.
   *
   * @param {string} campaignName
   *   A fully-qualified path representing Campaign resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCampaignName(campaignName: string) {
    return this.pathTemplates.campaignPathTemplate.match(campaignName).customer;
  }

  /**
   * Parse the campaign from Campaign resource.
   *
   * @param {string} campaignName
   *   A fully-qualified path representing Campaign resource.
   * @returns {string} A string representing the campaign.
   */
  matchCampaignFromCampaignName(campaignName: string) {
    return this.pathTemplates.campaignPathTemplate.match(campaignName).campaign;
  }

  /**
   * Return a fully-qualified campaignAudienceView resource name string.
   *
   * @param {string} customer
   * @param {string} campaign_audience_view
   * @returns {string} Resource name string.
   */
  campaignAudienceViewPath(customer:string,campaignAudienceView:string) {
    return this.pathTemplates.campaignAudienceViewPathTemplate.render({
      customer: customer,
      campaign_audience_view: campaignAudienceView,
    });
  }

  /**
   * Parse the customer from CampaignAudienceView resource.
   *
   * @param {string} campaignAudienceViewName
   *   A fully-qualified path representing CampaignAudienceView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCampaignAudienceViewName(campaignAudienceViewName: string) {
    return this.pathTemplates.campaignAudienceViewPathTemplate.match(campaignAudienceViewName).customer;
  }

  /**
   * Parse the campaign_audience_view from CampaignAudienceView resource.
   *
   * @param {string} campaignAudienceViewName
   *   A fully-qualified path representing CampaignAudienceView resource.
   * @returns {string} A string representing the campaign_audience_view.
   */
  matchCampaignAudienceViewFromCampaignAudienceViewName(campaignAudienceViewName: string) {
    return this.pathTemplates.campaignAudienceViewPathTemplate.match(campaignAudienceViewName).campaign_audience_view;
  }

  /**
   * Return a fully-qualified campaignBidModifier resource name string.
   *
   * @param {string} customer
   * @param {string} campaign_bid_modifier
   * @returns {string} Resource name string.
   */
  campaignBidModifierPath(customer:string,campaignBidModifier:string) {
    return this.pathTemplates.campaignBidModifierPathTemplate.render({
      customer: customer,
      campaign_bid_modifier: campaignBidModifier,
    });
  }

  /**
   * Parse the customer from CampaignBidModifier resource.
   *
   * @param {string} campaignBidModifierName
   *   A fully-qualified path representing CampaignBidModifier resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCampaignBidModifierName(campaignBidModifierName: string) {
    return this.pathTemplates.campaignBidModifierPathTemplate.match(campaignBidModifierName).customer;
  }

  /**
   * Parse the campaign_bid_modifier from CampaignBidModifier resource.
   *
   * @param {string} campaignBidModifierName
   *   A fully-qualified path representing CampaignBidModifier resource.
   * @returns {string} A string representing the campaign_bid_modifier.
   */
  matchCampaignBidModifierFromCampaignBidModifierName(campaignBidModifierName: string) {
    return this.pathTemplates.campaignBidModifierPathTemplate.match(campaignBidModifierName).campaign_bid_modifier;
  }

  /**
   * Return a fully-qualified campaignBudget resource name string.
   *
   * @param {string} customer
   * @param {string} campaign_budget
   * @returns {string} Resource name string.
   */
  campaignBudgetPath(customer:string,campaignBudget:string) {
    return this.pathTemplates.campaignBudgetPathTemplate.render({
      customer: customer,
      campaign_budget: campaignBudget,
    });
  }

  /**
   * Parse the customer from CampaignBudget resource.
   *
   * @param {string} campaignBudgetName
   *   A fully-qualified path representing CampaignBudget resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCampaignBudgetName(campaignBudgetName: string) {
    return this.pathTemplates.campaignBudgetPathTemplate.match(campaignBudgetName).customer;
  }

  /**
   * Parse the campaign_budget from CampaignBudget resource.
   *
   * @param {string} campaignBudgetName
   *   A fully-qualified path representing CampaignBudget resource.
   * @returns {string} A string representing the campaign_budget.
   */
  matchCampaignBudgetFromCampaignBudgetName(campaignBudgetName: string) {
    return this.pathTemplates.campaignBudgetPathTemplate.match(campaignBudgetName).campaign_budget;
  }

  /**
   * Return a fully-qualified campaignCriterion resource name string.
   *
   * @param {string} customer
   * @param {string} campaign_criterion
   * @returns {string} Resource name string.
   */
  campaignCriterionPath(customer:string,campaignCriterion:string) {
    return this.pathTemplates.campaignCriterionPathTemplate.render({
      customer: customer,
      campaign_criterion: campaignCriterion,
    });
  }

  /**
   * Parse the customer from CampaignCriterion resource.
   *
   * @param {string} campaignCriterionName
   *   A fully-qualified path representing CampaignCriterion resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCampaignCriterionName(campaignCriterionName: string) {
    return this.pathTemplates.campaignCriterionPathTemplate.match(campaignCriterionName).customer;
  }

  /**
   * Parse the campaign_criterion from CampaignCriterion resource.
   *
   * @param {string} campaignCriterionName
   *   A fully-qualified path representing CampaignCriterion resource.
   * @returns {string} A string representing the campaign_criterion.
   */
  matchCampaignCriterionFromCampaignCriterionName(campaignCriterionName: string) {
    return this.pathTemplates.campaignCriterionPathTemplate.match(campaignCriterionName).campaign_criterion;
  }

  /**
   * Return a fully-qualified campaignCriterionSimulation resource name string.
   *
   * @param {string} customer
   * @param {string} campaign_criterion_simulation
   * @returns {string} Resource name string.
   */
  campaignCriterionSimulationPath(customer:string,campaignCriterionSimulation:string) {
    return this.pathTemplates.campaignCriterionSimulationPathTemplate.render({
      customer: customer,
      campaign_criterion_simulation: campaignCriterionSimulation,
    });
  }

  /**
   * Parse the customer from CampaignCriterionSimulation resource.
   *
   * @param {string} campaignCriterionSimulationName
   *   A fully-qualified path representing CampaignCriterionSimulation resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCampaignCriterionSimulationName(campaignCriterionSimulationName: string) {
    return this.pathTemplates.campaignCriterionSimulationPathTemplate.match(campaignCriterionSimulationName).customer;
  }

  /**
   * Parse the campaign_criterion_simulation from CampaignCriterionSimulation resource.
   *
   * @param {string} campaignCriterionSimulationName
   *   A fully-qualified path representing CampaignCriterionSimulation resource.
   * @returns {string} A string representing the campaign_criterion_simulation.
   */
  matchCampaignCriterionSimulationFromCampaignCriterionSimulationName(campaignCriterionSimulationName: string) {
    return this.pathTemplates.campaignCriterionSimulationPathTemplate.match(campaignCriterionSimulationName).campaign_criterion_simulation;
  }

  /**
   * Return a fully-qualified campaignDraft resource name string.
   *
   * @param {string} customer
   * @param {string} campaign_draft
   * @returns {string} Resource name string.
   */
  campaignDraftPath(customer:string,campaignDraft:string) {
    return this.pathTemplates.campaignDraftPathTemplate.render({
      customer: customer,
      campaign_draft: campaignDraft,
    });
  }

  /**
   * Parse the customer from CampaignDraft resource.
   *
   * @param {string} campaignDraftName
   *   A fully-qualified path representing CampaignDraft resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCampaignDraftName(campaignDraftName: string) {
    return this.pathTemplates.campaignDraftPathTemplate.match(campaignDraftName).customer;
  }

  /**
   * Parse the campaign_draft from CampaignDraft resource.
   *
   * @param {string} campaignDraftName
   *   A fully-qualified path representing CampaignDraft resource.
   * @returns {string} A string representing the campaign_draft.
   */
  matchCampaignDraftFromCampaignDraftName(campaignDraftName: string) {
    return this.pathTemplates.campaignDraftPathTemplate.match(campaignDraftName).campaign_draft;
  }

  /**
   * Return a fully-qualified campaignExperiment resource name string.
   *
   * @param {string} customer
   * @param {string} campaign_experiment
   * @returns {string} Resource name string.
   */
  campaignExperimentPath(customer:string,campaignExperiment:string) {
    return this.pathTemplates.campaignExperimentPathTemplate.render({
      customer: customer,
      campaign_experiment: campaignExperiment,
    });
  }

  /**
   * Parse the customer from CampaignExperiment resource.
   *
   * @param {string} campaignExperimentName
   *   A fully-qualified path representing CampaignExperiment resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCampaignExperimentName(campaignExperimentName: string) {
    return this.pathTemplates.campaignExperimentPathTemplate.match(campaignExperimentName).customer;
  }

  /**
   * Parse the campaign_experiment from CampaignExperiment resource.
   *
   * @param {string} campaignExperimentName
   *   A fully-qualified path representing CampaignExperiment resource.
   * @returns {string} A string representing the campaign_experiment.
   */
  matchCampaignExperimentFromCampaignExperimentName(campaignExperimentName: string) {
    return this.pathTemplates.campaignExperimentPathTemplate.match(campaignExperimentName).campaign_experiment;
  }

  /**
   * Return a fully-qualified campaignExtensionSetting resource name string.
   *
   * @param {string} customer
   * @param {string} campaign_extension_setting
   * @returns {string} Resource name string.
   */
  campaignExtensionSettingPath(customer:string,campaignExtensionSetting:string) {
    return this.pathTemplates.campaignExtensionSettingPathTemplate.render({
      customer: customer,
      campaign_extension_setting: campaignExtensionSetting,
    });
  }

  /**
   * Parse the customer from CampaignExtensionSetting resource.
   *
   * @param {string} campaignExtensionSettingName
   *   A fully-qualified path representing CampaignExtensionSetting resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCampaignExtensionSettingName(campaignExtensionSettingName: string) {
    return this.pathTemplates.campaignExtensionSettingPathTemplate.match(campaignExtensionSettingName).customer;
  }

  /**
   * Parse the campaign_extension_setting from CampaignExtensionSetting resource.
   *
   * @param {string} campaignExtensionSettingName
   *   A fully-qualified path representing CampaignExtensionSetting resource.
   * @returns {string} A string representing the campaign_extension_setting.
   */
  matchCampaignExtensionSettingFromCampaignExtensionSettingName(campaignExtensionSettingName: string) {
    return this.pathTemplates.campaignExtensionSettingPathTemplate.match(campaignExtensionSettingName).campaign_extension_setting;
  }

  /**
   * Return a fully-qualified campaignFeed resource name string.
   *
   * @param {string} customer
   * @param {string} campaign_feed
   * @returns {string} Resource name string.
   */
  campaignFeedPath(customer:string,campaignFeed:string) {
    return this.pathTemplates.campaignFeedPathTemplate.render({
      customer: customer,
      campaign_feed: campaignFeed,
    });
  }

  /**
   * Parse the customer from CampaignFeed resource.
   *
   * @param {string} campaignFeedName
   *   A fully-qualified path representing CampaignFeed resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCampaignFeedName(campaignFeedName: string) {
    return this.pathTemplates.campaignFeedPathTemplate.match(campaignFeedName).customer;
  }

  /**
   * Parse the campaign_feed from CampaignFeed resource.
   *
   * @param {string} campaignFeedName
   *   A fully-qualified path representing CampaignFeed resource.
   * @returns {string} A string representing the campaign_feed.
   */
  matchCampaignFeedFromCampaignFeedName(campaignFeedName: string) {
    return this.pathTemplates.campaignFeedPathTemplate.match(campaignFeedName).campaign_feed;
  }

  /**
   * Return a fully-qualified campaignLabel resource name string.
   *
   * @param {string} customer
   * @param {string} campaign_label
   * @returns {string} Resource name string.
   */
  campaignLabelPath(customer:string,campaignLabel:string) {
    return this.pathTemplates.campaignLabelPathTemplate.render({
      customer: customer,
      campaign_label: campaignLabel,
    });
  }

  /**
   * Parse the customer from CampaignLabel resource.
   *
   * @param {string} campaignLabelName
   *   A fully-qualified path representing CampaignLabel resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCampaignLabelName(campaignLabelName: string) {
    return this.pathTemplates.campaignLabelPathTemplate.match(campaignLabelName).customer;
  }

  /**
   * Parse the campaign_label from CampaignLabel resource.
   *
   * @param {string} campaignLabelName
   *   A fully-qualified path representing CampaignLabel resource.
   * @returns {string} A string representing the campaign_label.
   */
  matchCampaignLabelFromCampaignLabelName(campaignLabelName: string) {
    return this.pathTemplates.campaignLabelPathTemplate.match(campaignLabelName).campaign_label;
  }

  /**
   * Return a fully-qualified campaignSharedSet resource name string.
   *
   * @param {string} customer
   * @param {string} campaign_shared_set
   * @returns {string} Resource name string.
   */
  campaignSharedSetPath(customer:string,campaignSharedSet:string) {
    return this.pathTemplates.campaignSharedSetPathTemplate.render({
      customer: customer,
      campaign_shared_set: campaignSharedSet,
    });
  }

  /**
   * Parse the customer from CampaignSharedSet resource.
   *
   * @param {string} campaignSharedSetName
   *   A fully-qualified path representing CampaignSharedSet resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCampaignSharedSetName(campaignSharedSetName: string) {
    return this.pathTemplates.campaignSharedSetPathTemplate.match(campaignSharedSetName).customer;
  }

  /**
   * Parse the campaign_shared_set from CampaignSharedSet resource.
   *
   * @param {string} campaignSharedSetName
   *   A fully-qualified path representing CampaignSharedSet resource.
   * @returns {string} A string representing the campaign_shared_set.
   */
  matchCampaignSharedSetFromCampaignSharedSetName(campaignSharedSetName: string) {
    return this.pathTemplates.campaignSharedSetPathTemplate.match(campaignSharedSetName).campaign_shared_set;
  }

  /**
   * Return a fully-qualified carrierConstant resource name string.
   *
   * @param {string} carrier_constant
   * @returns {string} Resource name string.
   */
  carrierConstantPath(carrierConstant:string) {
    return this.pathTemplates.carrierConstantPathTemplate.render({
      carrier_constant: carrierConstant,
    });
  }

  /**
   * Parse the carrier_constant from CarrierConstant resource.
   *
   * @param {string} carrierConstantName
   *   A fully-qualified path representing CarrierConstant resource.
   * @returns {string} A string representing the carrier_constant.
   */
  matchCarrierConstantFromCarrierConstantName(carrierConstantName: string) {
    return this.pathTemplates.carrierConstantPathTemplate.match(carrierConstantName).carrier_constant;
  }

  /**
   * Return a fully-qualified changeStatus resource name string.
   *
   * @param {string} customer
   * @param {string} change_status
   * @returns {string} Resource name string.
   */
  changeStatusPath(customer:string,changeStatus:string) {
    return this.pathTemplates.changeStatusPathTemplate.render({
      customer: customer,
      change_status: changeStatus,
    });
  }

  /**
   * Parse the customer from ChangeStatus resource.
   *
   * @param {string} changeStatusName
   *   A fully-qualified path representing ChangeStatus resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromChangeStatusName(changeStatusName: string) {
    return this.pathTemplates.changeStatusPathTemplate.match(changeStatusName).customer;
  }

  /**
   * Parse the change_status from ChangeStatus resource.
   *
   * @param {string} changeStatusName
   *   A fully-qualified path representing ChangeStatus resource.
   * @returns {string} A string representing the change_status.
   */
  matchChangeStatusFromChangeStatusName(changeStatusName: string) {
    return this.pathTemplates.changeStatusPathTemplate.match(changeStatusName).change_status;
  }

  /**
   * Return a fully-qualified clickView resource name string.
   *
   * @param {string} customer
   * @param {string} click_view
   * @returns {string} Resource name string.
   */
  clickViewPath(customer:string,clickView:string) {
    return this.pathTemplates.clickViewPathTemplate.render({
      customer: customer,
      click_view: clickView,
    });
  }

  /**
   * Parse the customer from ClickView resource.
   *
   * @param {string} clickViewName
   *   A fully-qualified path representing ClickView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromClickViewName(clickViewName: string) {
    return this.pathTemplates.clickViewPathTemplate.match(clickViewName).customer;
  }

  /**
   * Parse the click_view from ClickView resource.
   *
   * @param {string} clickViewName
   *   A fully-qualified path representing ClickView resource.
   * @returns {string} A string representing the click_view.
   */
  matchClickViewFromClickViewName(clickViewName: string) {
    return this.pathTemplates.clickViewPathTemplate.match(clickViewName).click_view;
  }

  /**
   * Return a fully-qualified conversionAction resource name string.
   *
   * @param {string} customer
   * @param {string} conversion_action
   * @returns {string} Resource name string.
   */
  conversionActionPath(customer:string,conversionAction:string) {
    return this.pathTemplates.conversionActionPathTemplate.render({
      customer: customer,
      conversion_action: conversionAction,
    });
  }

  /**
   * Parse the customer from ConversionAction resource.
   *
   * @param {string} conversionActionName
   *   A fully-qualified path representing ConversionAction resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromConversionActionName(conversionActionName: string) {
    return this.pathTemplates.conversionActionPathTemplate.match(conversionActionName).customer;
  }

  /**
   * Parse the conversion_action from ConversionAction resource.
   *
   * @param {string} conversionActionName
   *   A fully-qualified path representing ConversionAction resource.
   * @returns {string} A string representing the conversion_action.
   */
  matchConversionActionFromConversionActionName(conversionActionName: string) {
    return this.pathTemplates.conversionActionPathTemplate.match(conversionActionName).conversion_action;
  }

  /**
   * Return a fully-qualified currencyConstant resource name string.
   *
   * @param {string} currency_constant
   * @returns {string} Resource name string.
   */
  currencyConstantPath(currencyConstant:string) {
    return this.pathTemplates.currencyConstantPathTemplate.render({
      currency_constant: currencyConstant,
    });
  }

  /**
   * Parse the currency_constant from CurrencyConstant resource.
   *
   * @param {string} currencyConstantName
   *   A fully-qualified path representing CurrencyConstant resource.
   * @returns {string} A string representing the currency_constant.
   */
  matchCurrencyConstantFromCurrencyConstantName(currencyConstantName: string) {
    return this.pathTemplates.currencyConstantPathTemplate.match(currencyConstantName).currency_constant;
  }

  /**
   * Return a fully-qualified customInterest resource name string.
   *
   * @param {string} customer
   * @param {string} custom_interest
   * @returns {string} Resource name string.
   */
  customInterestPath(customer:string,customInterest:string) {
    return this.pathTemplates.customInterestPathTemplate.render({
      customer: customer,
      custom_interest: customInterest,
    });
  }

  /**
   * Parse the customer from CustomInterest resource.
   *
   * @param {string} customInterestName
   *   A fully-qualified path representing CustomInterest resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCustomInterestName(customInterestName: string) {
    return this.pathTemplates.customInterestPathTemplate.match(customInterestName).customer;
  }

  /**
   * Parse the custom_interest from CustomInterest resource.
   *
   * @param {string} customInterestName
   *   A fully-qualified path representing CustomInterest resource.
   * @returns {string} A string representing the custom_interest.
   */
  matchCustomInterestFromCustomInterestName(customInterestName: string) {
    return this.pathTemplates.customInterestPathTemplate.match(customInterestName).custom_interest;
  }

  /**
   * Return a fully-qualified customer resource name string.
   *
   * @param {string} customer
   * @returns {string} Resource name string.
   */
  customerPath(customer:string) {
    return this.pathTemplates.customerPathTemplate.render({
      customer: customer,
    });
  }

  /**
   * Parse the customer from Customer resource.
   *
   * @param {string} customerName
   *   A fully-qualified path representing Customer resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCustomerName(customerName: string) {
    return this.pathTemplates.customerPathTemplate.match(customerName).customer;
  }

  /**
   * Return a fully-qualified customerClient resource name string.
   *
   * @param {string} customer
   * @param {string} customer_client
   * @returns {string} Resource name string.
   */
  customerClientPath(customer:string,customerClient:string) {
    return this.pathTemplates.customerClientPathTemplate.render({
      customer: customer,
      customer_client: customerClient,
    });
  }

  /**
   * Parse the customer from CustomerClient resource.
   *
   * @param {string} customerClientName
   *   A fully-qualified path representing CustomerClient resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCustomerClientName(customerClientName: string) {
    return this.pathTemplates.customerClientPathTemplate.match(customerClientName).customer;
  }

  /**
   * Parse the customer_client from CustomerClient resource.
   *
   * @param {string} customerClientName
   *   A fully-qualified path representing CustomerClient resource.
   * @returns {string} A string representing the customer_client.
   */
  matchCustomerClientFromCustomerClientName(customerClientName: string) {
    return this.pathTemplates.customerClientPathTemplate.match(customerClientName).customer_client;
  }

  /**
   * Return a fully-qualified customerClientLink resource name string.
   *
   * @param {string} customer
   * @param {string} customer_client_link
   * @returns {string} Resource name string.
   */
  customerClientLinkPath(customer:string,customerClientLink:string) {
    return this.pathTemplates.customerClientLinkPathTemplate.render({
      customer: customer,
      customer_client_link: customerClientLink,
    });
  }

  /**
   * Parse the customer from CustomerClientLink resource.
   *
   * @param {string} customerClientLinkName
   *   A fully-qualified path representing CustomerClientLink resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCustomerClientLinkName(customerClientLinkName: string) {
    return this.pathTemplates.customerClientLinkPathTemplate.match(customerClientLinkName).customer;
  }

  /**
   * Parse the customer_client_link from CustomerClientLink resource.
   *
   * @param {string} customerClientLinkName
   *   A fully-qualified path representing CustomerClientLink resource.
   * @returns {string} A string representing the customer_client_link.
   */
  matchCustomerClientLinkFromCustomerClientLinkName(customerClientLinkName: string) {
    return this.pathTemplates.customerClientLinkPathTemplate.match(customerClientLinkName).customer_client_link;
  }

  /**
   * Return a fully-qualified customerExtensionSetting resource name string.
   *
   * @param {string} customer
   * @param {string} customer_extension_setting
   * @returns {string} Resource name string.
   */
  customerExtensionSettingPath(customer:string,customerExtensionSetting:string) {
    return this.pathTemplates.customerExtensionSettingPathTemplate.render({
      customer: customer,
      customer_extension_setting: customerExtensionSetting,
    });
  }

  /**
   * Parse the customer from CustomerExtensionSetting resource.
   *
   * @param {string} customerExtensionSettingName
   *   A fully-qualified path representing CustomerExtensionSetting resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCustomerExtensionSettingName(customerExtensionSettingName: string) {
    return this.pathTemplates.customerExtensionSettingPathTemplate.match(customerExtensionSettingName).customer;
  }

  /**
   * Parse the customer_extension_setting from CustomerExtensionSetting resource.
   *
   * @param {string} customerExtensionSettingName
   *   A fully-qualified path representing CustomerExtensionSetting resource.
   * @returns {string} A string representing the customer_extension_setting.
   */
  matchCustomerExtensionSettingFromCustomerExtensionSettingName(customerExtensionSettingName: string) {
    return this.pathTemplates.customerExtensionSettingPathTemplate.match(customerExtensionSettingName).customer_extension_setting;
  }

  /**
   * Return a fully-qualified customerFeed resource name string.
   *
   * @param {string} customer
   * @param {string} customer_feed
   * @returns {string} Resource name string.
   */
  customerFeedPath(customer:string,customerFeed:string) {
    return this.pathTemplates.customerFeedPathTemplate.render({
      customer: customer,
      customer_feed: customerFeed,
    });
  }

  /**
   * Parse the customer from CustomerFeed resource.
   *
   * @param {string} customerFeedName
   *   A fully-qualified path representing CustomerFeed resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCustomerFeedName(customerFeedName: string) {
    return this.pathTemplates.customerFeedPathTemplate.match(customerFeedName).customer;
  }

  /**
   * Parse the customer_feed from CustomerFeed resource.
   *
   * @param {string} customerFeedName
   *   A fully-qualified path representing CustomerFeed resource.
   * @returns {string} A string representing the customer_feed.
   */
  matchCustomerFeedFromCustomerFeedName(customerFeedName: string) {
    return this.pathTemplates.customerFeedPathTemplate.match(customerFeedName).customer_feed;
  }

  /**
   * Return a fully-qualified customerLabel resource name string.
   *
   * @param {string} customer
   * @param {string} customer_label
   * @returns {string} Resource name string.
   */
  customerLabelPath(customer:string,customerLabel:string) {
    return this.pathTemplates.customerLabelPathTemplate.render({
      customer: customer,
      customer_label: customerLabel,
    });
  }

  /**
   * Parse the customer from CustomerLabel resource.
   *
   * @param {string} customerLabelName
   *   A fully-qualified path representing CustomerLabel resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCustomerLabelName(customerLabelName: string) {
    return this.pathTemplates.customerLabelPathTemplate.match(customerLabelName).customer;
  }

  /**
   * Parse the customer_label from CustomerLabel resource.
   *
   * @param {string} customerLabelName
   *   A fully-qualified path representing CustomerLabel resource.
   * @returns {string} A string representing the customer_label.
   */
  matchCustomerLabelFromCustomerLabelName(customerLabelName: string) {
    return this.pathTemplates.customerLabelPathTemplate.match(customerLabelName).customer_label;
  }

  /**
   * Return a fully-qualified customerManagerLink resource name string.
   *
   * @param {string} customer
   * @param {string} customer_manager_link
   * @returns {string} Resource name string.
   */
  customerManagerLinkPath(customer:string,customerManagerLink:string) {
    return this.pathTemplates.customerManagerLinkPathTemplate.render({
      customer: customer,
      customer_manager_link: customerManagerLink,
    });
  }

  /**
   * Parse the customer from CustomerManagerLink resource.
   *
   * @param {string} customerManagerLinkName
   *   A fully-qualified path representing CustomerManagerLink resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCustomerManagerLinkName(customerManagerLinkName: string) {
    return this.pathTemplates.customerManagerLinkPathTemplate.match(customerManagerLinkName).customer;
  }

  /**
   * Parse the customer_manager_link from CustomerManagerLink resource.
   *
   * @param {string} customerManagerLinkName
   *   A fully-qualified path representing CustomerManagerLink resource.
   * @returns {string} A string representing the customer_manager_link.
   */
  matchCustomerManagerLinkFromCustomerManagerLinkName(customerManagerLinkName: string) {
    return this.pathTemplates.customerManagerLinkPathTemplate.match(customerManagerLinkName).customer_manager_link;
  }

  /**
   * Return a fully-qualified customerNegativeCriterion resource name string.
   *
   * @param {string} customer
   * @param {string} customer_negative_criterion
   * @returns {string} Resource name string.
   */
  customerNegativeCriterionPath(customer:string,customerNegativeCriterion:string) {
    return this.pathTemplates.customerNegativeCriterionPathTemplate.render({
      customer: customer,
      customer_negative_criterion: customerNegativeCriterion,
    });
  }

  /**
   * Parse the customer from CustomerNegativeCriterion resource.
   *
   * @param {string} customerNegativeCriterionName
   *   A fully-qualified path representing CustomerNegativeCriterion resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromCustomerNegativeCriterionName(customerNegativeCriterionName: string) {
    return this.pathTemplates.customerNegativeCriterionPathTemplate.match(customerNegativeCriterionName).customer;
  }

  /**
   * Parse the customer_negative_criterion from CustomerNegativeCriterion resource.
   *
   * @param {string} customerNegativeCriterionName
   *   A fully-qualified path representing CustomerNegativeCriterion resource.
   * @returns {string} A string representing the customer_negative_criterion.
   */
  matchCustomerNegativeCriterionFromCustomerNegativeCriterionName(customerNegativeCriterionName: string) {
    return this.pathTemplates.customerNegativeCriterionPathTemplate.match(customerNegativeCriterionName).customer_negative_criterion;
  }

  /**
   * Return a fully-qualified detailPlacementView resource name string.
   *
   * @param {string} customer
   * @param {string} detail_placement_view
   * @returns {string} Resource name string.
   */
  detailPlacementViewPath(customer:string,detailPlacementView:string) {
    return this.pathTemplates.detailPlacementViewPathTemplate.render({
      customer: customer,
      detail_placement_view: detailPlacementView,
    });
  }

  /**
   * Parse the customer from DetailPlacementView resource.
   *
   * @param {string} detailPlacementViewName
   *   A fully-qualified path representing DetailPlacementView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromDetailPlacementViewName(detailPlacementViewName: string) {
    return this.pathTemplates.detailPlacementViewPathTemplate.match(detailPlacementViewName).customer;
  }

  /**
   * Parse the detail_placement_view from DetailPlacementView resource.
   *
   * @param {string} detailPlacementViewName
   *   A fully-qualified path representing DetailPlacementView resource.
   * @returns {string} A string representing the detail_placement_view.
   */
  matchDetailPlacementViewFromDetailPlacementViewName(detailPlacementViewName: string) {
    return this.pathTemplates.detailPlacementViewPathTemplate.match(detailPlacementViewName).detail_placement_view;
  }

  /**
   * Return a fully-qualified displayKeywordView resource name string.
   *
   * @param {string} customer
   * @param {string} display_keyword_view
   * @returns {string} Resource name string.
   */
  displayKeywordViewPath(customer:string,displayKeywordView:string) {
    return this.pathTemplates.displayKeywordViewPathTemplate.render({
      customer: customer,
      display_keyword_view: displayKeywordView,
    });
  }

  /**
   * Parse the customer from DisplayKeywordView resource.
   *
   * @param {string} displayKeywordViewName
   *   A fully-qualified path representing DisplayKeywordView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromDisplayKeywordViewName(displayKeywordViewName: string) {
    return this.pathTemplates.displayKeywordViewPathTemplate.match(displayKeywordViewName).customer;
  }

  /**
   * Parse the display_keyword_view from DisplayKeywordView resource.
   *
   * @param {string} displayKeywordViewName
   *   A fully-qualified path representing DisplayKeywordView resource.
   * @returns {string} A string representing the display_keyword_view.
   */
  matchDisplayKeywordViewFromDisplayKeywordViewName(displayKeywordViewName: string) {
    return this.pathTemplates.displayKeywordViewPathTemplate.match(displayKeywordViewName).display_keyword_view;
  }

  /**
   * Return a fully-qualified distanceView resource name string.
   *
   * @param {string} customer
   * @param {string} distance_view
   * @returns {string} Resource name string.
   */
  distanceViewPath(customer:string,distanceView:string) {
    return this.pathTemplates.distanceViewPathTemplate.render({
      customer: customer,
      distance_view: distanceView,
    });
  }

  /**
   * Parse the customer from DistanceView resource.
   *
   * @param {string} distanceViewName
   *   A fully-qualified path representing DistanceView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromDistanceViewName(distanceViewName: string) {
    return this.pathTemplates.distanceViewPathTemplate.match(distanceViewName).customer;
  }

  /**
   * Parse the distance_view from DistanceView resource.
   *
   * @param {string} distanceViewName
   *   A fully-qualified path representing DistanceView resource.
   * @returns {string} A string representing the distance_view.
   */
  matchDistanceViewFromDistanceViewName(distanceViewName: string) {
    return this.pathTemplates.distanceViewPathTemplate.match(distanceViewName).distance_view;
  }

  /**
   * Return a fully-qualified domainCategory resource name string.
   *
   * @param {string} customer
   * @param {string} domain_category
   * @returns {string} Resource name string.
   */
  domainCategoryPath(customer:string,domainCategory:string) {
    return this.pathTemplates.domainCategoryPathTemplate.render({
      customer: customer,
      domain_category: domainCategory,
    });
  }

  /**
   * Parse the customer from DomainCategory resource.
   *
   * @param {string} domainCategoryName
   *   A fully-qualified path representing DomainCategory resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromDomainCategoryName(domainCategoryName: string) {
    return this.pathTemplates.domainCategoryPathTemplate.match(domainCategoryName).customer;
  }

  /**
   * Parse the domain_category from DomainCategory resource.
   *
   * @param {string} domainCategoryName
   *   A fully-qualified path representing DomainCategory resource.
   * @returns {string} A string representing the domain_category.
   */
  matchDomainCategoryFromDomainCategoryName(domainCategoryName: string) {
    return this.pathTemplates.domainCategoryPathTemplate.match(domainCategoryName).domain_category;
  }

  /**
   * Return a fully-qualified dynamicSearchAdsSearchTermView resource name string.
   *
   * @param {string} customer
   * @param {string} dynamic_search_ads_search_term_view
   * @returns {string} Resource name string.
   */
  dynamicSearchAdsSearchTermViewPath(customer:string,dynamicSearchAdsSearchTermView:string) {
    return this.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.render({
      customer: customer,
      dynamic_search_ads_search_term_view: dynamicSearchAdsSearchTermView,
    });
  }

  /**
   * Parse the customer from DynamicSearchAdsSearchTermView resource.
   *
   * @param {string} dynamicSearchAdsSearchTermViewName
   *   A fully-qualified path representing DynamicSearchAdsSearchTermView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromDynamicSearchAdsSearchTermViewName(dynamicSearchAdsSearchTermViewName: string) {
    return this.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.match(dynamicSearchAdsSearchTermViewName).customer;
  }

  /**
   * Parse the dynamic_search_ads_search_term_view from DynamicSearchAdsSearchTermView resource.
   *
   * @param {string} dynamicSearchAdsSearchTermViewName
   *   A fully-qualified path representing DynamicSearchAdsSearchTermView resource.
   * @returns {string} A string representing the dynamic_search_ads_search_term_view.
   */
  matchDynamicSearchAdsSearchTermViewFromDynamicSearchAdsSearchTermViewName(dynamicSearchAdsSearchTermViewName: string) {
    return this.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.match(dynamicSearchAdsSearchTermViewName).dynamic_search_ads_search_term_view;
  }

  /**
   * Return a fully-qualified expandedLandingPageView resource name string.
   *
   * @param {string} customer
   * @param {string} expanded_landing_page_view
   * @returns {string} Resource name string.
   */
  expandedLandingPageViewPath(customer:string,expandedLandingPageView:string) {
    return this.pathTemplates.expandedLandingPageViewPathTemplate.render({
      customer: customer,
      expanded_landing_page_view: expandedLandingPageView,
    });
  }

  /**
   * Parse the customer from ExpandedLandingPageView resource.
   *
   * @param {string} expandedLandingPageViewName
   *   A fully-qualified path representing ExpandedLandingPageView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromExpandedLandingPageViewName(expandedLandingPageViewName: string) {
    return this.pathTemplates.expandedLandingPageViewPathTemplate.match(expandedLandingPageViewName).customer;
  }

  /**
   * Parse the expanded_landing_page_view from ExpandedLandingPageView resource.
   *
   * @param {string} expandedLandingPageViewName
   *   A fully-qualified path representing ExpandedLandingPageView resource.
   * @returns {string} A string representing the expanded_landing_page_view.
   */
  matchExpandedLandingPageViewFromExpandedLandingPageViewName(expandedLandingPageViewName: string) {
    return this.pathTemplates.expandedLandingPageViewPathTemplate.match(expandedLandingPageViewName).expanded_landing_page_view;
  }

  /**
   * Return a fully-qualified extensionFeedItem resource name string.
   *
   * @param {string} customer
   * @param {string} extension_feed_item
   * @returns {string} Resource name string.
   */
  extensionFeedItemPath(customer:string,extensionFeedItem:string) {
    return this.pathTemplates.extensionFeedItemPathTemplate.render({
      customer: customer,
      extension_feed_item: extensionFeedItem,
    });
  }

  /**
   * Parse the customer from ExtensionFeedItem resource.
   *
   * @param {string} extensionFeedItemName
   *   A fully-qualified path representing ExtensionFeedItem resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromExtensionFeedItemName(extensionFeedItemName: string) {
    return this.pathTemplates.extensionFeedItemPathTemplate.match(extensionFeedItemName).customer;
  }

  /**
   * Parse the extension_feed_item from ExtensionFeedItem resource.
   *
   * @param {string} extensionFeedItemName
   *   A fully-qualified path representing ExtensionFeedItem resource.
   * @returns {string} A string representing the extension_feed_item.
   */
  matchExtensionFeedItemFromExtensionFeedItemName(extensionFeedItemName: string) {
    return this.pathTemplates.extensionFeedItemPathTemplate.match(extensionFeedItemName).extension_feed_item;
  }

  /**
   * Return a fully-qualified feed resource name string.
   *
   * @param {string} customer
   * @param {string} feed
   * @returns {string} Resource name string.
   */
  feedPath(customer:string,feed:string) {
    return this.pathTemplates.feedPathTemplate.render({
      customer: customer,
      feed: feed,
    });
  }

  /**
   * Parse the customer from Feed resource.
   *
   * @param {string} feedName
   *   A fully-qualified path representing Feed resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromFeedName(feedName: string) {
    return this.pathTemplates.feedPathTemplate.match(feedName).customer;
  }

  /**
   * Parse the feed from Feed resource.
   *
   * @param {string} feedName
   *   A fully-qualified path representing Feed resource.
   * @returns {string} A string representing the feed.
   */
  matchFeedFromFeedName(feedName: string) {
    return this.pathTemplates.feedPathTemplate.match(feedName).feed;
  }

  /**
   * Return a fully-qualified feedItem resource name string.
   *
   * @param {string} customer
   * @param {string} feed_item
   * @returns {string} Resource name string.
   */
  feedItemPath(customer:string,feedItem:string) {
    return this.pathTemplates.feedItemPathTemplate.render({
      customer: customer,
      feed_item: feedItem,
    });
  }

  /**
   * Parse the customer from FeedItem resource.
   *
   * @param {string} feedItemName
   *   A fully-qualified path representing FeedItem resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromFeedItemName(feedItemName: string) {
    return this.pathTemplates.feedItemPathTemplate.match(feedItemName).customer;
  }

  /**
   * Parse the feed_item from FeedItem resource.
   *
   * @param {string} feedItemName
   *   A fully-qualified path representing FeedItem resource.
   * @returns {string} A string representing the feed_item.
   */
  matchFeedItemFromFeedItemName(feedItemName: string) {
    return this.pathTemplates.feedItemPathTemplate.match(feedItemName).feed_item;
  }

  /**
   * Return a fully-qualified feedItemTarget resource name string.
   *
   * @param {string} customer
   * @param {string} feed_item_target
   * @returns {string} Resource name string.
   */
  feedItemTargetPath(customer:string,feedItemTarget:string) {
    return this.pathTemplates.feedItemTargetPathTemplate.render({
      customer: customer,
      feed_item_target: feedItemTarget,
    });
  }

  /**
   * Parse the customer from FeedItemTarget resource.
   *
   * @param {string} feedItemTargetName
   *   A fully-qualified path representing FeedItemTarget resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromFeedItemTargetName(feedItemTargetName: string) {
    return this.pathTemplates.feedItemTargetPathTemplate.match(feedItemTargetName).customer;
  }

  /**
   * Parse the feed_item_target from FeedItemTarget resource.
   *
   * @param {string} feedItemTargetName
   *   A fully-qualified path representing FeedItemTarget resource.
   * @returns {string} A string representing the feed_item_target.
   */
  matchFeedItemTargetFromFeedItemTargetName(feedItemTargetName: string) {
    return this.pathTemplates.feedItemTargetPathTemplate.match(feedItemTargetName).feed_item_target;
  }

  /**
   * Return a fully-qualified feedMapping resource name string.
   *
   * @param {string} customer
   * @param {string} feed_mapping
   * @returns {string} Resource name string.
   */
  feedMappingPath(customer:string,feedMapping:string) {
    return this.pathTemplates.feedMappingPathTemplate.render({
      customer: customer,
      feed_mapping: feedMapping,
    });
  }

  /**
   * Parse the customer from FeedMapping resource.
   *
   * @param {string} feedMappingName
   *   A fully-qualified path representing FeedMapping resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromFeedMappingName(feedMappingName: string) {
    return this.pathTemplates.feedMappingPathTemplate.match(feedMappingName).customer;
  }

  /**
   * Parse the feed_mapping from FeedMapping resource.
   *
   * @param {string} feedMappingName
   *   A fully-qualified path representing FeedMapping resource.
   * @returns {string} A string representing the feed_mapping.
   */
  matchFeedMappingFromFeedMappingName(feedMappingName: string) {
    return this.pathTemplates.feedMappingPathTemplate.match(feedMappingName).feed_mapping;
  }

  /**
   * Return a fully-qualified feedPlaceholderView resource name string.
   *
   * @param {string} customer
   * @param {string} feed_placeholder_view
   * @returns {string} Resource name string.
   */
  feedPlaceholderViewPath(customer:string,feedPlaceholderView:string) {
    return this.pathTemplates.feedPlaceholderViewPathTemplate.render({
      customer: customer,
      feed_placeholder_view: feedPlaceholderView,
    });
  }

  /**
   * Parse the customer from FeedPlaceholderView resource.
   *
   * @param {string} feedPlaceholderViewName
   *   A fully-qualified path representing FeedPlaceholderView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromFeedPlaceholderViewName(feedPlaceholderViewName: string) {
    return this.pathTemplates.feedPlaceholderViewPathTemplate.match(feedPlaceholderViewName).customer;
  }

  /**
   * Parse the feed_placeholder_view from FeedPlaceholderView resource.
   *
   * @param {string} feedPlaceholderViewName
   *   A fully-qualified path representing FeedPlaceholderView resource.
   * @returns {string} A string representing the feed_placeholder_view.
   */
  matchFeedPlaceholderViewFromFeedPlaceholderViewName(feedPlaceholderViewName: string) {
    return this.pathTemplates.feedPlaceholderViewPathTemplate.match(feedPlaceholderViewName).feed_placeholder_view;
  }

  /**
   * Return a fully-qualified genderView resource name string.
   *
   * @param {string} customer
   * @param {string} gender_view
   * @returns {string} Resource name string.
   */
  genderViewPath(customer:string,genderView:string) {
    return this.pathTemplates.genderViewPathTemplate.render({
      customer: customer,
      gender_view: genderView,
    });
  }

  /**
   * Parse the customer from GenderView resource.
   *
   * @param {string} genderViewName
   *   A fully-qualified path representing GenderView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromGenderViewName(genderViewName: string) {
    return this.pathTemplates.genderViewPathTemplate.match(genderViewName).customer;
  }

  /**
   * Parse the gender_view from GenderView resource.
   *
   * @param {string} genderViewName
   *   A fully-qualified path representing GenderView resource.
   * @returns {string} A string representing the gender_view.
   */
  matchGenderViewFromGenderViewName(genderViewName: string) {
    return this.pathTemplates.genderViewPathTemplate.match(genderViewName).gender_view;
  }

  /**
   * Return a fully-qualified geoTargetConstant resource name string.
   *
   * @param {string} geo_target_constant
   * @returns {string} Resource name string.
   */
  geoTargetConstantPath(geoTargetConstant:string) {
    return this.pathTemplates.geoTargetConstantPathTemplate.render({
      geo_target_constant: geoTargetConstant,
    });
  }

  /**
   * Parse the geo_target_constant from GeoTargetConstant resource.
   *
   * @param {string} geoTargetConstantName
   *   A fully-qualified path representing GeoTargetConstant resource.
   * @returns {string} A string representing the geo_target_constant.
   */
  matchGeoTargetConstantFromGeoTargetConstantName(geoTargetConstantName: string) {
    return this.pathTemplates.geoTargetConstantPathTemplate.match(geoTargetConstantName).geo_target_constant;
  }

  /**
   * Return a fully-qualified geographicView resource name string.
   *
   * @param {string} customer
   * @param {string} geographic_view
   * @returns {string} Resource name string.
   */
  geographicViewPath(customer:string,geographicView:string) {
    return this.pathTemplates.geographicViewPathTemplate.render({
      customer: customer,
      geographic_view: geographicView,
    });
  }

  /**
   * Parse the customer from GeographicView resource.
   *
   * @param {string} geographicViewName
   *   A fully-qualified path representing GeographicView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromGeographicViewName(geographicViewName: string) {
    return this.pathTemplates.geographicViewPathTemplate.match(geographicViewName).customer;
  }

  /**
   * Parse the geographic_view from GeographicView resource.
   *
   * @param {string} geographicViewName
   *   A fully-qualified path representing GeographicView resource.
   * @returns {string} A string representing the geographic_view.
   */
  matchGeographicViewFromGeographicViewName(geographicViewName: string) {
    return this.pathTemplates.geographicViewPathTemplate.match(geographicViewName).geographic_view;
  }

  /**
   * Return a fully-qualified googleAdsField resource name string.
   *
   * @param {string} google_ads_field
   * @returns {string} Resource name string.
   */
  googleAdsFieldPath(googleAdsField:string) {
    return this.pathTemplates.googleAdsFieldPathTemplate.render({
      google_ads_field: googleAdsField,
    });
  }

  /**
   * Parse the google_ads_field from GoogleAdsField resource.
   *
   * @param {string} googleAdsFieldName
   *   A fully-qualified path representing GoogleAdsField resource.
   * @returns {string} A string representing the google_ads_field.
   */
  matchGoogleAdsFieldFromGoogleAdsFieldName(googleAdsFieldName: string) {
    return this.pathTemplates.googleAdsFieldPathTemplate.match(googleAdsFieldName).google_ads_field;
  }

  /**
   * Return a fully-qualified groupPlacementView resource name string.
   *
   * @param {string} customer
   * @param {string} group_placement_view
   * @returns {string} Resource name string.
   */
  groupPlacementViewPath(customer:string,groupPlacementView:string) {
    return this.pathTemplates.groupPlacementViewPathTemplate.render({
      customer: customer,
      group_placement_view: groupPlacementView,
    });
  }

  /**
   * Parse the customer from GroupPlacementView resource.
   *
   * @param {string} groupPlacementViewName
   *   A fully-qualified path representing GroupPlacementView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromGroupPlacementViewName(groupPlacementViewName: string) {
    return this.pathTemplates.groupPlacementViewPathTemplate.match(groupPlacementViewName).customer;
  }

  /**
   * Parse the group_placement_view from GroupPlacementView resource.
   *
   * @param {string} groupPlacementViewName
   *   A fully-qualified path representing GroupPlacementView resource.
   * @returns {string} A string representing the group_placement_view.
   */
  matchGroupPlacementViewFromGroupPlacementViewName(groupPlacementViewName: string) {
    return this.pathTemplates.groupPlacementViewPathTemplate.match(groupPlacementViewName).group_placement_view;
  }

  /**
   * Return a fully-qualified hotelGroupView resource name string.
   *
   * @param {string} customer
   * @param {string} hotel_group_view
   * @returns {string} Resource name string.
   */
  hotelGroupViewPath(customer:string,hotelGroupView:string) {
    return this.pathTemplates.hotelGroupViewPathTemplate.render({
      customer: customer,
      hotel_group_view: hotelGroupView,
    });
  }

  /**
   * Parse the customer from HotelGroupView resource.
   *
   * @param {string} hotelGroupViewName
   *   A fully-qualified path representing HotelGroupView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromHotelGroupViewName(hotelGroupViewName: string) {
    return this.pathTemplates.hotelGroupViewPathTemplate.match(hotelGroupViewName).customer;
  }

  /**
   * Parse the hotel_group_view from HotelGroupView resource.
   *
   * @param {string} hotelGroupViewName
   *   A fully-qualified path representing HotelGroupView resource.
   * @returns {string} A string representing the hotel_group_view.
   */
  matchHotelGroupViewFromHotelGroupViewName(hotelGroupViewName: string) {
    return this.pathTemplates.hotelGroupViewPathTemplate.match(hotelGroupViewName).hotel_group_view;
  }

  /**
   * Return a fully-qualified hotelPerformanceView resource name string.
   *
   * @param {string} customer
   * @returns {string} Resource name string.
   */
  hotelPerformanceViewPath(customer:string) {
    return this.pathTemplates.hotelPerformanceViewPathTemplate.render({
      customer: customer,
    });
  }

  /**
   * Parse the customer from HotelPerformanceView resource.
   *
   * @param {string} hotelPerformanceViewName
   *   A fully-qualified path representing HotelPerformanceView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromHotelPerformanceViewName(hotelPerformanceViewName: string) {
    return this.pathTemplates.hotelPerformanceViewPathTemplate.match(hotelPerformanceViewName).customer;
  }

  /**
   * Return a fully-qualified invoice resource name string.
   *
   * @param {string} customer
   * @param {string} invoice
   * @returns {string} Resource name string.
   */
  invoicePath(customer:string,invoice:string) {
    return this.pathTemplates.invoicePathTemplate.render({
      customer: customer,
      invoice: invoice,
    });
  }

  /**
   * Parse the customer from Invoice resource.
   *
   * @param {string} invoiceName
   *   A fully-qualified path representing Invoice resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromInvoiceName(invoiceName: string) {
    return this.pathTemplates.invoicePathTemplate.match(invoiceName).customer;
  }

  /**
   * Parse the invoice from Invoice resource.
   *
   * @param {string} invoiceName
   *   A fully-qualified path representing Invoice resource.
   * @returns {string} A string representing the invoice.
   */
  matchInvoiceFromInvoiceName(invoiceName: string) {
    return this.pathTemplates.invoicePathTemplate.match(invoiceName).invoice;
  }

  /**
   * Return a fully-qualified keywordPlan resource name string.
   *
   * @param {string} customer
   * @param {string} keyword_plan
   * @returns {string} Resource name string.
   */
  keywordPlanPath(customer:string,keywordPlan:string) {
    return this.pathTemplates.keywordPlanPathTemplate.render({
      customer: customer,
      keyword_plan: keywordPlan,
    });
  }

  /**
   * Parse the customer from KeywordPlan resource.
   *
   * @param {string} keywordPlanName
   *   A fully-qualified path representing KeywordPlan resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromKeywordPlanName(keywordPlanName: string) {
    return this.pathTemplates.keywordPlanPathTemplate.match(keywordPlanName).customer;
  }

  /**
   * Parse the keyword_plan from KeywordPlan resource.
   *
   * @param {string} keywordPlanName
   *   A fully-qualified path representing KeywordPlan resource.
   * @returns {string} A string representing the keyword_plan.
   */
  matchKeywordPlanFromKeywordPlanName(keywordPlanName: string) {
    return this.pathTemplates.keywordPlanPathTemplate.match(keywordPlanName).keyword_plan;
  }

  /**
   * Return a fully-qualified keywordPlanAdGroup resource name string.
   *
   * @param {string} customer
   * @param {string} keyword_plan_ad_group
   * @returns {string} Resource name string.
   */
  keywordPlanAdGroupPath(customer:string,keywordPlanAdGroup:string) {
    return this.pathTemplates.keywordPlanAdGroupPathTemplate.render({
      customer: customer,
      keyword_plan_ad_group: keywordPlanAdGroup,
    });
  }

  /**
   * Parse the customer from KeywordPlanAdGroup resource.
   *
   * @param {string} keywordPlanAdGroupName
   *   A fully-qualified path representing KeywordPlanAdGroup resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromKeywordPlanAdGroupName(keywordPlanAdGroupName: string) {
    return this.pathTemplates.keywordPlanAdGroupPathTemplate.match(keywordPlanAdGroupName).customer;
  }

  /**
   * Parse the keyword_plan_ad_group from KeywordPlanAdGroup resource.
   *
   * @param {string} keywordPlanAdGroupName
   *   A fully-qualified path representing KeywordPlanAdGroup resource.
   * @returns {string} A string representing the keyword_plan_ad_group.
   */
  matchKeywordPlanAdGroupFromKeywordPlanAdGroupName(keywordPlanAdGroupName: string) {
    return this.pathTemplates.keywordPlanAdGroupPathTemplate.match(keywordPlanAdGroupName).keyword_plan_ad_group;
  }

  /**
   * Return a fully-qualified keywordPlanCampaign resource name string.
   *
   * @param {string} customer
   * @param {string} keyword_plan_campaign
   * @returns {string} Resource name string.
   */
  keywordPlanCampaignPath(customer:string,keywordPlanCampaign:string) {
    return this.pathTemplates.keywordPlanCampaignPathTemplate.render({
      customer: customer,
      keyword_plan_campaign: keywordPlanCampaign,
    });
  }

  /**
   * Parse the customer from KeywordPlanCampaign resource.
   *
   * @param {string} keywordPlanCampaignName
   *   A fully-qualified path representing KeywordPlanCampaign resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromKeywordPlanCampaignName(keywordPlanCampaignName: string) {
    return this.pathTemplates.keywordPlanCampaignPathTemplate.match(keywordPlanCampaignName).customer;
  }

  /**
   * Parse the keyword_plan_campaign from KeywordPlanCampaign resource.
   *
   * @param {string} keywordPlanCampaignName
   *   A fully-qualified path representing KeywordPlanCampaign resource.
   * @returns {string} A string representing the keyword_plan_campaign.
   */
  matchKeywordPlanCampaignFromKeywordPlanCampaignName(keywordPlanCampaignName: string) {
    return this.pathTemplates.keywordPlanCampaignPathTemplate.match(keywordPlanCampaignName).keyword_plan_campaign;
  }

  /**
   * Return a fully-qualified keywordPlanKeyword resource name string.
   *
   * @param {string} customer
   * @param {string} keyword_plan_keyword
   * @returns {string} Resource name string.
   */
  keywordPlanKeywordPath(customer:string,keywordPlanKeyword:string) {
    return this.pathTemplates.keywordPlanKeywordPathTemplate.render({
      customer: customer,
      keyword_plan_keyword: keywordPlanKeyword,
    });
  }

  /**
   * Parse the customer from KeywordPlanKeyword resource.
   *
   * @param {string} keywordPlanKeywordName
   *   A fully-qualified path representing KeywordPlanKeyword resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromKeywordPlanKeywordName(keywordPlanKeywordName: string) {
    return this.pathTemplates.keywordPlanKeywordPathTemplate.match(keywordPlanKeywordName).customer;
  }

  /**
   * Parse the keyword_plan_keyword from KeywordPlanKeyword resource.
   *
   * @param {string} keywordPlanKeywordName
   *   A fully-qualified path representing KeywordPlanKeyword resource.
   * @returns {string} A string representing the keyword_plan_keyword.
   */
  matchKeywordPlanKeywordFromKeywordPlanKeywordName(keywordPlanKeywordName: string) {
    return this.pathTemplates.keywordPlanKeywordPathTemplate.match(keywordPlanKeywordName).keyword_plan_keyword;
  }

  /**
   * Return a fully-qualified keywordPlanNegativeKeyword resource name string.
   *
   * @param {string} customer
   * @param {string} keyword_plan_negative_keyword
   * @returns {string} Resource name string.
   */
  keywordPlanNegativeKeywordPath(customer:string,keywordPlanNegativeKeyword:string) {
    return this.pathTemplates.keywordPlanNegativeKeywordPathTemplate.render({
      customer: customer,
      keyword_plan_negative_keyword: keywordPlanNegativeKeyword,
    });
  }

  /**
   * Parse the customer from KeywordPlanNegativeKeyword resource.
   *
   * @param {string} keywordPlanNegativeKeywordName
   *   A fully-qualified path representing KeywordPlanNegativeKeyword resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromKeywordPlanNegativeKeywordName(keywordPlanNegativeKeywordName: string) {
    return this.pathTemplates.keywordPlanNegativeKeywordPathTemplate.match(keywordPlanNegativeKeywordName).customer;
  }

  /**
   * Parse the keyword_plan_negative_keyword from KeywordPlanNegativeKeyword resource.
   *
   * @param {string} keywordPlanNegativeKeywordName
   *   A fully-qualified path representing KeywordPlanNegativeKeyword resource.
   * @returns {string} A string representing the keyword_plan_negative_keyword.
   */
  matchKeywordPlanNegativeKeywordFromKeywordPlanNegativeKeywordName(keywordPlanNegativeKeywordName: string) {
    return this.pathTemplates.keywordPlanNegativeKeywordPathTemplate.match(keywordPlanNegativeKeywordName).keyword_plan_negative_keyword;
  }

  /**
   * Return a fully-qualified keywordView resource name string.
   *
   * @param {string} customer
   * @param {string} keyword_view
   * @returns {string} Resource name string.
   */
  keywordViewPath(customer:string,keywordView:string) {
    return this.pathTemplates.keywordViewPathTemplate.render({
      customer: customer,
      keyword_view: keywordView,
    });
  }

  /**
   * Parse the customer from KeywordView resource.
   *
   * @param {string} keywordViewName
   *   A fully-qualified path representing KeywordView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromKeywordViewName(keywordViewName: string) {
    return this.pathTemplates.keywordViewPathTemplate.match(keywordViewName).customer;
  }

  /**
   * Parse the keyword_view from KeywordView resource.
   *
   * @param {string} keywordViewName
   *   A fully-qualified path representing KeywordView resource.
   * @returns {string} A string representing the keyword_view.
   */
  matchKeywordViewFromKeywordViewName(keywordViewName: string) {
    return this.pathTemplates.keywordViewPathTemplate.match(keywordViewName).keyword_view;
  }

  /**
   * Return a fully-qualified label resource name string.
   *
   * @param {string} customer
   * @param {string} label
   * @returns {string} Resource name string.
   */
  labelPath(customer:string,label:string) {
    return this.pathTemplates.labelPathTemplate.render({
      customer: customer,
      label: label,
    });
  }

  /**
   * Parse the customer from Label resource.
   *
   * @param {string} labelName
   *   A fully-qualified path representing Label resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromLabelName(labelName: string) {
    return this.pathTemplates.labelPathTemplate.match(labelName).customer;
  }

  /**
   * Parse the label from Label resource.
   *
   * @param {string} labelName
   *   A fully-qualified path representing Label resource.
   * @returns {string} A string representing the label.
   */
  matchLabelFromLabelName(labelName: string) {
    return this.pathTemplates.labelPathTemplate.match(labelName).label;
  }

  /**
   * Return a fully-qualified landingPageView resource name string.
   *
   * @param {string} customer
   * @param {string} landing_page_view
   * @returns {string} Resource name string.
   */
  landingPageViewPath(customer:string,landingPageView:string) {
    return this.pathTemplates.landingPageViewPathTemplate.render({
      customer: customer,
      landing_page_view: landingPageView,
    });
  }

  /**
   * Parse the customer from LandingPageView resource.
   *
   * @param {string} landingPageViewName
   *   A fully-qualified path representing LandingPageView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromLandingPageViewName(landingPageViewName: string) {
    return this.pathTemplates.landingPageViewPathTemplate.match(landingPageViewName).customer;
  }

  /**
   * Parse the landing_page_view from LandingPageView resource.
   *
   * @param {string} landingPageViewName
   *   A fully-qualified path representing LandingPageView resource.
   * @returns {string} A string representing the landing_page_view.
   */
  matchLandingPageViewFromLandingPageViewName(landingPageViewName: string) {
    return this.pathTemplates.landingPageViewPathTemplate.match(landingPageViewName).landing_page_view;
  }

  /**
   * Return a fully-qualified languageConstant resource name string.
   *
   * @param {string} language_constant
   * @returns {string} Resource name string.
   */
  languageConstantPath(languageConstant:string) {
    return this.pathTemplates.languageConstantPathTemplate.render({
      language_constant: languageConstant,
    });
  }

  /**
   * Parse the language_constant from LanguageConstant resource.
   *
   * @param {string} languageConstantName
   *   A fully-qualified path representing LanguageConstant resource.
   * @returns {string} A string representing the language_constant.
   */
  matchLanguageConstantFromLanguageConstantName(languageConstantName: string) {
    return this.pathTemplates.languageConstantPathTemplate.match(languageConstantName).language_constant;
  }

  /**
   * Return a fully-qualified locationView resource name string.
   *
   * @param {string} customer
   * @param {string} location_view
   * @returns {string} Resource name string.
   */
  locationViewPath(customer:string,locationView:string) {
    return this.pathTemplates.locationViewPathTemplate.render({
      customer: customer,
      location_view: locationView,
    });
  }

  /**
   * Parse the customer from LocationView resource.
   *
   * @param {string} locationViewName
   *   A fully-qualified path representing LocationView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromLocationViewName(locationViewName: string) {
    return this.pathTemplates.locationViewPathTemplate.match(locationViewName).customer;
  }

  /**
   * Parse the location_view from LocationView resource.
   *
   * @param {string} locationViewName
   *   A fully-qualified path representing LocationView resource.
   * @returns {string} A string representing the location_view.
   */
  matchLocationViewFromLocationViewName(locationViewName: string) {
    return this.pathTemplates.locationViewPathTemplate.match(locationViewName).location_view;
  }

  /**
   * Return a fully-qualified managedPlacementView resource name string.
   *
   * @param {string} customer
   * @param {string} managed_placement_view
   * @returns {string} Resource name string.
   */
  managedPlacementViewPath(customer:string,managedPlacementView:string) {
    return this.pathTemplates.managedPlacementViewPathTemplate.render({
      customer: customer,
      managed_placement_view: managedPlacementView,
    });
  }

  /**
   * Parse the customer from ManagedPlacementView resource.
   *
   * @param {string} managedPlacementViewName
   *   A fully-qualified path representing ManagedPlacementView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromManagedPlacementViewName(managedPlacementViewName: string) {
    return this.pathTemplates.managedPlacementViewPathTemplate.match(managedPlacementViewName).customer;
  }

  /**
   * Parse the managed_placement_view from ManagedPlacementView resource.
   *
   * @param {string} managedPlacementViewName
   *   A fully-qualified path representing ManagedPlacementView resource.
   * @returns {string} A string representing the managed_placement_view.
   */
  matchManagedPlacementViewFromManagedPlacementViewName(managedPlacementViewName: string) {
    return this.pathTemplates.managedPlacementViewPathTemplate.match(managedPlacementViewName).managed_placement_view;
  }

  /**
   * Return a fully-qualified mediaFile resource name string.
   *
   * @param {string} customer
   * @param {string} media_file
   * @returns {string} Resource name string.
   */
  mediaFilePath(customer:string,mediaFile:string) {
    return this.pathTemplates.mediaFilePathTemplate.render({
      customer: customer,
      media_file: mediaFile,
    });
  }

  /**
   * Parse the customer from MediaFile resource.
   *
   * @param {string} mediaFileName
   *   A fully-qualified path representing MediaFile resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromMediaFileName(mediaFileName: string) {
    return this.pathTemplates.mediaFilePathTemplate.match(mediaFileName).customer;
  }

  /**
   * Parse the media_file from MediaFile resource.
   *
   * @param {string} mediaFileName
   *   A fully-qualified path representing MediaFile resource.
   * @returns {string} A string representing the media_file.
   */
  matchMediaFileFromMediaFileName(mediaFileName: string) {
    return this.pathTemplates.mediaFilePathTemplate.match(mediaFileName).media_file;
  }

  /**
   * Return a fully-qualified merchantCenterLink resource name string.
   *
   * @param {string} customer
   * @param {string} merchant_center_link
   * @returns {string} Resource name string.
   */
  merchantCenterLinkPath(customer:string,merchantCenterLink:string) {
    return this.pathTemplates.merchantCenterLinkPathTemplate.render({
      customer: customer,
      merchant_center_link: merchantCenterLink,
    });
  }

  /**
   * Parse the customer from MerchantCenterLink resource.
   *
   * @param {string} merchantCenterLinkName
   *   A fully-qualified path representing MerchantCenterLink resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromMerchantCenterLinkName(merchantCenterLinkName: string) {
    return this.pathTemplates.merchantCenterLinkPathTemplate.match(merchantCenterLinkName).customer;
  }

  /**
   * Parse the merchant_center_link from MerchantCenterLink resource.
   *
   * @param {string} merchantCenterLinkName
   *   A fully-qualified path representing MerchantCenterLink resource.
   * @returns {string} A string representing the merchant_center_link.
   */
  matchMerchantCenterLinkFromMerchantCenterLinkName(merchantCenterLinkName: string) {
    return this.pathTemplates.merchantCenterLinkPathTemplate.match(merchantCenterLinkName).merchant_center_link;
  }

  /**
   * Return a fully-qualified mobileAppCategoryConstant resource name string.
   *
   * @param {string} mobile_app_category_constant
   * @returns {string} Resource name string.
   */
  mobileAppCategoryConstantPath(mobileAppCategoryConstant:string) {
    return this.pathTemplates.mobileAppCategoryConstantPathTemplate.render({
      mobile_app_category_constant: mobileAppCategoryConstant,
    });
  }

  /**
   * Parse the mobile_app_category_constant from MobileAppCategoryConstant resource.
   *
   * @param {string} mobileAppCategoryConstantName
   *   A fully-qualified path representing MobileAppCategoryConstant resource.
   * @returns {string} A string representing the mobile_app_category_constant.
   */
  matchMobileAppCategoryConstantFromMobileAppCategoryConstantName(mobileAppCategoryConstantName: string) {
    return this.pathTemplates.mobileAppCategoryConstantPathTemplate.match(mobileAppCategoryConstantName).mobile_app_category_constant;
  }

  /**
   * Return a fully-qualified mobileDeviceConstant resource name string.
   *
   * @param {string} mobile_device_constant
   * @returns {string} Resource name string.
   */
  mobileDeviceConstantPath(mobileDeviceConstant:string) {
    return this.pathTemplates.mobileDeviceConstantPathTemplate.render({
      mobile_device_constant: mobileDeviceConstant,
    });
  }

  /**
   * Parse the mobile_device_constant from MobileDeviceConstant resource.
   *
   * @param {string} mobileDeviceConstantName
   *   A fully-qualified path representing MobileDeviceConstant resource.
   * @returns {string} A string representing the mobile_device_constant.
   */
  matchMobileDeviceConstantFromMobileDeviceConstantName(mobileDeviceConstantName: string) {
    return this.pathTemplates.mobileDeviceConstantPathTemplate.match(mobileDeviceConstantName).mobile_device_constant;
  }

  /**
   * Return a fully-qualified mutateJob resource name string.
   *
   * @param {string} customer
   * @param {string} mutate_job
   * @returns {string} Resource name string.
   */
  mutateJobPath(customer:string,mutateJob:string) {
    return this.pathTemplates.mutateJobPathTemplate.render({
      customer: customer,
      mutate_job: mutateJob,
    });
  }

  /**
   * Parse the customer from MutateJob resource.
   *
   * @param {string} mutateJobName
   *   A fully-qualified path representing MutateJob resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromMutateJobName(mutateJobName: string) {
    return this.pathTemplates.mutateJobPathTemplate.match(mutateJobName).customer;
  }

  /**
   * Parse the mutate_job from MutateJob resource.
   *
   * @param {string} mutateJobName
   *   A fully-qualified path representing MutateJob resource.
   * @returns {string} A string representing the mutate_job.
   */
  matchMutateJobFromMutateJobName(mutateJobName: string) {
    return this.pathTemplates.mutateJobPathTemplate.match(mutateJobName).mutate_job;
  }

  /**
   * Return a fully-qualified offlineUserDataJob resource name string.
   *
   * @param {string} customer
   * @param {string} offline_user_data_job
   * @returns {string} Resource name string.
   */
  offlineUserDataJobPath(customer:string,offlineUserDataJob:string) {
    return this.pathTemplates.offlineUserDataJobPathTemplate.render({
      customer: customer,
      offline_user_data_job: offlineUserDataJob,
    });
  }

  /**
   * Parse the customer from OfflineUserDataJob resource.
   *
   * @param {string} offlineUserDataJobName
   *   A fully-qualified path representing OfflineUserDataJob resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromOfflineUserDataJobName(offlineUserDataJobName: string) {
    return this.pathTemplates.offlineUserDataJobPathTemplate.match(offlineUserDataJobName).customer;
  }

  /**
   * Parse the offline_user_data_job from OfflineUserDataJob resource.
   *
   * @param {string} offlineUserDataJobName
   *   A fully-qualified path representing OfflineUserDataJob resource.
   * @returns {string} A string representing the offline_user_data_job.
   */
  matchOfflineUserDataJobFromOfflineUserDataJobName(offlineUserDataJobName: string) {
    return this.pathTemplates.offlineUserDataJobPathTemplate.match(offlineUserDataJobName).offline_user_data_job;
  }

  /**
   * Return a fully-qualified operatingSystemVersionConstant resource name string.
   *
   * @param {string} operating_system_version_constant
   * @returns {string} Resource name string.
   */
  operatingSystemVersionConstantPath(operatingSystemVersionConstant:string) {
    return this.pathTemplates.operatingSystemVersionConstantPathTemplate.render({
      operating_system_version_constant: operatingSystemVersionConstant,
    });
  }

  /**
   * Parse the operating_system_version_constant from OperatingSystemVersionConstant resource.
   *
   * @param {string} operatingSystemVersionConstantName
   *   A fully-qualified path representing OperatingSystemVersionConstant resource.
   * @returns {string} A string representing the operating_system_version_constant.
   */
  matchOperatingSystemVersionConstantFromOperatingSystemVersionConstantName(operatingSystemVersionConstantName: string) {
    return this.pathTemplates.operatingSystemVersionConstantPathTemplate.match(operatingSystemVersionConstantName).operating_system_version_constant;
  }

  /**
   * Return a fully-qualified paidOrganicSearchTermView resource name string.
   *
   * @param {string} customer
   * @param {string} paid_organic_search_term_view
   * @returns {string} Resource name string.
   */
  paidOrganicSearchTermViewPath(customer:string,paidOrganicSearchTermView:string) {
    return this.pathTemplates.paidOrganicSearchTermViewPathTemplate.render({
      customer: customer,
      paid_organic_search_term_view: paidOrganicSearchTermView,
    });
  }

  /**
   * Parse the customer from PaidOrganicSearchTermView resource.
   *
   * @param {string} paidOrganicSearchTermViewName
   *   A fully-qualified path representing PaidOrganicSearchTermView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromPaidOrganicSearchTermViewName(paidOrganicSearchTermViewName: string) {
    return this.pathTemplates.paidOrganicSearchTermViewPathTemplate.match(paidOrganicSearchTermViewName).customer;
  }

  /**
   * Parse the paid_organic_search_term_view from PaidOrganicSearchTermView resource.
   *
   * @param {string} paidOrganicSearchTermViewName
   *   A fully-qualified path representing PaidOrganicSearchTermView resource.
   * @returns {string} A string representing the paid_organic_search_term_view.
   */
  matchPaidOrganicSearchTermViewFromPaidOrganicSearchTermViewName(paidOrganicSearchTermViewName: string) {
    return this.pathTemplates.paidOrganicSearchTermViewPathTemplate.match(paidOrganicSearchTermViewName).paid_organic_search_term_view;
  }

  /**
   * Return a fully-qualified parentalStatusView resource name string.
   *
   * @param {string} customer
   * @param {string} parental_status_view
   * @returns {string} Resource name string.
   */
  parentalStatusViewPath(customer:string,parentalStatusView:string) {
    return this.pathTemplates.parentalStatusViewPathTemplate.render({
      customer: customer,
      parental_status_view: parentalStatusView,
    });
  }

  /**
   * Parse the customer from ParentalStatusView resource.
   *
   * @param {string} parentalStatusViewName
   *   A fully-qualified path representing ParentalStatusView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromParentalStatusViewName(parentalStatusViewName: string) {
    return this.pathTemplates.parentalStatusViewPathTemplate.match(parentalStatusViewName).customer;
  }

  /**
   * Parse the parental_status_view from ParentalStatusView resource.
   *
   * @param {string} parentalStatusViewName
   *   A fully-qualified path representing ParentalStatusView resource.
   * @returns {string} A string representing the parental_status_view.
   */
  matchParentalStatusViewFromParentalStatusViewName(parentalStatusViewName: string) {
    return this.pathTemplates.parentalStatusViewPathTemplate.match(parentalStatusViewName).parental_status_view;
  }

  /**
   * Return a fully-qualified paymentsAccount resource name string.
   *
   * @param {string} customer
   * @param {string} payments_account
   * @returns {string} Resource name string.
   */
  paymentsAccountPath(customer:string,paymentsAccount:string) {
    return this.pathTemplates.paymentsAccountPathTemplate.render({
      customer: customer,
      payments_account: paymentsAccount,
    });
  }

  /**
   * Parse the customer from PaymentsAccount resource.
   *
   * @param {string} paymentsAccountName
   *   A fully-qualified path representing PaymentsAccount resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromPaymentsAccountName(paymentsAccountName: string) {
    return this.pathTemplates.paymentsAccountPathTemplate.match(paymentsAccountName).customer;
  }

  /**
   * Parse the payments_account from PaymentsAccount resource.
   *
   * @param {string} paymentsAccountName
   *   A fully-qualified path representing PaymentsAccount resource.
   * @returns {string} A string representing the payments_account.
   */
  matchPaymentsAccountFromPaymentsAccountName(paymentsAccountName: string) {
    return this.pathTemplates.paymentsAccountPathTemplate.match(paymentsAccountName).payments_account;
  }

  /**
   * Return a fully-qualified productBiddingCategoryConstant resource name string.
   *
   * @param {string} product_bidding_category_constant
   * @returns {string} Resource name string.
   */
  productBiddingCategoryConstantPath(productBiddingCategoryConstant:string) {
    return this.pathTemplates.productBiddingCategoryConstantPathTemplate.render({
      product_bidding_category_constant: productBiddingCategoryConstant,
    });
  }

  /**
   * Parse the product_bidding_category_constant from ProductBiddingCategoryConstant resource.
   *
   * @param {string} productBiddingCategoryConstantName
   *   A fully-qualified path representing ProductBiddingCategoryConstant resource.
   * @returns {string} A string representing the product_bidding_category_constant.
   */
  matchProductBiddingCategoryConstantFromProductBiddingCategoryConstantName(productBiddingCategoryConstantName: string) {
    return this.pathTemplates.productBiddingCategoryConstantPathTemplate.match(productBiddingCategoryConstantName).product_bidding_category_constant;
  }

  /**
   * Return a fully-qualified productGroupView resource name string.
   *
   * @param {string} customer
   * @param {string} product_group_view
   * @returns {string} Resource name string.
   */
  productGroupViewPath(customer:string,productGroupView:string) {
    return this.pathTemplates.productGroupViewPathTemplate.render({
      customer: customer,
      product_group_view: productGroupView,
    });
  }

  /**
   * Parse the customer from ProductGroupView resource.
   *
   * @param {string} productGroupViewName
   *   A fully-qualified path representing ProductGroupView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromProductGroupViewName(productGroupViewName: string) {
    return this.pathTemplates.productGroupViewPathTemplate.match(productGroupViewName).customer;
  }

  /**
   * Parse the product_group_view from ProductGroupView resource.
   *
   * @param {string} productGroupViewName
   *   A fully-qualified path representing ProductGroupView resource.
   * @returns {string} A string representing the product_group_view.
   */
  matchProductGroupViewFromProductGroupViewName(productGroupViewName: string) {
    return this.pathTemplates.productGroupViewPathTemplate.match(productGroupViewName).product_group_view;
  }

  /**
   * Return a fully-qualified recommendation resource name string.
   *
   * @param {string} customer
   * @param {string} recommendation
   * @returns {string} Resource name string.
   */
  recommendationPath(customer:string,recommendation:string) {
    return this.pathTemplates.recommendationPathTemplate.render({
      customer: customer,
      recommendation: recommendation,
    });
  }

  /**
   * Parse the customer from Recommendation resource.
   *
   * @param {string} recommendationName
   *   A fully-qualified path representing Recommendation resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromRecommendationName(recommendationName: string) {
    return this.pathTemplates.recommendationPathTemplate.match(recommendationName).customer;
  }

  /**
   * Parse the recommendation from Recommendation resource.
   *
   * @param {string} recommendationName
   *   A fully-qualified path representing Recommendation resource.
   * @returns {string} A string representing the recommendation.
   */
  matchRecommendationFromRecommendationName(recommendationName: string) {
    return this.pathTemplates.recommendationPathTemplate.match(recommendationName).recommendation;
  }

  /**
   * Return a fully-qualified remarketingAction resource name string.
   *
   * @param {string} customer
   * @param {string} remarketing_action
   * @returns {string} Resource name string.
   */
  remarketingActionPath(customer:string,remarketingAction:string) {
    return this.pathTemplates.remarketingActionPathTemplate.render({
      customer: customer,
      remarketing_action: remarketingAction,
    });
  }

  /**
   * Parse the customer from RemarketingAction resource.
   *
   * @param {string} remarketingActionName
   *   A fully-qualified path representing RemarketingAction resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromRemarketingActionName(remarketingActionName: string) {
    return this.pathTemplates.remarketingActionPathTemplate.match(remarketingActionName).customer;
  }

  /**
   * Parse the remarketing_action from RemarketingAction resource.
   *
   * @param {string} remarketingActionName
   *   A fully-qualified path representing RemarketingAction resource.
   * @returns {string} A string representing the remarketing_action.
   */
  matchRemarketingActionFromRemarketingActionName(remarketingActionName: string) {
    return this.pathTemplates.remarketingActionPathTemplate.match(remarketingActionName).remarketing_action;
  }

  /**
   * Return a fully-qualified searchTermView resource name string.
   *
   * @param {string} customer
   * @param {string} search_term_view
   * @returns {string} Resource name string.
   */
  searchTermViewPath(customer:string,searchTermView:string) {
    return this.pathTemplates.searchTermViewPathTemplate.render({
      customer: customer,
      search_term_view: searchTermView,
    });
  }

  /**
   * Parse the customer from SearchTermView resource.
   *
   * @param {string} searchTermViewName
   *   A fully-qualified path representing SearchTermView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromSearchTermViewName(searchTermViewName: string) {
    return this.pathTemplates.searchTermViewPathTemplate.match(searchTermViewName).customer;
  }

  /**
   * Parse the search_term_view from SearchTermView resource.
   *
   * @param {string} searchTermViewName
   *   A fully-qualified path representing SearchTermView resource.
   * @returns {string} A string representing the search_term_view.
   */
  matchSearchTermViewFromSearchTermViewName(searchTermViewName: string) {
    return this.pathTemplates.searchTermViewPathTemplate.match(searchTermViewName).search_term_view;
  }

  /**
   * Return a fully-qualified sharedCriterion resource name string.
   *
   * @param {string} customer
   * @param {string} shared_criterion
   * @returns {string} Resource name string.
   */
  sharedCriterionPath(customer:string,sharedCriterion:string) {
    return this.pathTemplates.sharedCriterionPathTemplate.render({
      customer: customer,
      shared_criterion: sharedCriterion,
    });
  }

  /**
   * Parse the customer from SharedCriterion resource.
   *
   * @param {string} sharedCriterionName
   *   A fully-qualified path representing SharedCriterion resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromSharedCriterionName(sharedCriterionName: string) {
    return this.pathTemplates.sharedCriterionPathTemplate.match(sharedCriterionName).customer;
  }

  /**
   * Parse the shared_criterion from SharedCriterion resource.
   *
   * @param {string} sharedCriterionName
   *   A fully-qualified path representing SharedCriterion resource.
   * @returns {string} A string representing the shared_criterion.
   */
  matchSharedCriterionFromSharedCriterionName(sharedCriterionName: string) {
    return this.pathTemplates.sharedCriterionPathTemplate.match(sharedCriterionName).shared_criterion;
  }

  /**
   * Return a fully-qualified sharedSet resource name string.
   *
   * @param {string} customer
   * @param {string} shared_set
   * @returns {string} Resource name string.
   */
  sharedSetPath(customer:string,sharedSet:string) {
    return this.pathTemplates.sharedSetPathTemplate.render({
      customer: customer,
      shared_set: sharedSet,
    });
  }

  /**
   * Parse the customer from SharedSet resource.
   *
   * @param {string} sharedSetName
   *   A fully-qualified path representing SharedSet resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromSharedSetName(sharedSetName: string) {
    return this.pathTemplates.sharedSetPathTemplate.match(sharedSetName).customer;
  }

  /**
   * Parse the shared_set from SharedSet resource.
   *
   * @param {string} sharedSetName
   *   A fully-qualified path representing SharedSet resource.
   * @returns {string} A string representing the shared_set.
   */
  matchSharedSetFromSharedSetName(sharedSetName: string) {
    return this.pathTemplates.sharedSetPathTemplate.match(sharedSetName).shared_set;
  }

  /**
   * Return a fully-qualified shoppingPerformanceView resource name string.
   *
   * @param {string} customer
   * @returns {string} Resource name string.
   */
  shoppingPerformanceViewPath(customer:string) {
    return this.pathTemplates.shoppingPerformanceViewPathTemplate.render({
      customer: customer,
    });
  }

  /**
   * Parse the customer from ShoppingPerformanceView resource.
   *
   * @param {string} shoppingPerformanceViewName
   *   A fully-qualified path representing ShoppingPerformanceView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromShoppingPerformanceViewName(shoppingPerformanceViewName: string) {
    return this.pathTemplates.shoppingPerformanceViewPathTemplate.match(shoppingPerformanceViewName).customer;
  }

  /**
   * Return a fully-qualified topicConstant resource name string.
   *
   * @param {string} topic_constant
   * @returns {string} Resource name string.
   */
  topicConstantPath(topicConstant:string) {
    return this.pathTemplates.topicConstantPathTemplate.render({
      topic_constant: topicConstant,
    });
  }

  /**
   * Parse the topic_constant from TopicConstant resource.
   *
   * @param {string} topicConstantName
   *   A fully-qualified path representing TopicConstant resource.
   * @returns {string} A string representing the topic_constant.
   */
  matchTopicConstantFromTopicConstantName(topicConstantName: string) {
    return this.pathTemplates.topicConstantPathTemplate.match(topicConstantName).topic_constant;
  }

  /**
   * Return a fully-qualified topicView resource name string.
   *
   * @param {string} customer
   * @param {string} topic_view
   * @returns {string} Resource name string.
   */
  topicViewPath(customer:string,topicView:string) {
    return this.pathTemplates.topicViewPathTemplate.render({
      customer: customer,
      topic_view: topicView,
    });
  }

  /**
   * Parse the customer from TopicView resource.
   *
   * @param {string} topicViewName
   *   A fully-qualified path representing TopicView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromTopicViewName(topicViewName: string) {
    return this.pathTemplates.topicViewPathTemplate.match(topicViewName).customer;
  }

  /**
   * Parse the topic_view from TopicView resource.
   *
   * @param {string} topicViewName
   *   A fully-qualified path representing TopicView resource.
   * @returns {string} A string representing the topic_view.
   */
  matchTopicViewFromTopicViewName(topicViewName: string) {
    return this.pathTemplates.topicViewPathTemplate.match(topicViewName).topic_view;
  }

  /**
   * Return a fully-qualified userInterest resource name string.
   *
   * @param {string} customer
   * @param {string} user_interest
   * @returns {string} Resource name string.
   */
  userInterestPath(customer:string,userInterest:string) {
    return this.pathTemplates.userInterestPathTemplate.render({
      customer: customer,
      user_interest: userInterest,
    });
  }

  /**
   * Parse the customer from UserInterest resource.
   *
   * @param {string} userInterestName
   *   A fully-qualified path representing UserInterest resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromUserInterestName(userInterestName: string) {
    return this.pathTemplates.userInterestPathTemplate.match(userInterestName).customer;
  }

  /**
   * Parse the user_interest from UserInterest resource.
   *
   * @param {string} userInterestName
   *   A fully-qualified path representing UserInterest resource.
   * @returns {string} A string representing the user_interest.
   */
  matchUserInterestFromUserInterestName(userInterestName: string) {
    return this.pathTemplates.userInterestPathTemplate.match(userInterestName).user_interest;
  }

  /**
   * Return a fully-qualified userList resource name string.
   *
   * @param {string} customer
   * @param {string} user_list
   * @returns {string} Resource name string.
   */
  userListPath(customer:string,userList:string) {
    return this.pathTemplates.userListPathTemplate.render({
      customer: customer,
      user_list: userList,
    });
  }

  /**
   * Parse the customer from UserList resource.
   *
   * @param {string} userListName
   *   A fully-qualified path representing UserList resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromUserListName(userListName: string) {
    return this.pathTemplates.userListPathTemplate.match(userListName).customer;
  }

  /**
   * Parse the user_list from UserList resource.
   *
   * @param {string} userListName
   *   A fully-qualified path representing UserList resource.
   * @returns {string} A string representing the user_list.
   */
  matchUserListFromUserListName(userListName: string) {
    return this.pathTemplates.userListPathTemplate.match(userListName).user_list;
  }

  /**
   * Return a fully-qualified userLocationView resource name string.
   *
   * @param {string} customer
   * @param {string} user_location_view
   * @returns {string} Resource name string.
   */
  userLocationViewPath(customer:string,userLocationView:string) {
    return this.pathTemplates.userLocationViewPathTemplate.render({
      customer: customer,
      user_location_view: userLocationView,
    });
  }

  /**
   * Parse the customer from UserLocationView resource.
   *
   * @param {string} userLocationViewName
   *   A fully-qualified path representing UserLocationView resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromUserLocationViewName(userLocationViewName: string) {
    return this.pathTemplates.userLocationViewPathTemplate.match(userLocationViewName).customer;
  }

  /**
   * Parse the user_location_view from UserLocationView resource.
   *
   * @param {string} userLocationViewName
   *   A fully-qualified path representing UserLocationView resource.
   * @returns {string} A string representing the user_location_view.
   */
  matchUserLocationViewFromUserLocationViewName(userLocationViewName: string) {
    return this.pathTemplates.userLocationViewPathTemplate.match(userLocationViewName).user_location_view;
  }

  /**
   * Return a fully-qualified video resource name string.
   *
   * @param {string} customer
   * @param {string} video
   * @returns {string} Resource name string.
   */
  videoPath(customer:string,video:string) {
    return this.pathTemplates.videoPathTemplate.render({
      customer: customer,
      video: video,
    });
  }

  /**
   * Parse the customer from Video resource.
   *
   * @param {string} videoName
   *   A fully-qualified path representing Video resource.
   * @returns {string} A string representing the customer.
   */
  matchCustomerFromVideoName(videoName: string) {
    return this.pathTemplates.videoPathTemplate.match(videoName).customer;
  }

  /**
   * Parse the video from Video resource.
   *
   * @param {string} videoName
   *   A fully-qualified path representing Video resource.
   * @returns {string} A string representing the video.
   */
  matchVideoFromVideoName(videoName: string) {
    return this.pathTemplates.videoPathTemplate.match(videoName).video;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.mobileAppCategoryConstantServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}

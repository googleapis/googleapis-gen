// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as keywordviewserviceModule from '../src';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

describe('v3.KeywordViewServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = keywordviewserviceModule.v3.KeywordViewServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = keywordviewserviceModule.v3.KeywordViewServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = keywordviewserviceModule.v3.KeywordViewServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new keywordviewserviceModule.v3.KeywordViewServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.keywordViewServiceStub, undefined);
        await client.initialize();
        assert(client.keywordViewServiceStub);
    });

    it('has close method', () => {
        const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getKeywordView', () => {
        it('invokes getKeywordView without error', async () => {
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.ads.googleads.v3.services.GetKeywordViewRequest());
            request.resourceName = '';
            const expectedHeaderRequestParams = "resource_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.ads.googleads.v3.resources.KeywordView());
            client.innerApiCalls.getKeywordView = stubSimpleCall(expectedResponse);
            const [response] = await client.getKeywordView(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getKeywordView as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getKeywordView without error using callback', async () => {
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.ads.googleads.v3.services.GetKeywordViewRequest());
            request.resourceName = '';
            const expectedHeaderRequestParams = "resource_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.ads.googleads.v3.resources.KeywordView());
            client.innerApiCalls.getKeywordView = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getKeywordView(
                    request,
                    (err?: Error|null, result?: protos.google.ads.googleads.v3.resources.IKeywordView|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getKeywordView as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getKeywordView with error', async () => {
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.ads.googleads.v3.services.GetKeywordViewRequest());
            request.resourceName = '';
            const expectedHeaderRequestParams = "resource_name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getKeywordView = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getKeywordView(request), expectedError);
            assert((client.innerApiCalls.getKeywordView as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('Path templates', () => {

        describe('accountBudget', () => {
            const fakePath = "/rendered/path/accountBudget";
            const expectedParameters = {
                customer: "customerValue",
                account_budget: "accountBudgetValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.accountBudgetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.accountBudgetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('accountBudgetPath', () => {
                const result = client.accountBudgetPath("customerValue", "accountBudgetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.accountBudgetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAccountBudgetName', () => {
                const result = client.matchCustomerFromAccountBudgetName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.accountBudgetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAccountBudgetFromAccountBudgetName', () => {
                const result = client.matchAccountBudgetFromAccountBudgetName(fakePath);
                assert.strictEqual(result, "accountBudgetValue");
                assert((client.pathTemplates.accountBudgetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('accountBudgetProposal', () => {
            const fakePath = "/rendered/path/accountBudgetProposal";
            const expectedParameters = {
                customer: "customerValue",
                account_budget_proposal: "accountBudgetProposalValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.accountBudgetProposalPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.accountBudgetProposalPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('accountBudgetProposalPath', () => {
                const result = client.accountBudgetProposalPath("customerValue", "accountBudgetProposalValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.accountBudgetProposalPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAccountBudgetProposalName', () => {
                const result = client.matchCustomerFromAccountBudgetProposalName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.accountBudgetProposalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAccountBudgetProposalFromAccountBudgetProposalName', () => {
                const result = client.matchAccountBudgetProposalFromAccountBudgetProposalName(fakePath);
                assert.strictEqual(result, "accountBudgetProposalValue");
                assert((client.pathTemplates.accountBudgetProposalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('ad', () => {
            const fakePath = "/rendered/path/ad";
            const expectedParameters = {
                customer: "customerValue",
                ad: "adValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adPath', () => {
                const result = client.adPath("customerValue", "adValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdName', () => {
                const result = client.matchCustomerFromAdName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdFromAdName', () => {
                const result = client.matchAdFromAdName(fakePath);
                assert.strictEqual(result, "adValue");
                assert((client.pathTemplates.adPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroup', () => {
            const fakePath = "/rendered/path/adGroup";
            const expectedParameters = {
                customer: "customerValue",
                ad_group: "adGroupValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupPath', () => {
                const result = client.adGroupPath("customerValue", "adGroupValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdGroupName', () => {
                const result = client.matchCustomerFromAdGroupName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupFromAdGroupName', () => {
                const result = client.matchAdGroupFromAdGroupName(fakePath);
                assert.strictEqual(result, "adGroupValue");
                assert((client.pathTemplates.adGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupAd', () => {
            const fakePath = "/rendered/path/adGroupAd";
            const expectedParameters = {
                customer: "customerValue",
                ad_group_ad: "adGroupAdValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupAdPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupAdPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupAdPath', () => {
                const result = client.adGroupAdPath("customerValue", "adGroupAdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupAdPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdGroupAdName', () => {
                const result = client.matchCustomerFromAdGroupAdName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adGroupAdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupAdFromAdGroupAdName', () => {
                const result = client.matchAdGroupAdFromAdGroupAdName(fakePath);
                assert.strictEqual(result, "adGroupAdValue");
                assert((client.pathTemplates.adGroupAdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupAdAssetView', () => {
            const fakePath = "/rendered/path/adGroupAdAssetView";
            const expectedParameters = {
                customer: "customerValue",
                ad_group_ad_asset_view: "adGroupAdAssetViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupAdAssetViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupAdAssetViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupAdAssetViewPath', () => {
                const result = client.adGroupAdAssetViewPath("customerValue", "adGroupAdAssetViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupAdAssetViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdGroupAdAssetViewName', () => {
                const result = client.matchCustomerFromAdGroupAdAssetViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adGroupAdAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupAdAssetViewFromAdGroupAdAssetViewName', () => {
                const result = client.matchAdGroupAdAssetViewFromAdGroupAdAssetViewName(fakePath);
                assert.strictEqual(result, "adGroupAdAssetViewValue");
                assert((client.pathTemplates.adGroupAdAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupAdLabel', () => {
            const fakePath = "/rendered/path/adGroupAdLabel";
            const expectedParameters = {
                customer: "customerValue",
                ad_group_ad_label: "adGroupAdLabelValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupAdLabelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupAdLabelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupAdLabelPath', () => {
                const result = client.adGroupAdLabelPath("customerValue", "adGroupAdLabelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupAdLabelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdGroupAdLabelName', () => {
                const result = client.matchCustomerFromAdGroupAdLabelName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adGroupAdLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupAdLabelFromAdGroupAdLabelName', () => {
                const result = client.matchAdGroupAdLabelFromAdGroupAdLabelName(fakePath);
                assert.strictEqual(result, "adGroupAdLabelValue");
                assert((client.pathTemplates.adGroupAdLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupAudienceView', () => {
            const fakePath = "/rendered/path/adGroupAudienceView";
            const expectedParameters = {
                customer: "customerValue",
                ad_group_audience_view: "adGroupAudienceViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupAudienceViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupAudienceViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupAudienceViewPath', () => {
                const result = client.adGroupAudienceViewPath("customerValue", "adGroupAudienceViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupAudienceViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdGroupAudienceViewName', () => {
                const result = client.matchCustomerFromAdGroupAudienceViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adGroupAudienceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupAudienceViewFromAdGroupAudienceViewName', () => {
                const result = client.matchAdGroupAudienceViewFromAdGroupAudienceViewName(fakePath);
                assert.strictEqual(result, "adGroupAudienceViewValue");
                assert((client.pathTemplates.adGroupAudienceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupBidModifier', () => {
            const fakePath = "/rendered/path/adGroupBidModifier";
            const expectedParameters = {
                customer: "customerValue",
                ad_group_bid_modifier: "adGroupBidModifierValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupBidModifierPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupBidModifierPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupBidModifierPath', () => {
                const result = client.adGroupBidModifierPath("customerValue", "adGroupBidModifierValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupBidModifierPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdGroupBidModifierName', () => {
                const result = client.matchCustomerFromAdGroupBidModifierName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adGroupBidModifierPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupBidModifierFromAdGroupBidModifierName', () => {
                const result = client.matchAdGroupBidModifierFromAdGroupBidModifierName(fakePath);
                assert.strictEqual(result, "adGroupBidModifierValue");
                assert((client.pathTemplates.adGroupBidModifierPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupCriterion', () => {
            const fakePath = "/rendered/path/adGroupCriterion";
            const expectedParameters = {
                customer: "customerValue",
                ad_group_criterion: "adGroupCriterionValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupCriterionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupCriterionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupCriterionPath', () => {
                const result = client.adGroupCriterionPath("customerValue", "adGroupCriterionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupCriterionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdGroupCriterionName', () => {
                const result = client.matchCustomerFromAdGroupCriterionName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adGroupCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupCriterionFromAdGroupCriterionName', () => {
                const result = client.matchAdGroupCriterionFromAdGroupCriterionName(fakePath);
                assert.strictEqual(result, "adGroupCriterionValue");
                assert((client.pathTemplates.adGroupCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupCriterionLabel', () => {
            const fakePath = "/rendered/path/adGroupCriterionLabel";
            const expectedParameters = {
                customer: "customerValue",
                ad_group_criterion_label: "adGroupCriterionLabelValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupCriterionLabelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupCriterionLabelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupCriterionLabelPath', () => {
                const result = client.adGroupCriterionLabelPath("customerValue", "adGroupCriterionLabelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupCriterionLabelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdGroupCriterionLabelName', () => {
                const result = client.matchCustomerFromAdGroupCriterionLabelName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adGroupCriterionLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupCriterionLabelFromAdGroupCriterionLabelName', () => {
                const result = client.matchAdGroupCriterionLabelFromAdGroupCriterionLabelName(fakePath);
                assert.strictEqual(result, "adGroupCriterionLabelValue");
                assert((client.pathTemplates.adGroupCriterionLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupCriterionSimulation', () => {
            const fakePath = "/rendered/path/adGroupCriterionSimulation";
            const expectedParameters = {
                customer: "customerValue",
                ad_group_criterion_simulation: "adGroupCriterionSimulationValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupCriterionSimulationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupCriterionSimulationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupCriterionSimulationPath', () => {
                const result = client.adGroupCriterionSimulationPath("customerValue", "adGroupCriterionSimulationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupCriterionSimulationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdGroupCriterionSimulationName', () => {
                const result = client.matchCustomerFromAdGroupCriterionSimulationName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adGroupCriterionSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupCriterionSimulationFromAdGroupCriterionSimulationName', () => {
                const result = client.matchAdGroupCriterionSimulationFromAdGroupCriterionSimulationName(fakePath);
                assert.strictEqual(result, "adGroupCriterionSimulationValue");
                assert((client.pathTemplates.adGroupCriterionSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupExtensionSetting', () => {
            const fakePath = "/rendered/path/adGroupExtensionSetting";
            const expectedParameters = {
                customer: "customerValue",
                ad_group_extension_setting: "adGroupExtensionSettingValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupExtensionSettingPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupExtensionSettingPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupExtensionSettingPath', () => {
                const result = client.adGroupExtensionSettingPath("customerValue", "adGroupExtensionSettingValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupExtensionSettingPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdGroupExtensionSettingName', () => {
                const result = client.matchCustomerFromAdGroupExtensionSettingName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adGroupExtensionSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupExtensionSettingFromAdGroupExtensionSettingName', () => {
                const result = client.matchAdGroupExtensionSettingFromAdGroupExtensionSettingName(fakePath);
                assert.strictEqual(result, "adGroupExtensionSettingValue");
                assert((client.pathTemplates.adGroupExtensionSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupFeed', () => {
            const fakePath = "/rendered/path/adGroupFeed";
            const expectedParameters = {
                customer: "customerValue",
                ad_group_feed: "adGroupFeedValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupFeedPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupFeedPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupFeedPath', () => {
                const result = client.adGroupFeedPath("customerValue", "adGroupFeedValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupFeedPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdGroupFeedName', () => {
                const result = client.matchCustomerFromAdGroupFeedName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adGroupFeedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupFeedFromAdGroupFeedName', () => {
                const result = client.matchAdGroupFeedFromAdGroupFeedName(fakePath);
                assert.strictEqual(result, "adGroupFeedValue");
                assert((client.pathTemplates.adGroupFeedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupLabel', () => {
            const fakePath = "/rendered/path/adGroupLabel";
            const expectedParameters = {
                customer: "customerValue",
                ad_group_label: "adGroupLabelValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupLabelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupLabelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupLabelPath', () => {
                const result = client.adGroupLabelPath("customerValue", "adGroupLabelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupLabelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdGroupLabelName', () => {
                const result = client.matchCustomerFromAdGroupLabelName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adGroupLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupLabelFromAdGroupLabelName', () => {
                const result = client.matchAdGroupLabelFromAdGroupLabelName(fakePath);
                assert.strictEqual(result, "adGroupLabelValue");
                assert((client.pathTemplates.adGroupLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupSimulation', () => {
            const fakePath = "/rendered/path/adGroupSimulation";
            const expectedParameters = {
                customer: "customerValue",
                ad_group_simulation: "adGroupSimulationValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupSimulationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupSimulationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupSimulationPath', () => {
                const result = client.adGroupSimulationPath("customerValue", "adGroupSimulationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupSimulationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdGroupSimulationName', () => {
                const result = client.matchCustomerFromAdGroupSimulationName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adGroupSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupSimulationFromAdGroupSimulationName', () => {
                const result = client.matchAdGroupSimulationFromAdGroupSimulationName(fakePath);
                assert.strictEqual(result, "adGroupSimulationValue");
                assert((client.pathTemplates.adGroupSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adParameter', () => {
            const fakePath = "/rendered/path/adParameter";
            const expectedParameters = {
                customer: "customerValue",
                ad_parameter: "adParameterValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adParameterPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adParameterPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adParameterPath', () => {
                const result = client.adParameterPath("customerValue", "adParameterValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adParameterPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdParameterName', () => {
                const result = client.matchCustomerFromAdParameterName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adParameterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdParameterFromAdParameterName', () => {
                const result = client.matchAdParameterFromAdParameterName(fakePath);
                assert.strictEqual(result, "adParameterValue");
                assert((client.pathTemplates.adParameterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adScheduleView', () => {
            const fakePath = "/rendered/path/adScheduleView";
            const expectedParameters = {
                customer: "customerValue",
                ad_schedule_view: "adScheduleViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adScheduleViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adScheduleViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adScheduleViewPath', () => {
                const result = client.adScheduleViewPath("customerValue", "adScheduleViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adScheduleViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAdScheduleViewName', () => {
                const result = client.matchCustomerFromAdScheduleViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.adScheduleViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdScheduleViewFromAdScheduleViewName', () => {
                const result = client.matchAdScheduleViewFromAdScheduleViewName(fakePath);
                assert.strictEqual(result, "adScheduleViewValue");
                assert((client.pathTemplates.adScheduleViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('ageRangeView', () => {
            const fakePath = "/rendered/path/ageRangeView";
            const expectedParameters = {
                customer: "customerValue",
                age_range_view: "ageRangeViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.ageRangeViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.ageRangeViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('ageRangeViewPath', () => {
                const result = client.ageRangeViewPath("customerValue", "ageRangeViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.ageRangeViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAgeRangeViewName', () => {
                const result = client.matchCustomerFromAgeRangeViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.ageRangeViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAgeRangeViewFromAgeRangeViewName', () => {
                const result = client.matchAgeRangeViewFromAgeRangeViewName(fakePath);
                assert.strictEqual(result, "ageRangeViewValue");
                assert((client.pathTemplates.ageRangeViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('asset', () => {
            const fakePath = "/rendered/path/asset";
            const expectedParameters = {
                customer: "customerValue",
                asset: "assetValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetPath', () => {
                const result = client.assetPath("customerValue", "assetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromAssetName', () => {
                const result = client.matchCustomerFromAssetName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetFromAssetName', () => {
                const result = client.matchAssetFromAssetName(fakePath);
                assert.strictEqual(result, "assetValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('biddingStrategy', () => {
            const fakePath = "/rendered/path/biddingStrategy";
            const expectedParameters = {
                customer: "customerValue",
                bidding_strategy: "biddingStrategyValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.biddingStrategyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.biddingStrategyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('biddingStrategyPath', () => {
                const result = client.biddingStrategyPath("customerValue", "biddingStrategyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.biddingStrategyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromBiddingStrategyName', () => {
                const result = client.matchCustomerFromBiddingStrategyName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.biddingStrategyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBiddingStrategyFromBiddingStrategyName', () => {
                const result = client.matchBiddingStrategyFromBiddingStrategyName(fakePath);
                assert.strictEqual(result, "biddingStrategyValue");
                assert((client.pathTemplates.biddingStrategyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('billingSetup', () => {
            const fakePath = "/rendered/path/billingSetup";
            const expectedParameters = {
                customer: "customerValue",
                billing_setup: "billingSetupValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.billingSetupPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.billingSetupPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('billingSetupPath', () => {
                const result = client.billingSetupPath("customerValue", "billingSetupValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.billingSetupPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromBillingSetupName', () => {
                const result = client.matchCustomerFromBillingSetupName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.billingSetupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBillingSetupFromBillingSetupName', () => {
                const result = client.matchBillingSetupFromBillingSetupName(fakePath);
                assert.strictEqual(result, "billingSetupValue");
                assert((client.pathTemplates.billingSetupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaign', () => {
            const fakePath = "/rendered/path/campaign";
            const expectedParameters = {
                customer: "customerValue",
                campaign: "campaignValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignPath', () => {
                const result = client.campaignPath("customerValue", "campaignValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCampaignName', () => {
                const result = client.matchCustomerFromCampaignName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.campaignPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignFromCampaignName', () => {
                const result = client.matchCampaignFromCampaignName(fakePath);
                assert.strictEqual(result, "campaignValue");
                assert((client.pathTemplates.campaignPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignAudienceView', () => {
            const fakePath = "/rendered/path/campaignAudienceView";
            const expectedParameters = {
                customer: "customerValue",
                campaign_audience_view: "campaignAudienceViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignAudienceViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignAudienceViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignAudienceViewPath', () => {
                const result = client.campaignAudienceViewPath("customerValue", "campaignAudienceViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignAudienceViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCampaignAudienceViewName', () => {
                const result = client.matchCustomerFromCampaignAudienceViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.campaignAudienceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignAudienceViewFromCampaignAudienceViewName', () => {
                const result = client.matchCampaignAudienceViewFromCampaignAudienceViewName(fakePath);
                assert.strictEqual(result, "campaignAudienceViewValue");
                assert((client.pathTemplates.campaignAudienceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignBidModifier', () => {
            const fakePath = "/rendered/path/campaignBidModifier";
            const expectedParameters = {
                customer: "customerValue",
                campaign_bid_modifier: "campaignBidModifierValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignBidModifierPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignBidModifierPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignBidModifierPath', () => {
                const result = client.campaignBidModifierPath("customerValue", "campaignBidModifierValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignBidModifierPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCampaignBidModifierName', () => {
                const result = client.matchCustomerFromCampaignBidModifierName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.campaignBidModifierPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignBidModifierFromCampaignBidModifierName', () => {
                const result = client.matchCampaignBidModifierFromCampaignBidModifierName(fakePath);
                assert.strictEqual(result, "campaignBidModifierValue");
                assert((client.pathTemplates.campaignBidModifierPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignBudget', () => {
            const fakePath = "/rendered/path/campaignBudget";
            const expectedParameters = {
                customer: "customerValue",
                campaign_budget: "campaignBudgetValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignBudgetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignBudgetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignBudgetPath', () => {
                const result = client.campaignBudgetPath("customerValue", "campaignBudgetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignBudgetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCampaignBudgetName', () => {
                const result = client.matchCustomerFromCampaignBudgetName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.campaignBudgetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignBudgetFromCampaignBudgetName', () => {
                const result = client.matchCampaignBudgetFromCampaignBudgetName(fakePath);
                assert.strictEqual(result, "campaignBudgetValue");
                assert((client.pathTemplates.campaignBudgetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignCriterion', () => {
            const fakePath = "/rendered/path/campaignCriterion";
            const expectedParameters = {
                customer: "customerValue",
                campaign_criterion: "campaignCriterionValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignCriterionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignCriterionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignCriterionPath', () => {
                const result = client.campaignCriterionPath("customerValue", "campaignCriterionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignCriterionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCampaignCriterionName', () => {
                const result = client.matchCustomerFromCampaignCriterionName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.campaignCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignCriterionFromCampaignCriterionName', () => {
                const result = client.matchCampaignCriterionFromCampaignCriterionName(fakePath);
                assert.strictEqual(result, "campaignCriterionValue");
                assert((client.pathTemplates.campaignCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignCriterionSimulation', () => {
            const fakePath = "/rendered/path/campaignCriterionSimulation";
            const expectedParameters = {
                customer: "customerValue",
                campaign_criterion_simulation: "campaignCriterionSimulationValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignCriterionSimulationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignCriterionSimulationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignCriterionSimulationPath', () => {
                const result = client.campaignCriterionSimulationPath("customerValue", "campaignCriterionSimulationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignCriterionSimulationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCampaignCriterionSimulationName', () => {
                const result = client.matchCustomerFromCampaignCriterionSimulationName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.campaignCriterionSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignCriterionSimulationFromCampaignCriterionSimulationName', () => {
                const result = client.matchCampaignCriterionSimulationFromCampaignCriterionSimulationName(fakePath);
                assert.strictEqual(result, "campaignCriterionSimulationValue");
                assert((client.pathTemplates.campaignCriterionSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignDraft', () => {
            const fakePath = "/rendered/path/campaignDraft";
            const expectedParameters = {
                customer: "customerValue",
                campaign_draft: "campaignDraftValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignDraftPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignDraftPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignDraftPath', () => {
                const result = client.campaignDraftPath("customerValue", "campaignDraftValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignDraftPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCampaignDraftName', () => {
                const result = client.matchCustomerFromCampaignDraftName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.campaignDraftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignDraftFromCampaignDraftName', () => {
                const result = client.matchCampaignDraftFromCampaignDraftName(fakePath);
                assert.strictEqual(result, "campaignDraftValue");
                assert((client.pathTemplates.campaignDraftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignExperiment', () => {
            const fakePath = "/rendered/path/campaignExperiment";
            const expectedParameters = {
                customer: "customerValue",
                campaign_experiment: "campaignExperimentValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignExperimentPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignExperimentPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignExperimentPath', () => {
                const result = client.campaignExperimentPath("customerValue", "campaignExperimentValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignExperimentPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCampaignExperimentName', () => {
                const result = client.matchCustomerFromCampaignExperimentName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.campaignExperimentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignExperimentFromCampaignExperimentName', () => {
                const result = client.matchCampaignExperimentFromCampaignExperimentName(fakePath);
                assert.strictEqual(result, "campaignExperimentValue");
                assert((client.pathTemplates.campaignExperimentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignExtensionSetting', () => {
            const fakePath = "/rendered/path/campaignExtensionSetting";
            const expectedParameters = {
                customer: "customerValue",
                campaign_extension_setting: "campaignExtensionSettingValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignExtensionSettingPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignExtensionSettingPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignExtensionSettingPath', () => {
                const result = client.campaignExtensionSettingPath("customerValue", "campaignExtensionSettingValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignExtensionSettingPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCampaignExtensionSettingName', () => {
                const result = client.matchCustomerFromCampaignExtensionSettingName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.campaignExtensionSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignExtensionSettingFromCampaignExtensionSettingName', () => {
                const result = client.matchCampaignExtensionSettingFromCampaignExtensionSettingName(fakePath);
                assert.strictEqual(result, "campaignExtensionSettingValue");
                assert((client.pathTemplates.campaignExtensionSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignFeed', () => {
            const fakePath = "/rendered/path/campaignFeed";
            const expectedParameters = {
                customer: "customerValue",
                campaign_feed: "campaignFeedValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignFeedPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignFeedPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignFeedPath', () => {
                const result = client.campaignFeedPath("customerValue", "campaignFeedValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignFeedPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCampaignFeedName', () => {
                const result = client.matchCustomerFromCampaignFeedName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.campaignFeedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignFeedFromCampaignFeedName', () => {
                const result = client.matchCampaignFeedFromCampaignFeedName(fakePath);
                assert.strictEqual(result, "campaignFeedValue");
                assert((client.pathTemplates.campaignFeedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignLabel', () => {
            const fakePath = "/rendered/path/campaignLabel";
            const expectedParameters = {
                customer: "customerValue",
                campaign_label: "campaignLabelValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignLabelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignLabelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignLabelPath', () => {
                const result = client.campaignLabelPath("customerValue", "campaignLabelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignLabelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCampaignLabelName', () => {
                const result = client.matchCustomerFromCampaignLabelName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.campaignLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignLabelFromCampaignLabelName', () => {
                const result = client.matchCampaignLabelFromCampaignLabelName(fakePath);
                assert.strictEqual(result, "campaignLabelValue");
                assert((client.pathTemplates.campaignLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignSharedSet', () => {
            const fakePath = "/rendered/path/campaignSharedSet";
            const expectedParameters = {
                customer: "customerValue",
                campaign_shared_set: "campaignSharedSetValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignSharedSetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignSharedSetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignSharedSetPath', () => {
                const result = client.campaignSharedSetPath("customerValue", "campaignSharedSetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignSharedSetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCampaignSharedSetName', () => {
                const result = client.matchCustomerFromCampaignSharedSetName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.campaignSharedSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignSharedSetFromCampaignSharedSetName', () => {
                const result = client.matchCampaignSharedSetFromCampaignSharedSetName(fakePath);
                assert.strictEqual(result, "campaignSharedSetValue");
                assert((client.pathTemplates.campaignSharedSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('carrierConstant', () => {
            const fakePath = "/rendered/path/carrierConstant";
            const expectedParameters = {
                carrier_constant: "carrierConstantValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.carrierConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.carrierConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('carrierConstantPath', () => {
                const result = client.carrierConstantPath("carrierConstantValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.carrierConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCarrierConstantFromCarrierConstantName', () => {
                const result = client.matchCarrierConstantFromCarrierConstantName(fakePath);
                assert.strictEqual(result, "carrierConstantValue");
                assert((client.pathTemplates.carrierConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('changeStatus', () => {
            const fakePath = "/rendered/path/changeStatus";
            const expectedParameters = {
                customer: "customerValue",
                change_status: "changeStatusValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.changeStatusPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.changeStatusPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('changeStatusPath', () => {
                const result = client.changeStatusPath("customerValue", "changeStatusValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.changeStatusPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromChangeStatusName', () => {
                const result = client.matchCustomerFromChangeStatusName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.changeStatusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchChangeStatusFromChangeStatusName', () => {
                const result = client.matchChangeStatusFromChangeStatusName(fakePath);
                assert.strictEqual(result, "changeStatusValue");
                assert((client.pathTemplates.changeStatusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('clickView', () => {
            const fakePath = "/rendered/path/clickView";
            const expectedParameters = {
                customer: "customerValue",
                click_view: "clickViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.clickViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.clickViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('clickViewPath', () => {
                const result = client.clickViewPath("customerValue", "clickViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.clickViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromClickViewName', () => {
                const result = client.matchCustomerFromClickViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.clickViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClickViewFromClickViewName', () => {
                const result = client.matchClickViewFromClickViewName(fakePath);
                assert.strictEqual(result, "clickViewValue");
                assert((client.pathTemplates.clickViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('conversionAction', () => {
            const fakePath = "/rendered/path/conversionAction";
            const expectedParameters = {
                customer: "customerValue",
                conversion_action: "conversionActionValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.conversionActionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.conversionActionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('conversionActionPath', () => {
                const result = client.conversionActionPath("customerValue", "conversionActionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.conversionActionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromConversionActionName', () => {
                const result = client.matchCustomerFromConversionActionName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.conversionActionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchConversionActionFromConversionActionName', () => {
                const result = client.matchConversionActionFromConversionActionName(fakePath);
                assert.strictEqual(result, "conversionActionValue");
                assert((client.pathTemplates.conversionActionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('currencyConstant', () => {
            const fakePath = "/rendered/path/currencyConstant";
            const expectedParameters = {
                currency_constant: "currencyConstantValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.currencyConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.currencyConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('currencyConstantPath', () => {
                const result = client.currencyConstantPath("currencyConstantValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.currencyConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCurrencyConstantFromCurrencyConstantName', () => {
                const result = client.matchCurrencyConstantFromCurrencyConstantName(fakePath);
                assert.strictEqual(result, "currencyConstantValue");
                assert((client.pathTemplates.currencyConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customInterest', () => {
            const fakePath = "/rendered/path/customInterest";
            const expectedParameters = {
                customer: "customerValue",
                custom_interest: "customInterestValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customInterestPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customInterestPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customInterestPath', () => {
                const result = client.customInterestPath("customerValue", "customInterestValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customInterestPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCustomInterestName', () => {
                const result = client.matchCustomerFromCustomInterestName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.customInterestPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomInterestFromCustomInterestName', () => {
                const result = client.matchCustomInterestFromCustomInterestName(fakePath);
                assert.strictEqual(result, "customInterestValue");
                assert((client.pathTemplates.customInterestPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customer', () => {
            const fakePath = "/rendered/path/customer";
            const expectedParameters = {
                customer: "customerValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerPath', () => {
                const result = client.customerPath("customerValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCustomerName', () => {
                const result = client.matchCustomerFromCustomerName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.customerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerClient', () => {
            const fakePath = "/rendered/path/customerClient";
            const expectedParameters = {
                customer: "customerValue",
                customer_client: "customerClientValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerClientPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerClientPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerClientPath', () => {
                const result = client.customerClientPath("customerValue", "customerClientValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerClientPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCustomerClientName', () => {
                const result = client.matchCustomerFromCustomerClientName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.customerClientPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomerClientFromCustomerClientName', () => {
                const result = client.matchCustomerClientFromCustomerClientName(fakePath);
                assert.strictEqual(result, "customerClientValue");
                assert((client.pathTemplates.customerClientPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerClientLink', () => {
            const fakePath = "/rendered/path/customerClientLink";
            const expectedParameters = {
                customer: "customerValue",
                customer_client_link: "customerClientLinkValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerClientLinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerClientLinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerClientLinkPath', () => {
                const result = client.customerClientLinkPath("customerValue", "customerClientLinkValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerClientLinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCustomerClientLinkName', () => {
                const result = client.matchCustomerFromCustomerClientLinkName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.customerClientLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomerClientLinkFromCustomerClientLinkName', () => {
                const result = client.matchCustomerClientLinkFromCustomerClientLinkName(fakePath);
                assert.strictEqual(result, "customerClientLinkValue");
                assert((client.pathTemplates.customerClientLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerExtensionSetting', () => {
            const fakePath = "/rendered/path/customerExtensionSetting";
            const expectedParameters = {
                customer: "customerValue",
                customer_extension_setting: "customerExtensionSettingValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerExtensionSettingPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerExtensionSettingPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerExtensionSettingPath', () => {
                const result = client.customerExtensionSettingPath("customerValue", "customerExtensionSettingValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerExtensionSettingPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCustomerExtensionSettingName', () => {
                const result = client.matchCustomerFromCustomerExtensionSettingName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.customerExtensionSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomerExtensionSettingFromCustomerExtensionSettingName', () => {
                const result = client.matchCustomerExtensionSettingFromCustomerExtensionSettingName(fakePath);
                assert.strictEqual(result, "customerExtensionSettingValue");
                assert((client.pathTemplates.customerExtensionSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerFeed', () => {
            const fakePath = "/rendered/path/customerFeed";
            const expectedParameters = {
                customer: "customerValue",
                customer_feed: "customerFeedValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerFeedPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerFeedPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerFeedPath', () => {
                const result = client.customerFeedPath("customerValue", "customerFeedValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerFeedPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCustomerFeedName', () => {
                const result = client.matchCustomerFromCustomerFeedName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.customerFeedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomerFeedFromCustomerFeedName', () => {
                const result = client.matchCustomerFeedFromCustomerFeedName(fakePath);
                assert.strictEqual(result, "customerFeedValue");
                assert((client.pathTemplates.customerFeedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerLabel', () => {
            const fakePath = "/rendered/path/customerLabel";
            const expectedParameters = {
                customer: "customerValue",
                customer_label: "customerLabelValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerLabelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerLabelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerLabelPath', () => {
                const result = client.customerLabelPath("customerValue", "customerLabelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerLabelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCustomerLabelName', () => {
                const result = client.matchCustomerFromCustomerLabelName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.customerLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomerLabelFromCustomerLabelName', () => {
                const result = client.matchCustomerLabelFromCustomerLabelName(fakePath);
                assert.strictEqual(result, "customerLabelValue");
                assert((client.pathTemplates.customerLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerManagerLink', () => {
            const fakePath = "/rendered/path/customerManagerLink";
            const expectedParameters = {
                customer: "customerValue",
                customer_manager_link: "customerManagerLinkValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerManagerLinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerManagerLinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerManagerLinkPath', () => {
                const result = client.customerManagerLinkPath("customerValue", "customerManagerLinkValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerManagerLinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCustomerManagerLinkName', () => {
                const result = client.matchCustomerFromCustomerManagerLinkName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.customerManagerLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomerManagerLinkFromCustomerManagerLinkName', () => {
                const result = client.matchCustomerManagerLinkFromCustomerManagerLinkName(fakePath);
                assert.strictEqual(result, "customerManagerLinkValue");
                assert((client.pathTemplates.customerManagerLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerNegativeCriterion', () => {
            const fakePath = "/rendered/path/customerNegativeCriterion";
            const expectedParameters = {
                customer: "customerValue",
                customer_negative_criterion: "customerNegativeCriterionValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerNegativeCriterionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerNegativeCriterionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerNegativeCriterionPath', () => {
                const result = client.customerNegativeCriterionPath("customerValue", "customerNegativeCriterionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerNegativeCriterionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromCustomerNegativeCriterionName', () => {
                const result = client.matchCustomerFromCustomerNegativeCriterionName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.customerNegativeCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomerNegativeCriterionFromCustomerNegativeCriterionName', () => {
                const result = client.matchCustomerNegativeCriterionFromCustomerNegativeCriterionName(fakePath);
                assert.strictEqual(result, "customerNegativeCriterionValue");
                assert((client.pathTemplates.customerNegativeCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('detailPlacementView', () => {
            const fakePath = "/rendered/path/detailPlacementView";
            const expectedParameters = {
                customer: "customerValue",
                detail_placement_view: "detailPlacementViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.detailPlacementViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.detailPlacementViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('detailPlacementViewPath', () => {
                const result = client.detailPlacementViewPath("customerValue", "detailPlacementViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.detailPlacementViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromDetailPlacementViewName', () => {
                const result = client.matchCustomerFromDetailPlacementViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.detailPlacementViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDetailPlacementViewFromDetailPlacementViewName', () => {
                const result = client.matchDetailPlacementViewFromDetailPlacementViewName(fakePath);
                assert.strictEqual(result, "detailPlacementViewValue");
                assert((client.pathTemplates.detailPlacementViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('displayKeywordView', () => {
            const fakePath = "/rendered/path/displayKeywordView";
            const expectedParameters = {
                customer: "customerValue",
                display_keyword_view: "displayKeywordViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.displayKeywordViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.displayKeywordViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('displayKeywordViewPath', () => {
                const result = client.displayKeywordViewPath("customerValue", "displayKeywordViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.displayKeywordViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromDisplayKeywordViewName', () => {
                const result = client.matchCustomerFromDisplayKeywordViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.displayKeywordViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDisplayKeywordViewFromDisplayKeywordViewName', () => {
                const result = client.matchDisplayKeywordViewFromDisplayKeywordViewName(fakePath);
                assert.strictEqual(result, "displayKeywordViewValue");
                assert((client.pathTemplates.displayKeywordViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('distanceView', () => {
            const fakePath = "/rendered/path/distanceView";
            const expectedParameters = {
                customer: "customerValue",
                distance_view: "distanceViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.distanceViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.distanceViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('distanceViewPath', () => {
                const result = client.distanceViewPath("customerValue", "distanceViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.distanceViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromDistanceViewName', () => {
                const result = client.matchCustomerFromDistanceViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.distanceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDistanceViewFromDistanceViewName', () => {
                const result = client.matchDistanceViewFromDistanceViewName(fakePath);
                assert.strictEqual(result, "distanceViewValue");
                assert((client.pathTemplates.distanceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('domainCategory', () => {
            const fakePath = "/rendered/path/domainCategory";
            const expectedParameters = {
                customer: "customerValue",
                domain_category: "domainCategoryValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.domainCategoryPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.domainCategoryPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('domainCategoryPath', () => {
                const result = client.domainCategoryPath("customerValue", "domainCategoryValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.domainCategoryPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromDomainCategoryName', () => {
                const result = client.matchCustomerFromDomainCategoryName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.domainCategoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDomainCategoryFromDomainCategoryName', () => {
                const result = client.matchDomainCategoryFromDomainCategoryName(fakePath);
                assert.strictEqual(result, "domainCategoryValue");
                assert((client.pathTemplates.domainCategoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dynamicSearchAdsSearchTermView', () => {
            const fakePath = "/rendered/path/dynamicSearchAdsSearchTermView";
            const expectedParameters = {
                customer: "customerValue",
                dynamic_search_ads_search_term_view: "dynamicSearchAdsSearchTermViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dynamicSearchAdsSearchTermViewPath', () => {
                const result = client.dynamicSearchAdsSearchTermViewPath("customerValue", "dynamicSearchAdsSearchTermViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromDynamicSearchAdsSearchTermViewName', () => {
                const result = client.matchCustomerFromDynamicSearchAdsSearchTermViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDynamicSearchAdsSearchTermViewFromDynamicSearchAdsSearchTermViewName', () => {
                const result = client.matchDynamicSearchAdsSearchTermViewFromDynamicSearchAdsSearchTermViewName(fakePath);
                assert.strictEqual(result, "dynamicSearchAdsSearchTermViewValue");
                assert((client.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('expandedLandingPageView', () => {
            const fakePath = "/rendered/path/expandedLandingPageView";
            const expectedParameters = {
                customer: "customerValue",
                expanded_landing_page_view: "expandedLandingPageViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.expandedLandingPageViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.expandedLandingPageViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('expandedLandingPageViewPath', () => {
                const result = client.expandedLandingPageViewPath("customerValue", "expandedLandingPageViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.expandedLandingPageViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromExpandedLandingPageViewName', () => {
                const result = client.matchCustomerFromExpandedLandingPageViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.expandedLandingPageViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExpandedLandingPageViewFromExpandedLandingPageViewName', () => {
                const result = client.matchExpandedLandingPageViewFromExpandedLandingPageViewName(fakePath);
                assert.strictEqual(result, "expandedLandingPageViewValue");
                assert((client.pathTemplates.expandedLandingPageViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('extensionFeedItem', () => {
            const fakePath = "/rendered/path/extensionFeedItem";
            const expectedParameters = {
                customer: "customerValue",
                extension_feed_item: "extensionFeedItemValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.extensionFeedItemPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.extensionFeedItemPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('extensionFeedItemPath', () => {
                const result = client.extensionFeedItemPath("customerValue", "extensionFeedItemValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.extensionFeedItemPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromExtensionFeedItemName', () => {
                const result = client.matchCustomerFromExtensionFeedItemName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.extensionFeedItemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExtensionFeedItemFromExtensionFeedItemName', () => {
                const result = client.matchExtensionFeedItemFromExtensionFeedItemName(fakePath);
                assert.strictEqual(result, "extensionFeedItemValue");
                assert((client.pathTemplates.extensionFeedItemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('feed', () => {
            const fakePath = "/rendered/path/feed";
            const expectedParameters = {
                customer: "customerValue",
                feed: "feedValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.feedPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.feedPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('feedPath', () => {
                const result = client.feedPath("customerValue", "feedValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.feedPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromFeedName', () => {
                const result = client.matchCustomerFromFeedName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.feedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedFromFeedName', () => {
                const result = client.matchFeedFromFeedName(fakePath);
                assert.strictEqual(result, "feedValue");
                assert((client.pathTemplates.feedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('feedItem', () => {
            const fakePath = "/rendered/path/feedItem";
            const expectedParameters = {
                customer: "customerValue",
                feed_item: "feedItemValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.feedItemPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.feedItemPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('feedItemPath', () => {
                const result = client.feedItemPath("customerValue", "feedItemValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.feedItemPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromFeedItemName', () => {
                const result = client.matchCustomerFromFeedItemName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.feedItemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedItemFromFeedItemName', () => {
                const result = client.matchFeedItemFromFeedItemName(fakePath);
                assert.strictEqual(result, "feedItemValue");
                assert((client.pathTemplates.feedItemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('feedItemTarget', () => {
            const fakePath = "/rendered/path/feedItemTarget";
            const expectedParameters = {
                customer: "customerValue",
                feed_item_target: "feedItemTargetValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.feedItemTargetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.feedItemTargetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('feedItemTargetPath', () => {
                const result = client.feedItemTargetPath("customerValue", "feedItemTargetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.feedItemTargetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromFeedItemTargetName', () => {
                const result = client.matchCustomerFromFeedItemTargetName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.feedItemTargetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedItemTargetFromFeedItemTargetName', () => {
                const result = client.matchFeedItemTargetFromFeedItemTargetName(fakePath);
                assert.strictEqual(result, "feedItemTargetValue");
                assert((client.pathTemplates.feedItemTargetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('feedMapping', () => {
            const fakePath = "/rendered/path/feedMapping";
            const expectedParameters = {
                customer: "customerValue",
                feed_mapping: "feedMappingValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.feedMappingPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.feedMappingPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('feedMappingPath', () => {
                const result = client.feedMappingPath("customerValue", "feedMappingValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.feedMappingPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromFeedMappingName', () => {
                const result = client.matchCustomerFromFeedMappingName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.feedMappingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedMappingFromFeedMappingName', () => {
                const result = client.matchFeedMappingFromFeedMappingName(fakePath);
                assert.strictEqual(result, "feedMappingValue");
                assert((client.pathTemplates.feedMappingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('feedPlaceholderView', () => {
            const fakePath = "/rendered/path/feedPlaceholderView";
            const expectedParameters = {
                customer: "customerValue",
                feed_placeholder_view: "feedPlaceholderViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.feedPlaceholderViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.feedPlaceholderViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('feedPlaceholderViewPath', () => {
                const result = client.feedPlaceholderViewPath("customerValue", "feedPlaceholderViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.feedPlaceholderViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromFeedPlaceholderViewName', () => {
                const result = client.matchCustomerFromFeedPlaceholderViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.feedPlaceholderViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedPlaceholderViewFromFeedPlaceholderViewName', () => {
                const result = client.matchFeedPlaceholderViewFromFeedPlaceholderViewName(fakePath);
                assert.strictEqual(result, "feedPlaceholderViewValue");
                assert((client.pathTemplates.feedPlaceholderViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('genderView', () => {
            const fakePath = "/rendered/path/genderView";
            const expectedParameters = {
                customer: "customerValue",
                gender_view: "genderViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.genderViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.genderViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('genderViewPath', () => {
                const result = client.genderViewPath("customerValue", "genderViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.genderViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromGenderViewName', () => {
                const result = client.matchCustomerFromGenderViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.genderViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchGenderViewFromGenderViewName', () => {
                const result = client.matchGenderViewFromGenderViewName(fakePath);
                assert.strictEqual(result, "genderViewValue");
                assert((client.pathTemplates.genderViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('geoTargetConstant', () => {
            const fakePath = "/rendered/path/geoTargetConstant";
            const expectedParameters = {
                geo_target_constant: "geoTargetConstantValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.geoTargetConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.geoTargetConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('geoTargetConstantPath', () => {
                const result = client.geoTargetConstantPath("geoTargetConstantValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.geoTargetConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchGeoTargetConstantFromGeoTargetConstantName', () => {
                const result = client.matchGeoTargetConstantFromGeoTargetConstantName(fakePath);
                assert.strictEqual(result, "geoTargetConstantValue");
                assert((client.pathTemplates.geoTargetConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('geographicView', () => {
            const fakePath = "/rendered/path/geographicView";
            const expectedParameters = {
                customer: "customerValue",
                geographic_view: "geographicViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.geographicViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.geographicViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('geographicViewPath', () => {
                const result = client.geographicViewPath("customerValue", "geographicViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.geographicViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromGeographicViewName', () => {
                const result = client.matchCustomerFromGeographicViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.geographicViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchGeographicViewFromGeographicViewName', () => {
                const result = client.matchGeographicViewFromGeographicViewName(fakePath);
                assert.strictEqual(result, "geographicViewValue");
                assert((client.pathTemplates.geographicViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('googleAdsField', () => {
            const fakePath = "/rendered/path/googleAdsField";
            const expectedParameters = {
                google_ads_field: "googleAdsFieldValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.googleAdsFieldPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.googleAdsFieldPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('googleAdsFieldPath', () => {
                const result = client.googleAdsFieldPath("googleAdsFieldValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.googleAdsFieldPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchGoogleAdsFieldFromGoogleAdsFieldName', () => {
                const result = client.matchGoogleAdsFieldFromGoogleAdsFieldName(fakePath);
                assert.strictEqual(result, "googleAdsFieldValue");
                assert((client.pathTemplates.googleAdsFieldPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('groupPlacementView', () => {
            const fakePath = "/rendered/path/groupPlacementView";
            const expectedParameters = {
                customer: "customerValue",
                group_placement_view: "groupPlacementViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.groupPlacementViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.groupPlacementViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('groupPlacementViewPath', () => {
                const result = client.groupPlacementViewPath("customerValue", "groupPlacementViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.groupPlacementViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromGroupPlacementViewName', () => {
                const result = client.matchCustomerFromGroupPlacementViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.groupPlacementViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchGroupPlacementViewFromGroupPlacementViewName', () => {
                const result = client.matchGroupPlacementViewFromGroupPlacementViewName(fakePath);
                assert.strictEqual(result, "groupPlacementViewValue");
                assert((client.pathTemplates.groupPlacementViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('hotelGroupView', () => {
            const fakePath = "/rendered/path/hotelGroupView";
            const expectedParameters = {
                customer: "customerValue",
                hotel_group_view: "hotelGroupViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.hotelGroupViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.hotelGroupViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('hotelGroupViewPath', () => {
                const result = client.hotelGroupViewPath("customerValue", "hotelGroupViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.hotelGroupViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromHotelGroupViewName', () => {
                const result = client.matchCustomerFromHotelGroupViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.hotelGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchHotelGroupViewFromHotelGroupViewName', () => {
                const result = client.matchHotelGroupViewFromHotelGroupViewName(fakePath);
                assert.strictEqual(result, "hotelGroupViewValue");
                assert((client.pathTemplates.hotelGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('hotelPerformanceView', () => {
            const fakePath = "/rendered/path/hotelPerformanceView";
            const expectedParameters = {
                customer: "customerValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.hotelPerformanceViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.hotelPerformanceViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('hotelPerformanceViewPath', () => {
                const result = client.hotelPerformanceViewPath("customerValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.hotelPerformanceViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromHotelPerformanceViewName', () => {
                const result = client.matchCustomerFromHotelPerformanceViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.hotelPerformanceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('invoice', () => {
            const fakePath = "/rendered/path/invoice";
            const expectedParameters = {
                customer: "customerValue",
                invoice: "invoiceValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.invoicePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.invoicePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('invoicePath', () => {
                const result = client.invoicePath("customerValue", "invoiceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.invoicePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromInvoiceName', () => {
                const result = client.matchCustomerFromInvoiceName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.invoicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInvoiceFromInvoiceName', () => {
                const result = client.matchInvoiceFromInvoiceName(fakePath);
                assert.strictEqual(result, "invoiceValue");
                assert((client.pathTemplates.invoicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('keywordPlan', () => {
            const fakePath = "/rendered/path/keywordPlan";
            const expectedParameters = {
                customer: "customerValue",
                keyword_plan: "keywordPlanValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.keywordPlanPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.keywordPlanPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('keywordPlanPath', () => {
                const result = client.keywordPlanPath("customerValue", "keywordPlanValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.keywordPlanPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromKeywordPlanName', () => {
                const result = client.matchCustomerFromKeywordPlanName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.keywordPlanPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeywordPlanFromKeywordPlanName', () => {
                const result = client.matchKeywordPlanFromKeywordPlanName(fakePath);
                assert.strictEqual(result, "keywordPlanValue");
                assert((client.pathTemplates.keywordPlanPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('keywordPlanAdGroup', () => {
            const fakePath = "/rendered/path/keywordPlanAdGroup";
            const expectedParameters = {
                customer: "customerValue",
                keyword_plan_ad_group: "keywordPlanAdGroupValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.keywordPlanAdGroupPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.keywordPlanAdGroupPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('keywordPlanAdGroupPath', () => {
                const result = client.keywordPlanAdGroupPath("customerValue", "keywordPlanAdGroupValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.keywordPlanAdGroupPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromKeywordPlanAdGroupName', () => {
                const result = client.matchCustomerFromKeywordPlanAdGroupName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.keywordPlanAdGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeywordPlanAdGroupFromKeywordPlanAdGroupName', () => {
                const result = client.matchKeywordPlanAdGroupFromKeywordPlanAdGroupName(fakePath);
                assert.strictEqual(result, "keywordPlanAdGroupValue");
                assert((client.pathTemplates.keywordPlanAdGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('keywordPlanCampaign', () => {
            const fakePath = "/rendered/path/keywordPlanCampaign";
            const expectedParameters = {
                customer: "customerValue",
                keyword_plan_campaign: "keywordPlanCampaignValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.keywordPlanCampaignPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.keywordPlanCampaignPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('keywordPlanCampaignPath', () => {
                const result = client.keywordPlanCampaignPath("customerValue", "keywordPlanCampaignValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.keywordPlanCampaignPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromKeywordPlanCampaignName', () => {
                const result = client.matchCustomerFromKeywordPlanCampaignName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.keywordPlanCampaignPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeywordPlanCampaignFromKeywordPlanCampaignName', () => {
                const result = client.matchKeywordPlanCampaignFromKeywordPlanCampaignName(fakePath);
                assert.strictEqual(result, "keywordPlanCampaignValue");
                assert((client.pathTemplates.keywordPlanCampaignPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('keywordPlanKeyword', () => {
            const fakePath = "/rendered/path/keywordPlanKeyword";
            const expectedParameters = {
                customer: "customerValue",
                keyword_plan_keyword: "keywordPlanKeywordValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.keywordPlanKeywordPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.keywordPlanKeywordPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('keywordPlanKeywordPath', () => {
                const result = client.keywordPlanKeywordPath("customerValue", "keywordPlanKeywordValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.keywordPlanKeywordPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromKeywordPlanKeywordName', () => {
                const result = client.matchCustomerFromKeywordPlanKeywordName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.keywordPlanKeywordPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeywordPlanKeywordFromKeywordPlanKeywordName', () => {
                const result = client.matchKeywordPlanKeywordFromKeywordPlanKeywordName(fakePath);
                assert.strictEqual(result, "keywordPlanKeywordValue");
                assert((client.pathTemplates.keywordPlanKeywordPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('keywordPlanNegativeKeyword', () => {
            const fakePath = "/rendered/path/keywordPlanNegativeKeyword";
            const expectedParameters = {
                customer: "customerValue",
                keyword_plan_negative_keyword: "keywordPlanNegativeKeywordValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.keywordPlanNegativeKeywordPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.keywordPlanNegativeKeywordPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('keywordPlanNegativeKeywordPath', () => {
                const result = client.keywordPlanNegativeKeywordPath("customerValue", "keywordPlanNegativeKeywordValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.keywordPlanNegativeKeywordPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromKeywordPlanNegativeKeywordName', () => {
                const result = client.matchCustomerFromKeywordPlanNegativeKeywordName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.keywordPlanNegativeKeywordPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeywordPlanNegativeKeywordFromKeywordPlanNegativeKeywordName', () => {
                const result = client.matchKeywordPlanNegativeKeywordFromKeywordPlanNegativeKeywordName(fakePath);
                assert.strictEqual(result, "keywordPlanNegativeKeywordValue");
                assert((client.pathTemplates.keywordPlanNegativeKeywordPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('keywordView', () => {
            const fakePath = "/rendered/path/keywordView";
            const expectedParameters = {
                customer: "customerValue",
                keyword_view: "keywordViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.keywordViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.keywordViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('keywordViewPath', () => {
                const result = client.keywordViewPath("customerValue", "keywordViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.keywordViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromKeywordViewName', () => {
                const result = client.matchCustomerFromKeywordViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.keywordViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeywordViewFromKeywordViewName', () => {
                const result = client.matchKeywordViewFromKeywordViewName(fakePath);
                assert.strictEqual(result, "keywordViewValue");
                assert((client.pathTemplates.keywordViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('label', () => {
            const fakePath = "/rendered/path/label";
            const expectedParameters = {
                customer: "customerValue",
                label: "labelValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.labelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.labelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('labelPath', () => {
                const result = client.labelPath("customerValue", "labelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.labelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromLabelName', () => {
                const result = client.matchCustomerFromLabelName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.labelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLabelFromLabelName', () => {
                const result = client.matchLabelFromLabelName(fakePath);
                assert.strictEqual(result, "labelValue");
                assert((client.pathTemplates.labelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('landingPageView', () => {
            const fakePath = "/rendered/path/landingPageView";
            const expectedParameters = {
                customer: "customerValue",
                landing_page_view: "landingPageViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.landingPageViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.landingPageViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('landingPageViewPath', () => {
                const result = client.landingPageViewPath("customerValue", "landingPageViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.landingPageViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromLandingPageViewName', () => {
                const result = client.matchCustomerFromLandingPageViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.landingPageViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLandingPageViewFromLandingPageViewName', () => {
                const result = client.matchLandingPageViewFromLandingPageViewName(fakePath);
                assert.strictEqual(result, "landingPageViewValue");
                assert((client.pathTemplates.landingPageViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('languageConstant', () => {
            const fakePath = "/rendered/path/languageConstant";
            const expectedParameters = {
                language_constant: "languageConstantValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.languageConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.languageConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('languageConstantPath', () => {
                const result = client.languageConstantPath("languageConstantValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.languageConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchLanguageConstantFromLanguageConstantName', () => {
                const result = client.matchLanguageConstantFromLanguageConstantName(fakePath);
                assert.strictEqual(result, "languageConstantValue");
                assert((client.pathTemplates.languageConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('locationView', () => {
            const fakePath = "/rendered/path/locationView";
            const expectedParameters = {
                customer: "customerValue",
                location_view: "locationViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationViewPath', () => {
                const result = client.locationViewPath("customerValue", "locationViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromLocationViewName', () => {
                const result = client.matchCustomerFromLocationViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.locationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationViewFromLocationViewName', () => {
                const result = client.matchLocationViewFromLocationViewName(fakePath);
                assert.strictEqual(result, "locationViewValue");
                assert((client.pathTemplates.locationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('managedPlacementView', () => {
            const fakePath = "/rendered/path/managedPlacementView";
            const expectedParameters = {
                customer: "customerValue",
                managed_placement_view: "managedPlacementViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.managedPlacementViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.managedPlacementViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('managedPlacementViewPath', () => {
                const result = client.managedPlacementViewPath("customerValue", "managedPlacementViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.managedPlacementViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromManagedPlacementViewName', () => {
                const result = client.matchCustomerFromManagedPlacementViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.managedPlacementViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchManagedPlacementViewFromManagedPlacementViewName', () => {
                const result = client.matchManagedPlacementViewFromManagedPlacementViewName(fakePath);
                assert.strictEqual(result, "managedPlacementViewValue");
                assert((client.pathTemplates.managedPlacementViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('mediaFile', () => {
            const fakePath = "/rendered/path/mediaFile";
            const expectedParameters = {
                customer: "customerValue",
                media_file: "mediaFileValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.mediaFilePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.mediaFilePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('mediaFilePath', () => {
                const result = client.mediaFilePath("customerValue", "mediaFileValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.mediaFilePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromMediaFileName', () => {
                const result = client.matchCustomerFromMediaFileName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.mediaFilePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMediaFileFromMediaFileName', () => {
                const result = client.matchMediaFileFromMediaFileName(fakePath);
                assert.strictEqual(result, "mediaFileValue");
                assert((client.pathTemplates.mediaFilePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('merchantCenterLink', () => {
            const fakePath = "/rendered/path/merchantCenterLink";
            const expectedParameters = {
                customer: "customerValue",
                merchant_center_link: "merchantCenterLinkValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.merchantCenterLinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.merchantCenterLinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('merchantCenterLinkPath', () => {
                const result = client.merchantCenterLinkPath("customerValue", "merchantCenterLinkValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.merchantCenterLinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromMerchantCenterLinkName', () => {
                const result = client.matchCustomerFromMerchantCenterLinkName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.merchantCenterLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMerchantCenterLinkFromMerchantCenterLinkName', () => {
                const result = client.matchMerchantCenterLinkFromMerchantCenterLinkName(fakePath);
                assert.strictEqual(result, "merchantCenterLinkValue");
                assert((client.pathTemplates.merchantCenterLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('mobileAppCategoryConstant', () => {
            const fakePath = "/rendered/path/mobileAppCategoryConstant";
            const expectedParameters = {
                mobile_app_category_constant: "mobileAppCategoryConstantValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.mobileAppCategoryConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.mobileAppCategoryConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('mobileAppCategoryConstantPath', () => {
                const result = client.mobileAppCategoryConstantPath("mobileAppCategoryConstantValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.mobileAppCategoryConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchMobileAppCategoryConstantFromMobileAppCategoryConstantName', () => {
                const result = client.matchMobileAppCategoryConstantFromMobileAppCategoryConstantName(fakePath);
                assert.strictEqual(result, "mobileAppCategoryConstantValue");
                assert((client.pathTemplates.mobileAppCategoryConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('mobileDeviceConstant', () => {
            const fakePath = "/rendered/path/mobileDeviceConstant";
            const expectedParameters = {
                mobile_device_constant: "mobileDeviceConstantValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.mobileDeviceConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.mobileDeviceConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('mobileDeviceConstantPath', () => {
                const result = client.mobileDeviceConstantPath("mobileDeviceConstantValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.mobileDeviceConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchMobileDeviceConstantFromMobileDeviceConstantName', () => {
                const result = client.matchMobileDeviceConstantFromMobileDeviceConstantName(fakePath);
                assert.strictEqual(result, "mobileDeviceConstantValue");
                assert((client.pathTemplates.mobileDeviceConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('mutateJob', () => {
            const fakePath = "/rendered/path/mutateJob";
            const expectedParameters = {
                customer: "customerValue",
                mutate_job: "mutateJobValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.mutateJobPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.mutateJobPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('mutateJobPath', () => {
                const result = client.mutateJobPath("customerValue", "mutateJobValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.mutateJobPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromMutateJobName', () => {
                const result = client.matchCustomerFromMutateJobName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.mutateJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMutateJobFromMutateJobName', () => {
                const result = client.matchMutateJobFromMutateJobName(fakePath);
                assert.strictEqual(result, "mutateJobValue");
                assert((client.pathTemplates.mutateJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('offlineUserDataJob', () => {
            const fakePath = "/rendered/path/offlineUserDataJob";
            const expectedParameters = {
                customer: "customerValue",
                offline_user_data_job: "offlineUserDataJobValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.offlineUserDataJobPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.offlineUserDataJobPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('offlineUserDataJobPath', () => {
                const result = client.offlineUserDataJobPath("customerValue", "offlineUserDataJobValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.offlineUserDataJobPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromOfflineUserDataJobName', () => {
                const result = client.matchCustomerFromOfflineUserDataJobName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.offlineUserDataJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchOfflineUserDataJobFromOfflineUserDataJobName', () => {
                const result = client.matchOfflineUserDataJobFromOfflineUserDataJobName(fakePath);
                assert.strictEqual(result, "offlineUserDataJobValue");
                assert((client.pathTemplates.offlineUserDataJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('operatingSystemVersionConstant', () => {
            const fakePath = "/rendered/path/operatingSystemVersionConstant";
            const expectedParameters = {
                operating_system_version_constant: "operatingSystemVersionConstantValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.operatingSystemVersionConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.operatingSystemVersionConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('operatingSystemVersionConstantPath', () => {
                const result = client.operatingSystemVersionConstantPath("operatingSystemVersionConstantValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.operatingSystemVersionConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOperatingSystemVersionConstantFromOperatingSystemVersionConstantName', () => {
                const result = client.matchOperatingSystemVersionConstantFromOperatingSystemVersionConstantName(fakePath);
                assert.strictEqual(result, "operatingSystemVersionConstantValue");
                assert((client.pathTemplates.operatingSystemVersionConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('paidOrganicSearchTermView', () => {
            const fakePath = "/rendered/path/paidOrganicSearchTermView";
            const expectedParameters = {
                customer: "customerValue",
                paid_organic_search_term_view: "paidOrganicSearchTermViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.paidOrganicSearchTermViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.paidOrganicSearchTermViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('paidOrganicSearchTermViewPath', () => {
                const result = client.paidOrganicSearchTermViewPath("customerValue", "paidOrganicSearchTermViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.paidOrganicSearchTermViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromPaidOrganicSearchTermViewName', () => {
                const result = client.matchCustomerFromPaidOrganicSearchTermViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.paidOrganicSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPaidOrganicSearchTermViewFromPaidOrganicSearchTermViewName', () => {
                const result = client.matchPaidOrganicSearchTermViewFromPaidOrganicSearchTermViewName(fakePath);
                assert.strictEqual(result, "paidOrganicSearchTermViewValue");
                assert((client.pathTemplates.paidOrganicSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('parentalStatusView', () => {
            const fakePath = "/rendered/path/parentalStatusView";
            const expectedParameters = {
                customer: "customerValue",
                parental_status_view: "parentalStatusViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.parentalStatusViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.parentalStatusViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('parentalStatusViewPath', () => {
                const result = client.parentalStatusViewPath("customerValue", "parentalStatusViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.parentalStatusViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromParentalStatusViewName', () => {
                const result = client.matchCustomerFromParentalStatusViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.parentalStatusViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchParentalStatusViewFromParentalStatusViewName', () => {
                const result = client.matchParentalStatusViewFromParentalStatusViewName(fakePath);
                assert.strictEqual(result, "parentalStatusViewValue");
                assert((client.pathTemplates.parentalStatusViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('paymentsAccount', () => {
            const fakePath = "/rendered/path/paymentsAccount";
            const expectedParameters = {
                customer: "customerValue",
                payments_account: "paymentsAccountValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.paymentsAccountPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.paymentsAccountPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('paymentsAccountPath', () => {
                const result = client.paymentsAccountPath("customerValue", "paymentsAccountValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.paymentsAccountPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromPaymentsAccountName', () => {
                const result = client.matchCustomerFromPaymentsAccountName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.paymentsAccountPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPaymentsAccountFromPaymentsAccountName', () => {
                const result = client.matchPaymentsAccountFromPaymentsAccountName(fakePath);
                assert.strictEqual(result, "paymentsAccountValue");
                assert((client.pathTemplates.paymentsAccountPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('productBiddingCategoryConstant', () => {
            const fakePath = "/rendered/path/productBiddingCategoryConstant";
            const expectedParameters = {
                product_bidding_category_constant: "productBiddingCategoryConstantValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.productBiddingCategoryConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.productBiddingCategoryConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('productBiddingCategoryConstantPath', () => {
                const result = client.productBiddingCategoryConstantPath("productBiddingCategoryConstantValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.productBiddingCategoryConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProductBiddingCategoryConstantFromProductBiddingCategoryConstantName', () => {
                const result = client.matchProductBiddingCategoryConstantFromProductBiddingCategoryConstantName(fakePath);
                assert.strictEqual(result, "productBiddingCategoryConstantValue");
                assert((client.pathTemplates.productBiddingCategoryConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('productGroupView', () => {
            const fakePath = "/rendered/path/productGroupView";
            const expectedParameters = {
                customer: "customerValue",
                product_group_view: "productGroupViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.productGroupViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.productGroupViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('productGroupViewPath', () => {
                const result = client.productGroupViewPath("customerValue", "productGroupViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.productGroupViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromProductGroupViewName', () => {
                const result = client.matchCustomerFromProductGroupViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.productGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchProductGroupViewFromProductGroupViewName', () => {
                const result = client.matchProductGroupViewFromProductGroupViewName(fakePath);
                assert.strictEqual(result, "productGroupViewValue");
                assert((client.pathTemplates.productGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('recommendation', () => {
            const fakePath = "/rendered/path/recommendation";
            const expectedParameters = {
                customer: "customerValue",
                recommendation: "recommendationValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.recommendationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.recommendationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('recommendationPath', () => {
                const result = client.recommendationPath("customerValue", "recommendationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.recommendationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromRecommendationName', () => {
                const result = client.matchCustomerFromRecommendationName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.recommendationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRecommendationFromRecommendationName', () => {
                const result = client.matchRecommendationFromRecommendationName(fakePath);
                assert.strictEqual(result, "recommendationValue");
                assert((client.pathTemplates.recommendationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('remarketingAction', () => {
            const fakePath = "/rendered/path/remarketingAction";
            const expectedParameters = {
                customer: "customerValue",
                remarketing_action: "remarketingActionValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.remarketingActionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.remarketingActionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('remarketingActionPath', () => {
                const result = client.remarketingActionPath("customerValue", "remarketingActionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.remarketingActionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromRemarketingActionName', () => {
                const result = client.matchCustomerFromRemarketingActionName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.remarketingActionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRemarketingActionFromRemarketingActionName', () => {
                const result = client.matchRemarketingActionFromRemarketingActionName(fakePath);
                assert.strictEqual(result, "remarketingActionValue");
                assert((client.pathTemplates.remarketingActionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('searchTermView', () => {
            const fakePath = "/rendered/path/searchTermView";
            const expectedParameters = {
                customer: "customerValue",
                search_term_view: "searchTermViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.searchTermViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.searchTermViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('searchTermViewPath', () => {
                const result = client.searchTermViewPath("customerValue", "searchTermViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.searchTermViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromSearchTermViewName', () => {
                const result = client.matchCustomerFromSearchTermViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.searchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSearchTermViewFromSearchTermViewName', () => {
                const result = client.matchSearchTermViewFromSearchTermViewName(fakePath);
                assert.strictEqual(result, "searchTermViewValue");
                assert((client.pathTemplates.searchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('sharedCriterion', () => {
            const fakePath = "/rendered/path/sharedCriterion";
            const expectedParameters = {
                customer: "customerValue",
                shared_criterion: "sharedCriterionValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.sharedCriterionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.sharedCriterionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('sharedCriterionPath', () => {
                const result = client.sharedCriterionPath("customerValue", "sharedCriterionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.sharedCriterionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromSharedCriterionName', () => {
                const result = client.matchCustomerFromSharedCriterionName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.sharedCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSharedCriterionFromSharedCriterionName', () => {
                const result = client.matchSharedCriterionFromSharedCriterionName(fakePath);
                assert.strictEqual(result, "sharedCriterionValue");
                assert((client.pathTemplates.sharedCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('sharedSet', () => {
            const fakePath = "/rendered/path/sharedSet";
            const expectedParameters = {
                customer: "customerValue",
                shared_set: "sharedSetValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.sharedSetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.sharedSetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('sharedSetPath', () => {
                const result = client.sharedSetPath("customerValue", "sharedSetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.sharedSetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromSharedSetName', () => {
                const result = client.matchCustomerFromSharedSetName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.sharedSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSharedSetFromSharedSetName', () => {
                const result = client.matchSharedSetFromSharedSetName(fakePath);
                assert.strictEqual(result, "sharedSetValue");
                assert((client.pathTemplates.sharedSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('shoppingPerformanceView', () => {
            const fakePath = "/rendered/path/shoppingPerformanceView";
            const expectedParameters = {
                customer: "customerValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.shoppingPerformanceViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.shoppingPerformanceViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('shoppingPerformanceViewPath', () => {
                const result = client.shoppingPerformanceViewPath("customerValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.shoppingPerformanceViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromShoppingPerformanceViewName', () => {
                const result = client.matchCustomerFromShoppingPerformanceViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.shoppingPerformanceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('topicConstant', () => {
            const fakePath = "/rendered/path/topicConstant";
            const expectedParameters = {
                topic_constant: "topicConstantValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.topicConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.topicConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('topicConstantPath', () => {
                const result = client.topicConstantPath("topicConstantValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.topicConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchTopicConstantFromTopicConstantName', () => {
                const result = client.matchTopicConstantFromTopicConstantName(fakePath);
                assert.strictEqual(result, "topicConstantValue");
                assert((client.pathTemplates.topicConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('topicView', () => {
            const fakePath = "/rendered/path/topicView";
            const expectedParameters = {
                customer: "customerValue",
                topic_view: "topicViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.topicViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.topicViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('topicViewPath', () => {
                const result = client.topicViewPath("customerValue", "topicViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.topicViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromTopicViewName', () => {
                const result = client.matchCustomerFromTopicViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.topicViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTopicViewFromTopicViewName', () => {
                const result = client.matchTopicViewFromTopicViewName(fakePath);
                assert.strictEqual(result, "topicViewValue");
                assert((client.pathTemplates.topicViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('userInterest', () => {
            const fakePath = "/rendered/path/userInterest";
            const expectedParameters = {
                customer: "customerValue",
                user_interest: "userInterestValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userInterestPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userInterestPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userInterestPath', () => {
                const result = client.userInterestPath("customerValue", "userInterestValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userInterestPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromUserInterestName', () => {
                const result = client.matchCustomerFromUserInterestName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.userInterestPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUserInterestFromUserInterestName', () => {
                const result = client.matchUserInterestFromUserInterestName(fakePath);
                assert.strictEqual(result, "userInterestValue");
                assert((client.pathTemplates.userInterestPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('userList', () => {
            const fakePath = "/rendered/path/userList";
            const expectedParameters = {
                customer: "customerValue",
                user_list: "userListValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userListPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userListPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userListPath', () => {
                const result = client.userListPath("customerValue", "userListValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userListPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromUserListName', () => {
                const result = client.matchCustomerFromUserListName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.userListPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUserListFromUserListName', () => {
                const result = client.matchUserListFromUserListName(fakePath);
                assert.strictEqual(result, "userListValue");
                assert((client.pathTemplates.userListPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('userLocationView', () => {
            const fakePath = "/rendered/path/userLocationView";
            const expectedParameters = {
                customer: "customerValue",
                user_location_view: "userLocationViewValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userLocationViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userLocationViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userLocationViewPath', () => {
                const result = client.userLocationViewPath("customerValue", "userLocationViewValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userLocationViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromUserLocationViewName', () => {
                const result = client.matchCustomerFromUserLocationViewName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.userLocationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUserLocationViewFromUserLocationViewName', () => {
                const result = client.matchUserLocationViewFromUserLocationViewName(fakePath);
                assert.strictEqual(result, "userLocationViewValue");
                assert((client.pathTemplates.userLocationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('video', () => {
            const fakePath = "/rendered/path/video";
            const expectedParameters = {
                customer: "customerValue",
                video: "videoValue",
            };
            const client = new keywordviewserviceModule.v3.KeywordViewServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.videoPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.videoPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('videoPath', () => {
                const result = client.videoPath("customerValue", "videoValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.videoPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerFromVideoName', () => {
                const result = client.matchCustomerFromVideoName(fakePath);
                assert.strictEqual(result, "customerValue");
                assert((client.pathTemplates.videoPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchVideoFromVideoName', () => {
                const result = client.matchVideoFromVideoName(fakePath);
                assert.strictEqual(result, "videoValue");
                assert((client.pathTemplates.videoPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});

<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/ads/admob/v1/admob_resources.proto

namespace Google\Ads\Admob\V1\NetworkReportSpec;

use UnexpectedValueException;

/**
 * The metrics of the network report. Metrics are quantitative measurements
 * indicating how the publisher business is performing. They are aggregated
 * from the individual ad events and grouped by the report dimensions. The
 * metric value is either integer, or decimal (without rounding).
 *
 * Protobuf type <code>google.ads.admob.v1.NetworkReportSpec.Metric</code>
 */
class Metric
{
    /**
     * Default value for an unset field. Do not use.
     *
     * Generated from protobuf enum <code>METRIC_UNSPECIFIED = 0;</code>
     */
    const METRIC_UNSPECIFIED = 0;
    /**
     * The number of ad requests. The value is an integer.
     * **Warning:** The metric is incompatible with
     * [AD_TYPE](#Dimension.ENUM_VALUES.AD_TYPE) dimension.
     *
     * Generated from protobuf enum <code>AD_REQUESTS = 1;</code>
     */
    const AD_REQUESTS = 1;
    /**
     * The number of times a user clicks an ad. The value is an integer.
     *
     * Generated from protobuf enum <code>CLICKS = 2;</code>
     */
    const CLICKS = 2;
    /**
     * The estimated earnings of the AdMob publisher. The currency unit (USD,
     * EUR, or other) of the earning metrics are determined by the localization
     * setting for currency. The amount is in micros. For example, $6.50 would
     * be represented as 6500000.
     *
     * Generated from protobuf enum <code>ESTIMATED_EARNINGS = 3;</code>
     */
    const ESTIMATED_EARNINGS = 3;
    /**
     * The total number of ads shown to users. The value is an integer.
     *
     * Generated from protobuf enum <code>IMPRESSIONS = 4;</code>
     */
    const IMPRESSIONS = 4;
    /**
     * The ratio of clicks over impressions. The value is a double precision
     * (approximate) decimal value.
     *
     * Generated from protobuf enum <code>IMPRESSION_CTR = 5;</code>
     */
    const IMPRESSION_CTR = 5;
    /**
     * The estimated earnings per thousand ad impressions. The value is in
     * micros. For example, $1.03 would be represented as 1030000.
     * **Warning:** The metric is incompatible with
     * [AD_TYPE](#Dimension.ENUM_VALUES.AD_TYPE) dimension.
     *
     * Generated from protobuf enum <code>IMPRESSION_RPM = 6;</code>
     */
    const IMPRESSION_RPM = 6;
    /**
     * The number of times ads are returned in response to a request. The value
     * is an integer.
     *
     * Generated from protobuf enum <code>MATCHED_REQUESTS = 7;</code>
     */
    const MATCHED_REQUESTS = 7;
    /**
     * The ratio of matched ad requests over the total ad requests. The value is
     * a double precision (approximate) decimal value.
     * **Warning:** The metric is incompatible with
     * [AD_TYPE](#Dimension.ENUM_VALUES.AD_TYPE) dimension.
     *
     * Generated from protobuf enum <code>MATCH_RATE = 8;</code>
     */
    const MATCH_RATE = 8;
    /**
     * The ratio of ads that are displayed over ads that are returned, defined
     * as impressions / matched requests. The value is a double precision
     * (approximate) decimal value.
     *
     * Generated from protobuf enum <code>SHOW_RATE = 9;</code>
     */
    const SHOW_RATE = 9;

    private static $valueToName = [
        self::METRIC_UNSPECIFIED => 'METRIC_UNSPECIFIED',
        self::AD_REQUESTS => 'AD_REQUESTS',
        self::CLICKS => 'CLICKS',
        self::ESTIMATED_EARNINGS => 'ESTIMATED_EARNINGS',
        self::IMPRESSIONS => 'IMPRESSIONS',
        self::IMPRESSION_CTR => 'IMPRESSION_CTR',
        self::IMPRESSION_RPM => 'IMPRESSION_RPM',
        self::MATCHED_REQUESTS => 'MATCHED_REQUESTS',
        self::MATCH_RATE => 'MATCH_RATE',
        self::SHOW_RATE => 'SHOW_RATE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Metric::class, \Google\Ads\Admob\V1\NetworkReportSpec_Metric::class);


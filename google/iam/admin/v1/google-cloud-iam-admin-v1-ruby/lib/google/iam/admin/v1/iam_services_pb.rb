# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: google/iam/admin/v1/iam.proto for package 'google.iam.admin.v1'
# Original file comments:
# Copyright 2019 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'grpc'
require 'google/iam/admin/v1/iam_pb'

module Google
  module Iam
    module Admin
      module V1
        module IAM
          # Creates and manages service account objects.
          #
          # Service account is an account that belongs to your project instead
          # of to an individual end user. It is used to authenticate calls
          # to a Google API.
          #
          # To create a service account, specify the `project_id` and `account_id`
          # for the account.  The `account_id` is unique within the project, and used
          # to generate the service account email address and a stable
          # `unique_id`.
          #
          # All other methods can identify accounts using the format
          # `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
          # Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
          # the account. The `ACCOUNT` value can be the `email` address or the
          # `unique_id` of the service account.
          class Service

            include GRPC::GenericService

            self.marshal_class_method = :encode
            self.unmarshal_class_method = :decode
            self.service_name = 'google.iam.admin.v1.IAM'

            # Lists [ServiceAccounts][google.iam.admin.v1.ServiceAccount] for a project.
            rpc :ListServiceAccounts, ::Google::Iam::Admin::V1::ListServiceAccountsRequest, ::Google::Iam::Admin::V1::ListServiceAccountsResponse
            # Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
            rpc :GetServiceAccount, ::Google::Iam::Admin::V1::GetServiceAccountRequest, ::Google::Iam::Admin::V1::ServiceAccount
            # Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount]
            # and returns it.
            rpc :CreateServiceAccount, ::Google::Iam::Admin::V1::CreateServiceAccountRequest, ::Google::Iam::Admin::V1::ServiceAccount
            # Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
            #
            # Currently, only the following fields are updatable:
            # `display_name` and `description`.
            rpc :UpdateServiceAccount, ::Google::Iam::Admin::V1::ServiceAccount, ::Google::Iam::Admin::V1::ServiceAccount
            # Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
            rpc :DeleteServiceAccount, ::Google::Iam::Admin::V1::DeleteServiceAccountRequest, ::Google::Protobuf::Empty
            # Lists [ServiceAccountKeys][google.iam.admin.v1.ServiceAccountKey].
            rpc :ListServiceAccountKeys, ::Google::Iam::Admin::V1::ListServiceAccountKeysRequest, ::Google::Iam::Admin::V1::ListServiceAccountKeysResponse
            # Gets the [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
            # by key id.
            rpc :GetServiceAccountKey, ::Google::Iam::Admin::V1::GetServiceAccountKeyRequest, ::Google::Iam::Admin::V1::ServiceAccountKey
            # Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]
            # and returns it.
            rpc :CreateServiceAccountKey, ::Google::Iam::Admin::V1::CreateServiceAccountKeyRequest, ::Google::Iam::Admin::V1::ServiceAccountKey
            # Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
            rpc :DeleteServiceAccountKey, ::Google::Iam::Admin::V1::DeleteServiceAccountKeyRequest, ::Google::Protobuf::Empty
            # Signs a blob using a service account's system-managed private key.
            rpc :SignBlob, ::Google::Iam::Admin::V1::SignBlobRequest, ::Google::Iam::Admin::V1::SignBlobResponse
            # Signs a JWT using a service account's system-managed private key.
            #
            # If no expiry time (`exp`) is provided in the `SignJwtRequest`, IAM sets an
            # an expiry time of one hour by default. If you request an expiry time of
            # more than one hour, the request will fail.
            rpc :SignJwt, ::Google::Iam::Admin::V1::SignJwtRequest, ::Google::Iam::Admin::V1::SignJwtResponse
            # Returns the Cloud IAM access control policy for a
            # [ServiceAccount][google.iam.admin.v1.ServiceAccount].
            #
            # Note: Service accounts are both
            # [resources and
            # identities](/iam/docs/service-accounts#service_account_permissions). This
            # method treats the service account as a resource. It returns the Cloud IAM
            # policy that reflects what members have access to the service account.
            #
            # This method does not return what resources the service account has access
            # to. To see if a service account has access to a resource, call the
            # `getIamPolicy` method on the target resource. For example, to view grants
            # for a project, call the
            # [projects.getIamPolicy](/resource-manager/reference/rest/v1/projects/getIamPolicy)
            # method.
            rpc :GetIamPolicy, ::Google::Iam::V1::GetIamPolicyRequest, ::Google::Iam::V1::Policy
            # Sets the Cloud IAM access control policy for a
            # [ServiceAccount][google.iam.admin.v1.ServiceAccount].
            #
            # Note: Service accounts are both
            # [resources and
            # identities](/iam/docs/service-accounts#service_account_permissions). This
            # method treats the service account as a resource. Use it to grant members
            # access to the service account, such as when they need to impersonate it.
            #
            # This method does not grant the service account access to other resources,
            # such as projects. To grant a service account access to resources, include
            # the service account in the Cloud IAM policy for the desired resource, then
            # call the appropriate `setIamPolicy` method on the target resource. For
            # example, to grant a service account access to a project, call the
            # [projects.setIamPolicy](/resource-manager/reference/rest/v1/projects/setIamPolicy)
            # method.
            rpc :SetIamPolicy, ::Google::Iam::V1::SetIamPolicyRequest, ::Google::Iam::V1::Policy
            # Tests the specified permissions against the IAM access control policy
            # for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
            rpc :TestIamPermissions, ::Google::Iam::V1::TestIamPermissionsRequest, ::Google::Iam::V1::TestIamPermissionsResponse
            # Queries roles that can be granted on a particular resource.
            # A role is grantable if it can be used as the role in a binding for a policy
            # for that resource.
            rpc :QueryGrantableRoles, ::Google::Iam::Admin::V1::QueryGrantableRolesRequest, ::Google::Iam::Admin::V1::QueryGrantableRolesResponse
            # Lists the Roles defined on a resource.
            rpc :ListRoles, ::Google::Iam::Admin::V1::ListRolesRequest, ::Google::Iam::Admin::V1::ListRolesResponse
            # Gets a Role definition.
            rpc :GetRole, ::Google::Iam::Admin::V1::GetRoleRequest, ::Google::Iam::Admin::V1::Role
            # Creates a new Role.
            rpc :CreateRole, ::Google::Iam::Admin::V1::CreateRoleRequest, ::Google::Iam::Admin::V1::Role
            # Updates a Role definition.
            rpc :UpdateRole, ::Google::Iam::Admin::V1::UpdateRoleRequest, ::Google::Iam::Admin::V1::Role
            # Soft deletes a role. The role is suspended and cannot be used to create new
            # IAM Policy Bindings.
            # The Role will not be included in `ListRoles()` unless `show_deleted` is set
            # in the `ListRolesRequest`. The Role contains the deleted boolean set.
            # Existing Bindings remains, but are inactive. The Role can be undeleted
            # within 7 days. After 7 days the Role is deleted and all Bindings associated
            # with the role are removed.
            rpc :DeleteRole, ::Google::Iam::Admin::V1::DeleteRoleRequest, ::Google::Iam::Admin::V1::Role
            # Undelete a Role, bringing it back in its previous state.
            rpc :UndeleteRole, ::Google::Iam::Admin::V1::UndeleteRoleRequest, ::Google::Iam::Admin::V1::Role
            # Lists the permissions testable on a resource.
            # A permission is testable if it can be tested for an identity on a resource.
            rpc :QueryTestablePermissions, ::Google::Iam::Admin::V1::QueryTestablePermissionsRequest, ::Google::Iam::Admin::V1::QueryTestablePermissionsResponse
          end

          Stub = Service.rpc_stub_class
        end
      end
    end
  end
end

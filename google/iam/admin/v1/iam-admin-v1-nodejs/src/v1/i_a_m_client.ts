// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';
import * as path from 'path';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
/**
 * Client JSON configuration object, loaded from
 * `src/v1/i_a_m_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './i_a_m_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Creates and manages service account objects.
 *
 *  Service account is an account that belongs to your project instead
 *  of to an individual end user. It is used to authenticate calls
 *  to a Google API.
 *
 *  To create a service account, specify the `project_id` and `account_id`
 *  for the account.  The `account_id` is unique within the project, and used
 *  to generate the service account email address and a stable
 *  `unique_id`.
 *
 *  All other methods can identify accounts using the format
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *  Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *  the account. The `ACCOUNT` value can be the `email` address or the
 *  `unique_id` of the service account.
 * @class
 * @memberof v1
 */
export class IAMClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  iAMStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of IAMClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof IAMClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback ?
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      keyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/serviceAccounts/{service_account}/keys/{key}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      serviceAccountPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/serviceAccounts/{service_account}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listServiceAccounts:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'accounts'),
      queryGrantableRoles:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'roles'),
      listRoles:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'roles'),
      queryTestablePermissions:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'permissions')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.iam.admin.v1.IAM', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.iAMStub) {
      return this.iAMStub;
    }

    // Put together the "service stub" for
    // google.iam.admin.v1.IAM.
    this.iAMStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.iam.admin.v1.IAM') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.iam.admin.v1.IAM,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const iAMStubMethods =
        ['listServiceAccounts', 'getServiceAccount', 'createServiceAccount', 'updateServiceAccount', 'deleteServiceAccount', 'listServiceAccountKeys', 'getServiceAccountKey', 'createServiceAccountKey', 'deleteServiceAccountKey', 'signBlob', 'signJwt', 'getIamPolicy', 'setIamPolicy', 'testIamPermissions', 'queryGrantableRoles', 'listRoles', 'getRole', 'createRole', 'updateRole', 'deleteRole', 'undeleteRole', 'queryTestablePermissions'];
    for (const methodName of iAMStubMethods) {
      const callPromise = this.iAMStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.iAMStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'iam.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'iam.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getServiceAccount(
      request: protos.google.iam.admin.v1.IGetServiceAccountRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IServiceAccount,
        protos.google.iam.admin.v1.IGetServiceAccountRequest|undefined, {}|undefined
      ]>;
  getServiceAccount(
      request: protos.google.iam.admin.v1.IGetServiceAccountRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.admin.v1.IServiceAccount,
          protos.google.iam.admin.v1.IGetServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
  getServiceAccount(
      request: protos.google.iam.admin.v1.IGetServiceAccountRequest,
      callback: Callback<
          protos.google.iam.admin.v1.IServiceAccount,
          protos.google.iam.admin.v1.IGetServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets a {@link google.iam.admin.v1.ServiceAccount|ServiceAccount}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the service account in the following format:
 *   `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *   Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *   the account. The `ACCOUNT` value can be the `email` address or the
 *   `unique_id` of the service account.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ServiceAccount]{@link google.iam.admin.v1.ServiceAccount}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getServiceAccount(request);
 */
  getServiceAccount(
      request: protos.google.iam.admin.v1.IGetServiceAccountRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.admin.v1.IServiceAccount,
          protos.google.iam.admin.v1.IGetServiceAccountRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.admin.v1.IServiceAccount,
          protos.google.iam.admin.v1.IGetServiceAccountRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.admin.v1.IServiceAccount,
        protos.google.iam.admin.v1.IGetServiceAccountRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getServiceAccount(request, options, callback);
  }
  createServiceAccount(
      request: protos.google.iam.admin.v1.ICreateServiceAccountRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IServiceAccount,
        protos.google.iam.admin.v1.ICreateServiceAccountRequest|undefined, {}|undefined
      ]>;
  createServiceAccount(
      request: protos.google.iam.admin.v1.ICreateServiceAccountRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.admin.v1.IServiceAccount,
          protos.google.iam.admin.v1.ICreateServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
  createServiceAccount(
      request: protos.google.iam.admin.v1.ICreateServiceAccountRequest,
      callback: Callback<
          protos.google.iam.admin.v1.IServiceAccount,
          protos.google.iam.admin.v1.ICreateServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a {@link google.iam.admin.v1.ServiceAccount|ServiceAccount}
 * and returns it.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the project associated with the service
 *   accounts, such as `projects/my-project-123`.
 * @param {string} request.accountId
 *   Required. The account id that is used to generate the service account
 *   email address and a stable unique id. It is unique within a project,
 *   must be 6-30 characters long, and match the regular expression
 *   `[a-z]([-a-z0-9]*[a-z0-9])` to comply with RFC1035.
 * @param {google.iam.admin.v1.ServiceAccount} request.serviceAccount
 *   The {@link google.iam.admin.v1.ServiceAccount|ServiceAccount} resource to
 *   create. Currently, only the following values are user assignable:
 *   `display_name` and `description`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ServiceAccount]{@link google.iam.admin.v1.ServiceAccount}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createServiceAccount(request);
 */
  createServiceAccount(
      request: protos.google.iam.admin.v1.ICreateServiceAccountRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.admin.v1.IServiceAccount,
          protos.google.iam.admin.v1.ICreateServiceAccountRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.admin.v1.IServiceAccount,
          protos.google.iam.admin.v1.ICreateServiceAccountRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.admin.v1.IServiceAccount,
        protos.google.iam.admin.v1.ICreateServiceAccountRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.createServiceAccount(request, options, callback);
  }
  updateServiceAccount(
      request: protos.google.iam.admin.v1.IServiceAccount,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IServiceAccount,
        protos.google.iam.admin.v1.IServiceAccount|undefined, {}|undefined
      ]>;
  updateServiceAccount(
      request: protos.google.iam.admin.v1.IServiceAccount,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.admin.v1.IServiceAccount,
          protos.google.iam.admin.v1.IServiceAccount|null|undefined,
          {}|null|undefined>): void;
  updateServiceAccount(
      request: protos.google.iam.admin.v1.IServiceAccount,
      callback: Callback<
          protos.google.iam.admin.v1.IServiceAccount,
          protos.google.iam.admin.v1.IServiceAccount|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a {@link google.iam.admin.v1.ServiceAccount|ServiceAccount}.
 *
 * Currently, only the following fields are updatable:
 * `display_name` and `description`.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The resource name of the service account in the following format:
 *   `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *
 *   Requests using `-` as a wildcard for the `PROJECT_ID` will infer the
 *   project from the `account` and the `ACCOUNT` value can be the `email`
 *   address or the `unique_id` of the service account.
 *
 *   In responses the resource name will always be in the format
 *   `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 * @param {string} request.projectId
 *   @OutputOnly The id of the project that owns the service account.
 * @param {string} request.uniqueId
 *   @OutputOnly The unique and stable id of the service account.
 * @param {string} request.email
 *   @OutputOnly The email address of the service account.
 * @param {string} request.displayName
 *   Optional. A user-specified name for the service account.
 *   Must be less than or equal to 100 UTF-8 bytes.
 * @param {Buffer} request.etag
 *   Optional. Note: `etag` is an inoperable legacy field that is only returned
 *   for backwards compatibility.
 * @param {string} request.oauth2ClientId
 *   @OutputOnly. The OAuth2 client id for the service account.
 *   This is used in conjunction with the OAuth2 clientconfig API to make
 *   three legged OAuth2 (3LO) flows to access the data of Google users.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ServiceAccount]{@link google.iam.admin.v1.ServiceAccount}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateServiceAccount(request);
 */
  updateServiceAccount(
      request: protos.google.iam.admin.v1.IServiceAccount,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.admin.v1.IServiceAccount,
          protos.google.iam.admin.v1.IServiceAccount|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.admin.v1.IServiceAccount,
          protos.google.iam.admin.v1.IServiceAccount|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.admin.v1.IServiceAccount,
        protos.google.iam.admin.v1.IServiceAccount|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateServiceAccount(request, options, callback);
  }
  deleteServiceAccount(
      request: protos.google.iam.admin.v1.IDeleteServiceAccountRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.iam.admin.v1.IDeleteServiceAccountRequest|undefined, {}|undefined
      ]>;
  deleteServiceAccount(
      request: protos.google.iam.admin.v1.IDeleteServiceAccountRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.iam.admin.v1.IDeleteServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
  deleteServiceAccount(
      request: protos.google.iam.admin.v1.IDeleteServiceAccountRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.iam.admin.v1.IDeleteServiceAccountRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes a {@link google.iam.admin.v1.ServiceAccount|ServiceAccount}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the service account in the following format:
 *   `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *   Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *   the account. The `ACCOUNT` value can be the `email` address or the
 *   `unique_id` of the service account.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteServiceAccount(request);
 */
  deleteServiceAccount(
      request: protos.google.iam.admin.v1.IDeleteServiceAccountRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.iam.admin.v1.IDeleteServiceAccountRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.iam.admin.v1.IDeleteServiceAccountRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.iam.admin.v1.IDeleteServiceAccountRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteServiceAccount(request, options, callback);
  }
  listServiceAccountKeys(
      request: protos.google.iam.admin.v1.IListServiceAccountKeysRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IListServiceAccountKeysResponse,
        protos.google.iam.admin.v1.IListServiceAccountKeysRequest|undefined, {}|undefined
      ]>;
  listServiceAccountKeys(
      request: protos.google.iam.admin.v1.IListServiceAccountKeysRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.admin.v1.IListServiceAccountKeysResponse,
          protos.google.iam.admin.v1.IListServiceAccountKeysRequest|null|undefined,
          {}|null|undefined>): void;
  listServiceAccountKeys(
      request: protos.google.iam.admin.v1.IListServiceAccountKeysRequest,
      callback: Callback<
          protos.google.iam.admin.v1.IListServiceAccountKeysResponse,
          protos.google.iam.admin.v1.IListServiceAccountKeysRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Lists {@link google.iam.admin.v1.ServiceAccountKey|ServiceAccountKeys}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the service account in the following format:
 *   `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *
 *   Using `-` as a wildcard for the `PROJECT_ID`, will infer the project from
 *   the account. The `ACCOUNT` value can be the `email` address or the
 *   `unique_id` of the service account.
 * @param {number[]} request.keyTypes
 *   Filters the types of keys the user wants to include in the list
 *   response. Duplicate key types are not allowed. If no key type
 *   is provided, all keys are returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListServiceAccountKeysResponse]{@link google.iam.admin.v1.ListServiceAccountKeysResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.listServiceAccountKeys(request);
 */
  listServiceAccountKeys(
      request: protos.google.iam.admin.v1.IListServiceAccountKeysRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.admin.v1.IListServiceAccountKeysResponse,
          protos.google.iam.admin.v1.IListServiceAccountKeysRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.admin.v1.IListServiceAccountKeysResponse,
          protos.google.iam.admin.v1.IListServiceAccountKeysRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.admin.v1.IListServiceAccountKeysResponse,
        protos.google.iam.admin.v1.IListServiceAccountKeysRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.listServiceAccountKeys(request, options, callback);
  }
  getServiceAccountKey(
      request: protos.google.iam.admin.v1.IGetServiceAccountKeyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IServiceAccountKey,
        protos.google.iam.admin.v1.IGetServiceAccountKeyRequest|undefined, {}|undefined
      ]>;
  getServiceAccountKey(
      request: protos.google.iam.admin.v1.IGetServiceAccountKeyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.admin.v1.IServiceAccountKey,
          protos.google.iam.admin.v1.IGetServiceAccountKeyRequest|null|undefined,
          {}|null|undefined>): void;
  getServiceAccountKey(
      request: protos.google.iam.admin.v1.IGetServiceAccountKeyRequest,
      callback: Callback<
          protos.google.iam.admin.v1.IServiceAccountKey,
          protos.google.iam.admin.v1.IGetServiceAccountKeyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets the {@link google.iam.admin.v1.ServiceAccountKey|ServiceAccountKey}
 * by key id.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the service account key in the following format:
 *   `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.
 *
 *   Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *   the account. The `ACCOUNT` value can be the `email` address or the
 *   `unique_id` of the service account.
 * @param {google.iam.admin.v1.ServiceAccountPublicKeyType} request.publicKeyType
 *   The output format of the public key requested.
 *   X509_PEM is the default output format.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ServiceAccountKey]{@link google.iam.admin.v1.ServiceAccountKey}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getServiceAccountKey(request);
 */
  getServiceAccountKey(
      request: protos.google.iam.admin.v1.IGetServiceAccountKeyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.admin.v1.IServiceAccountKey,
          protos.google.iam.admin.v1.IGetServiceAccountKeyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.admin.v1.IServiceAccountKey,
          protos.google.iam.admin.v1.IGetServiceAccountKeyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.admin.v1.IServiceAccountKey,
        protos.google.iam.admin.v1.IGetServiceAccountKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getServiceAccountKey(request, options, callback);
  }
  createServiceAccountKey(
      request: protos.google.iam.admin.v1.ICreateServiceAccountKeyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IServiceAccountKey,
        protos.google.iam.admin.v1.ICreateServiceAccountKeyRequest|undefined, {}|undefined
      ]>;
  createServiceAccountKey(
      request: protos.google.iam.admin.v1.ICreateServiceAccountKeyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.admin.v1.IServiceAccountKey,
          protos.google.iam.admin.v1.ICreateServiceAccountKeyRequest|null|undefined,
          {}|null|undefined>): void;
  createServiceAccountKey(
      request: protos.google.iam.admin.v1.ICreateServiceAccountKeyRequest,
      callback: Callback<
          protos.google.iam.admin.v1.IServiceAccountKey,
          protos.google.iam.admin.v1.ICreateServiceAccountKeyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a {@link google.iam.admin.v1.ServiceAccountKey|ServiceAccountKey}
 * and returns it.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the service account in the following format:
 *   `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *   Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *   the account. The `ACCOUNT` value can be the `email` address or the
 *   `unique_id` of the service account.
 * @param {google.iam.admin.v1.ServiceAccountPrivateKeyType} request.privateKeyType
 *   The output format of the private key. The default value is
 *   `TYPE_GOOGLE_CREDENTIALS_FILE`, which is the Google Credentials File
 *   format.
 * @param {google.iam.admin.v1.ServiceAccountKeyAlgorithm} request.keyAlgorithm
 *   Which type of key and algorithm to use for the key.
 *   The default is currently a 2K RSA key.  However this may change in the
 *   future.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ServiceAccountKey]{@link google.iam.admin.v1.ServiceAccountKey}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createServiceAccountKey(request);
 */
  createServiceAccountKey(
      request: protos.google.iam.admin.v1.ICreateServiceAccountKeyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.admin.v1.IServiceAccountKey,
          protos.google.iam.admin.v1.ICreateServiceAccountKeyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.admin.v1.IServiceAccountKey,
          protos.google.iam.admin.v1.ICreateServiceAccountKeyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.admin.v1.IServiceAccountKey,
        protos.google.iam.admin.v1.ICreateServiceAccountKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.createServiceAccountKey(request, options, callback);
  }
  deleteServiceAccountKey(
      request: protos.google.iam.admin.v1.IDeleteServiceAccountKeyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.iam.admin.v1.IDeleteServiceAccountKeyRequest|undefined, {}|undefined
      ]>;
  deleteServiceAccountKey(
      request: protos.google.iam.admin.v1.IDeleteServiceAccountKeyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.iam.admin.v1.IDeleteServiceAccountKeyRequest|null|undefined,
          {}|null|undefined>): void;
  deleteServiceAccountKey(
      request: protos.google.iam.admin.v1.IDeleteServiceAccountKeyRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.iam.admin.v1.IDeleteServiceAccountKeyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes a {@link google.iam.admin.v1.ServiceAccountKey|ServiceAccountKey}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the service account key in the following format:
 *   `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.
 *   Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *   the account. The `ACCOUNT` value can be the `email` address or the
 *   `unique_id` of the service account.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteServiceAccountKey(request);
 */
  deleteServiceAccountKey(
      request: protos.google.iam.admin.v1.IDeleteServiceAccountKeyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.iam.admin.v1.IDeleteServiceAccountKeyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.iam.admin.v1.IDeleteServiceAccountKeyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.iam.admin.v1.IDeleteServiceAccountKeyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteServiceAccountKey(request, options, callback);
  }
  signBlob(
      request: protos.google.iam.admin.v1.ISignBlobRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.ISignBlobResponse,
        protos.google.iam.admin.v1.ISignBlobRequest|undefined, {}|undefined
      ]>;
  signBlob(
      request: protos.google.iam.admin.v1.ISignBlobRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.admin.v1.ISignBlobResponse,
          protos.google.iam.admin.v1.ISignBlobRequest|null|undefined,
          {}|null|undefined>): void;
  signBlob(
      request: protos.google.iam.admin.v1.ISignBlobRequest,
      callback: Callback<
          protos.google.iam.admin.v1.ISignBlobResponse,
          protos.google.iam.admin.v1.ISignBlobRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Signs a blob using a service account's system-managed private key.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the service account in the following format:
 *   `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *   Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *   the account. The `ACCOUNT` value can be the `email` address or the
 *   `unique_id` of the service account.
 * @param {Buffer} request.bytesToSign
 *   Required. The bytes to sign.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [SignBlobResponse]{@link google.iam.admin.v1.SignBlobResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.signBlob(request);
 */
  signBlob(
      request: protos.google.iam.admin.v1.ISignBlobRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.admin.v1.ISignBlobResponse,
          protos.google.iam.admin.v1.ISignBlobRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.admin.v1.ISignBlobResponse,
          protos.google.iam.admin.v1.ISignBlobRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.admin.v1.ISignBlobResponse,
        protos.google.iam.admin.v1.ISignBlobRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.signBlob(request, options, callback);
  }
  signJwt(
      request: protos.google.iam.admin.v1.ISignJwtRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.ISignJwtResponse,
        protos.google.iam.admin.v1.ISignJwtRequest|undefined, {}|undefined
      ]>;
  signJwt(
      request: protos.google.iam.admin.v1.ISignJwtRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.admin.v1.ISignJwtResponse,
          protos.google.iam.admin.v1.ISignJwtRequest|null|undefined,
          {}|null|undefined>): void;
  signJwt(
      request: protos.google.iam.admin.v1.ISignJwtRequest,
      callback: Callback<
          protos.google.iam.admin.v1.ISignJwtResponse,
          protos.google.iam.admin.v1.ISignJwtRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Signs a JWT using a service account's system-managed private key.
 *
 * If no expiry time (`exp`) is provided in the `SignJwtRequest`, IAM sets an
 * an expiry time of one hour by default. If you request an expiry time of
 * more than one hour, the request will fail.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the service account in the following format:
 *   `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
 *   Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
 *   the account. The `ACCOUNT` value can be the `email` address or the
 *   `unique_id` of the service account.
 * @param {string} request.payload
 *   Required. The JWT payload to sign, a JSON JWT Claim set.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [SignJwtResponse]{@link google.iam.admin.v1.SignJwtResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.signJwt(request);
 */
  signJwt(
      request: protos.google.iam.admin.v1.ISignJwtRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.admin.v1.ISignJwtResponse,
          protos.google.iam.admin.v1.ISignJwtRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.admin.v1.ISignJwtResponse,
          protos.google.iam.admin.v1.ISignJwtRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.admin.v1.ISignJwtResponse,
        protos.google.iam.admin.v1.ISignJwtRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.signJwt(request, options, callback);
  }
  getIamPolicy(
      request: protos.google.iam.v1.IGetIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest|undefined, {}|undefined
      ]>;
  getIamPolicy(
      request: protos.google.iam.v1.IGetIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  getIamPolicy(
      request: protos.google.iam.v1.IGetIamPolicyRequest,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns the Cloud IAM access control policy for a
 * {@link google.iam.admin.v1.ServiceAccount|ServiceAccount}.
 *
 * Note: Service accounts are both
 * [resources and
 * identities](/iam/docs/service-accounts#service_account_permissions). This
 * method treats the service account as a resource. It returns the Cloud IAM
 * policy that reflects what members have access to the service account.
 *
 * This method does not return what resources the service account has access
 * to. To see if a service account has access to a resource, call the
 * `getIamPolicy` method on the target resource. For example, to view grants
 * for a project, call the
 * [projects.getIamPolicy](/resource-manager/reference/rest/v1/projects/getIamPolicy)
 * method.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {google.iam.v1.GetPolicyOptions} request.options
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`. This field is only used by Cloud IAM.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getIamPolicy(request);
 */
  getIamPolicy(
      request: protos.google.iam.v1.IGetIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'resource': request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
  setIamPolicy(
      request: protos.google.iam.v1.ISetIamPolicyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest|undefined, {}|undefined
      ]>;
  setIamPolicy(
      request: protos.google.iam.v1.ISetIamPolicyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
  setIamPolicy(
      request: protos.google.iam.v1.ISetIamPolicyRequest,
      callback: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Sets the Cloud IAM access control policy for a
 * {@link google.iam.admin.v1.ServiceAccount|ServiceAccount}.
 *
 * Note: Service accounts are both
 * [resources and
 * identities](/iam/docs/service-accounts#service_account_permissions). This
 * method treats the service account as a resource. Use it to grant members
 * access to the service account, such as when they need to impersonate it.
 *
 * This method does not grant the service account access to other resources,
 * such as projects. To grant a service account access to resources, include
 * the service account in the Cloud IAM policy for the desired resource, then
 * call the appropriate `setIamPolicy` method on the target resource. For
 * example, to grant a service account access to a project, call the
 * [projects.setIamPolicy](/resource-manager/reference/rest/v1/projects/setIamPolicy)
 * method.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being specified.
 *   See the operation documentation for the appropriate value for this field.
 * @param {google.iam.v1.Policy} request.policy
 *   REQUIRED: The complete policy to be applied to the `resource`. The size of
 *   the policy is limited to a few 10s of KB. An empty policy is a
 *   valid policy but certain Cloud Platform services (such as Projects)
 *   might reject them.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.setIamPolicy(request);
 */
  setIamPolicy(
      request: protos.google.iam.v1.ISetIamPolicyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'resource': request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
  testIamPermissions(
      request: protos.google.iam.v1.ITestIamPermissionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest|undefined, {}|undefined
      ]>;
  testIamPermissions(
      request: protos.google.iam.v1.ITestIamPermissionsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>): void;
  testIamPermissions(
      request: protos.google.iam.v1.ITestIamPermissionsRequest,
      callback: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Tests the specified permissions against the IAM access control policy
 * for a {@link google.iam.admin.v1.ServiceAccount|ServiceAccount}.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see
 *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.testIamPermissions(request);
 */
  testIamPermissions(
      request: protos.google.iam.v1.ITestIamPermissionsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'resource': request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.testIamPermissions(request, options, callback);
  }
  getRole(
      request: protos.google.iam.admin.v1.IGetRoleRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IRole,
        protos.google.iam.admin.v1.IGetRoleRequest|undefined, {}|undefined
      ]>;
  getRole(
      request: protos.google.iam.admin.v1.IGetRoleRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IGetRoleRequest|null|undefined,
          {}|null|undefined>): void;
  getRole(
      request: protos.google.iam.admin.v1.IGetRoleRequest,
      callback: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IGetRoleRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets a Role definition.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The `name` parameter's value depends on the target resource for the
 *   request, namely
 *   [`roles`](/iam/reference/rest/v1/roles),
 *   [`projects`](/iam/reference/rest/v1/projects.roles), or
 *   [`organizations`](/iam/reference/rest/v1/organizations.roles). Each
 *   resource type's `name` value format is described below:
 *
 *   * [`roles.get()`](/iam/reference/rest/v1/roles/get): `roles/{ROLE_NAME}`.
 *     This method returns results from all
 *     [predefined roles](/iam/docs/understanding-roles#predefined_roles) in
 *     Cloud IAM. Example request URL:
 *     `https://iam.googleapis.com/v1/roles/{ROLE_NAME}`
 *
 *   * [`projects.roles.get()`](/iam/reference/rest/v1/projects.roles/get):
 *     `projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`. This method returns only
 *     [custom roles](/iam/docs/understanding-custom-roles) that have been
 *     created at the project level. Example request URL:
 *     `https://iam.googleapis.com/v1/projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`
 *
 *   * [`organizations.roles.get()`](/iam/reference/rest/v1/organizations.roles/get):
 *     `organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`. This method
 *     returns only [custom roles](/iam/docs/understanding-custom-roles) that
 *     have been created at the organization level. Example request URL:
 *     `https://iam.googleapis.com/v1/organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`
 *
 *   Note: Wildcard (*) values are invalid; you must specify a complete project
 *   ID or organization ID.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Role]{@link google.iam.admin.v1.Role}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getRole(request);
 */
  getRole(
      request: protos.google.iam.admin.v1.IGetRoleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IGetRoleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IGetRoleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.admin.v1.IRole,
        protos.google.iam.admin.v1.IGetRoleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getRole(request, options, callback);
  }
  createRole(
      request: protos.google.iam.admin.v1.ICreateRoleRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IRole,
        protos.google.iam.admin.v1.ICreateRoleRequest|undefined, {}|undefined
      ]>;
  createRole(
      request: protos.google.iam.admin.v1.ICreateRoleRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.ICreateRoleRequest|null|undefined,
          {}|null|undefined>): void;
  createRole(
      request: protos.google.iam.admin.v1.ICreateRoleRequest,
      callback: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.ICreateRoleRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a new Role.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The `parent` parameter's value depends on the target resource for the
 *   request, namely
 *   [`projects`](/iam/reference/rest/v1/projects.roles) or
 *   [`organizations`](/iam/reference/rest/v1/organizations.roles). Each
 *   resource type's `parent` value format is described below:
 *
 *   * [`projects.roles.create()`](/iam/reference/rest/v1/projects.roles/create):
 *     `projects/{PROJECT_ID}`. This method creates project-level
 *     [custom roles](/iam/docs/understanding-custom-roles).
 *     Example request URL:
 *     `https://iam.googleapis.com/v1/projects/{PROJECT_ID}/roles`
 *
 *   * [`organizations.roles.create()`](/iam/reference/rest/v1/organizations.roles/create):
 *     `organizations/{ORGANIZATION_ID}`. This method creates organization-level
 *     [custom roles](/iam/docs/understanding-custom-roles). Example request
 *     URL:
 *     `https://iam.googleapis.com/v1/organizations/{ORGANIZATION_ID}/roles`
 *
 *   Note: Wildcard (*) values are invalid; you must specify a complete project
 *   ID or organization ID.
 * @param {string} request.roleId
 *   The role ID to use for this role.
 * @param {google.iam.admin.v1.Role} request.role
 *   The Role resource to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Role]{@link google.iam.admin.v1.Role}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createRole(request);
 */
  createRole(
      request: protos.google.iam.admin.v1.ICreateRoleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.ICreateRoleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.ICreateRoleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.admin.v1.IRole,
        protos.google.iam.admin.v1.ICreateRoleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createRole(request, options, callback);
  }
  updateRole(
      request: protos.google.iam.admin.v1.IUpdateRoleRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IRole,
        protos.google.iam.admin.v1.IUpdateRoleRequest|undefined, {}|undefined
      ]>;
  updateRole(
      request: protos.google.iam.admin.v1.IUpdateRoleRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IUpdateRoleRequest|null|undefined,
          {}|null|undefined>): void;
  updateRole(
      request: protos.google.iam.admin.v1.IUpdateRoleRequest,
      callback: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IUpdateRoleRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a Role definition.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The `name` parameter's value depends on the target resource for the
 *   request, namely
 *   [`projects`](/iam/reference/rest/v1/projects.roles) or
 *   [`organizations`](/iam/reference/rest/v1/organizations.roles). Each
 *   resource type's `name` value format is described below:
 *
 *   * [`projects.roles.patch()`](/iam/reference/rest/v1/projects.roles/patch):
 *     `projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`. This method updates only
 *     [custom roles](/iam/docs/understanding-custom-roles) that have been
 *     created at the project level. Example request URL:
 *     `https://iam.googleapis.com/v1/projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`
 *
 *   * [`organizations.roles.patch()`](/iam/reference/rest/v1/organizations.roles/patch):
 *     `organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`. This method
 *     updates only [custom roles](/iam/docs/understanding-custom-roles) that
 *     have been created at the organization level. Example request URL:
 *     `https://iam.googleapis.com/v1/organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`
 *
 *   Note: Wildcard (*) values are invalid; you must specify a complete project
 *   ID or organization ID.
 * @param {google.iam.admin.v1.Role} request.role
 *   The updated role.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   A mask describing which fields in the Role have changed.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Role]{@link google.iam.admin.v1.Role}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateRole(request);
 */
  updateRole(
      request: protos.google.iam.admin.v1.IUpdateRoleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IUpdateRoleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IUpdateRoleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.admin.v1.IRole,
        protos.google.iam.admin.v1.IUpdateRoleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateRole(request, options, callback);
  }
  deleteRole(
      request: protos.google.iam.admin.v1.IDeleteRoleRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IRole,
        protos.google.iam.admin.v1.IDeleteRoleRequest|undefined, {}|undefined
      ]>;
  deleteRole(
      request: protos.google.iam.admin.v1.IDeleteRoleRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IDeleteRoleRequest|null|undefined,
          {}|null|undefined>): void;
  deleteRole(
      request: protos.google.iam.admin.v1.IDeleteRoleRequest,
      callback: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IDeleteRoleRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Soft deletes a role. The role is suspended and cannot be used to create new
 * IAM Policy Bindings.
 * The Role will not be included in `ListRoles()` unless `show_deleted` is set
 * in the `ListRolesRequest`. The Role contains the deleted boolean set.
 * Existing Bindings remains, but are inactive. The Role can be undeleted
 * within 7 days. After 7 days the Role is deleted and all Bindings associated
 * with the role are removed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The `name` parameter's value depends on the target resource for the
 *   request, namely
 *   [`projects`](/iam/reference/rest/v1/projects.roles) or
 *   [`organizations`](/iam/reference/rest/v1/organizations.roles). Each
 *   resource type's `name` value format is described below:
 *
 *   * [`projects.roles.delete()`](/iam/reference/rest/v1/projects.roles/delete):
 *     `projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`. This method deletes only
 *     [custom roles](/iam/docs/understanding-custom-roles) that have been
 *     created at the project level. Example request URL:
 *     `https://iam.googleapis.com/v1/projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`
 *
 *   * [`organizations.roles.delete()`](/iam/reference/rest/v1/organizations.roles/delete):
 *     `organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`. This method
 *     deletes only [custom roles](/iam/docs/understanding-custom-roles) that
 *     have been created at the organization level. Example request URL:
 *     `https://iam.googleapis.com/v1/organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`
 *
 *   Note: Wildcard (*) values are invalid; you must specify a complete project
 *   ID or organization ID.
 * @param {Buffer} request.etag
 *   Used to perform a consistent read-modify-write.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Role]{@link google.iam.admin.v1.Role}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteRole(request);
 */
  deleteRole(
      request: protos.google.iam.admin.v1.IDeleteRoleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IDeleteRoleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IDeleteRoleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.admin.v1.IRole,
        protos.google.iam.admin.v1.IDeleteRoleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteRole(request, options, callback);
  }
  undeleteRole(
      request: protos.google.iam.admin.v1.IUndeleteRoleRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IRole,
        protos.google.iam.admin.v1.IUndeleteRoleRequest|undefined, {}|undefined
      ]>;
  undeleteRole(
      request: protos.google.iam.admin.v1.IUndeleteRoleRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IUndeleteRoleRequest|null|undefined,
          {}|null|undefined>): void;
  undeleteRole(
      request: protos.google.iam.admin.v1.IUndeleteRoleRequest,
      callback: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IUndeleteRoleRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Undelete a Role, bringing it back in its previous state.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The `name` parameter's value depends on the target resource for the
 *   request, namely
 *   [`projects`](/iam/reference/rest/v1/projects.roles) or
 *   [`organizations`](/iam/reference/rest/v1/organizations.roles). Each
 *   resource type's `name` value format is described below:
 *
 *   * [`projects.roles.undelete()`](/iam/reference/rest/v1/projects.roles/undelete):
 *     `projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`. This method undeletes
 *     only [custom roles](/iam/docs/understanding-custom-roles) that have been
 *     created at the project level. Example request URL:
 *     `https://iam.googleapis.com/v1/projects/{PROJECT_ID}/roles/{CUSTOM_ROLE_ID}`
 *
 *   * [`organizations.roles.undelete()`](/iam/reference/rest/v1/organizations.roles/undelete):
 *     `organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`. This method
 *     undeletes only [custom roles](/iam/docs/understanding-custom-roles) that
 *     have been created at the organization level. Example request URL:
 *     `https://iam.googleapis.com/v1/organizations/{ORGANIZATION_ID}/roles/{CUSTOM_ROLE_ID}`
 *
 *   Note: Wildcard (*) values are invalid; you must specify a complete project
 *   ID or organization ID.
 * @param {Buffer} request.etag
 *   Used to perform a consistent read-modify-write.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Role]{@link google.iam.admin.v1.Role}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.undeleteRole(request);
 */
  undeleteRole(
      request: protos.google.iam.admin.v1.IUndeleteRoleRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IUndeleteRoleRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.iam.admin.v1.IRole,
          protos.google.iam.admin.v1.IUndeleteRoleRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.iam.admin.v1.IRole,
        protos.google.iam.admin.v1.IUndeleteRoleRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.undeleteRole(request, options, callback);
  }

  listServiceAccounts(
      request: protos.google.iam.admin.v1.IListServiceAccountsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IServiceAccount[],
        protos.google.iam.admin.v1.IListServiceAccountsRequest|null,
        protos.google.iam.admin.v1.IListServiceAccountsResponse
      ]>;
  listServiceAccounts(
      request: protos.google.iam.admin.v1.IListServiceAccountsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.iam.admin.v1.IListServiceAccountsRequest,
          protos.google.iam.admin.v1.IListServiceAccountsResponse|null|undefined,
          protos.google.iam.admin.v1.IServiceAccount>): void;
  listServiceAccounts(
      request: protos.google.iam.admin.v1.IListServiceAccountsRequest,
      callback: PaginationCallback<
          protos.google.iam.admin.v1.IListServiceAccountsRequest,
          protos.google.iam.admin.v1.IListServiceAccountsResponse|null|undefined,
          protos.google.iam.admin.v1.IServiceAccount>): void;
/**
 * Lists {@link google.iam.admin.v1.ServiceAccount|ServiceAccounts} for a project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the project associated with the service
 *   accounts, such as `projects/my-project-123`.
 * @param {number} request.pageSize
 *   Optional limit on the number of service accounts to include in the
 *   response. Further accounts can subsequently be obtained by including the
 *   {@link google.iam.admin.v1.ListServiceAccountsResponse.next_page_token|ListServiceAccountsResponse.next_page_token}
 *   in a subsequent request.
 * @param {string} request.pageToken
 *   Optional pagination token returned in an earlier
 *   {@link google.iam.admin.v1.ListServiceAccountsResponse.next_page_token|ListServiceAccountsResponse.next_page_token}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [ServiceAccount]{@link google.iam.admin.v1.ServiceAccount}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listServiceAccountsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listServiceAccounts(
      request: protos.google.iam.admin.v1.IListServiceAccountsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.iam.admin.v1.IListServiceAccountsRequest,
          protos.google.iam.admin.v1.IListServiceAccountsResponse|null|undefined,
          protos.google.iam.admin.v1.IServiceAccount>,
      callback?: PaginationCallback<
          protos.google.iam.admin.v1.IListServiceAccountsRequest,
          protos.google.iam.admin.v1.IListServiceAccountsResponse|null|undefined,
          protos.google.iam.admin.v1.IServiceAccount>):
      Promise<[
        protos.google.iam.admin.v1.IServiceAccount[],
        protos.google.iam.admin.v1.IListServiceAccountsRequest|null,
        protos.google.iam.admin.v1.IListServiceAccountsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.listServiceAccounts(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the project associated with the service
 *   accounts, such as `projects/my-project-123`.
 * @param {number} request.pageSize
 *   Optional limit on the number of service accounts to include in the
 *   response. Further accounts can subsequently be obtained by including the
 *   {@link google.iam.admin.v1.ListServiceAccountsResponse.next_page_token|ListServiceAccountsResponse.next_page_token}
 *   in a subsequent request.
 * @param {string} request.pageToken
 *   Optional pagination token returned in an earlier
 *   {@link google.iam.admin.v1.ListServiceAccountsResponse.next_page_token|ListServiceAccountsResponse.next_page_token}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [ServiceAccount]{@link google.iam.admin.v1.ServiceAccount} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listServiceAccountsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listServiceAccountsStream(
      request?: protos.google.iam.admin.v1.IListServiceAccountsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listServiceAccounts.createStream(
      this.innerApiCalls.listServiceAccounts as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listServiceAccounts`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the project associated with the service
 *   accounts, such as `projects/my-project-123`.
 * @param {number} request.pageSize
 *   Optional limit on the number of service accounts to include in the
 *   response. Further accounts can subsequently be obtained by including the
 *   {@link google.iam.admin.v1.ListServiceAccountsResponse.next_page_token|ListServiceAccountsResponse.next_page_token}
 *   in a subsequent request.
 * @param {string} request.pageToken
 *   Optional pagination token returned in an earlier
 *   {@link google.iam.admin.v1.ListServiceAccountsResponse.next_page_token|ListServiceAccountsResponse.next_page_token}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [ServiceAccount]{@link google.iam.admin.v1.ServiceAccount}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listServiceAccountsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listServiceAccountsAsync(
      request?: protos.google.iam.admin.v1.IListServiceAccountsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.iam.admin.v1.IServiceAccount>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listServiceAccounts.asyncIterate(
      this.innerApiCalls['listServiceAccounts'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.iam.admin.v1.IServiceAccount>;
  }
  queryGrantableRoles(
      request: protos.google.iam.admin.v1.IQueryGrantableRolesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IRole[],
        protos.google.iam.admin.v1.IQueryGrantableRolesRequest|null,
        protos.google.iam.admin.v1.IQueryGrantableRolesResponse
      ]>;
  queryGrantableRoles(
      request: protos.google.iam.admin.v1.IQueryGrantableRolesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.iam.admin.v1.IQueryGrantableRolesRequest,
          protos.google.iam.admin.v1.IQueryGrantableRolesResponse|null|undefined,
          protos.google.iam.admin.v1.IRole>): void;
  queryGrantableRoles(
      request: protos.google.iam.admin.v1.IQueryGrantableRolesRequest,
      callback: PaginationCallback<
          protos.google.iam.admin.v1.IQueryGrantableRolesRequest,
          protos.google.iam.admin.v1.IQueryGrantableRolesResponse|null|undefined,
          protos.google.iam.admin.v1.IRole>): void;
/**
 * Queries roles that can be granted on a particular resource.
 * A role is grantable if it can be used as the role in a binding for a policy
 * for that resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.fullResourceName
 *   Required. The full resource name to query from the list of grantable roles.
 *
 *   The name follows the Google Cloud Platform resource format.
 *   For example, a Cloud Platform project with id `my-project` will be named
 *   `//cloudresourcemanager.googleapis.com/projects/my-project`.
 * @param {google.iam.admin.v1.RoleView} request.view
 * @param {number} request.pageSize
 *   Optional limit on the number of roles to include in the response.
 * @param {string} request.pageToken
 *   Optional pagination token returned in an earlier
 *   QueryGrantableRolesResponse.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Role]{@link google.iam.admin.v1.Role}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `queryGrantableRolesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  queryGrantableRoles(
      request: protos.google.iam.admin.v1.IQueryGrantableRolesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.iam.admin.v1.IQueryGrantableRolesRequest,
          protos.google.iam.admin.v1.IQueryGrantableRolesResponse|null|undefined,
          protos.google.iam.admin.v1.IRole>,
      callback?: PaginationCallback<
          protos.google.iam.admin.v1.IQueryGrantableRolesRequest,
          protos.google.iam.admin.v1.IQueryGrantableRolesResponse|null|undefined,
          protos.google.iam.admin.v1.IRole>):
      Promise<[
        protos.google.iam.admin.v1.IRole[],
        protos.google.iam.admin.v1.IQueryGrantableRolesRequest|null,
        protos.google.iam.admin.v1.IQueryGrantableRolesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.queryGrantableRoles(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.fullResourceName
 *   Required. The full resource name to query from the list of grantable roles.
 *
 *   The name follows the Google Cloud Platform resource format.
 *   For example, a Cloud Platform project with id `my-project` will be named
 *   `//cloudresourcemanager.googleapis.com/projects/my-project`.
 * @param {google.iam.admin.v1.RoleView} request.view
 * @param {number} request.pageSize
 *   Optional limit on the number of roles to include in the response.
 * @param {string} request.pageToken
 *   Optional pagination token returned in an earlier
 *   QueryGrantableRolesResponse.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Role]{@link google.iam.admin.v1.Role} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `queryGrantableRolesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  queryGrantableRolesStream(
      request?: protos.google.iam.admin.v1.IQueryGrantableRolesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.queryGrantableRoles.createStream(
      this.innerApiCalls.queryGrantableRoles as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `queryGrantableRoles`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.fullResourceName
 *   Required. The full resource name to query from the list of grantable roles.
 *
 *   The name follows the Google Cloud Platform resource format.
 *   For example, a Cloud Platform project with id `my-project` will be named
 *   `//cloudresourcemanager.googleapis.com/projects/my-project`.
 * @param {google.iam.admin.v1.RoleView} request.view
 * @param {number} request.pageSize
 *   Optional limit on the number of roles to include in the response.
 * @param {string} request.pageToken
 *   Optional pagination token returned in an earlier
 *   QueryGrantableRolesResponse.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Role]{@link google.iam.admin.v1.Role}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.queryGrantableRolesAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  queryGrantableRolesAsync(
      request?: protos.google.iam.admin.v1.IQueryGrantableRolesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.iam.admin.v1.IRole>{
    request = request || {};
    options = options || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.queryGrantableRoles.asyncIterate(
      this.innerApiCalls['queryGrantableRoles'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.iam.admin.v1.IRole>;
  }
  listRoles(
      request: protos.google.iam.admin.v1.IListRolesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IRole[],
        protos.google.iam.admin.v1.IListRolesRequest|null,
        protos.google.iam.admin.v1.IListRolesResponse
      ]>;
  listRoles(
      request: protos.google.iam.admin.v1.IListRolesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.iam.admin.v1.IListRolesRequest,
          protos.google.iam.admin.v1.IListRolesResponse|null|undefined,
          protos.google.iam.admin.v1.IRole>): void;
  listRoles(
      request: protos.google.iam.admin.v1.IListRolesRequest,
      callback: PaginationCallback<
          protos.google.iam.admin.v1.IListRolesRequest,
          protos.google.iam.admin.v1.IListRolesResponse|null|undefined,
          protos.google.iam.admin.v1.IRole>): void;
/**
 * Lists the Roles defined on a resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The `parent` parameter's value depends on the target resource for the
 *   request, namely
 *   [`roles`](/iam/reference/rest/v1/roles),
 *   [`projects`](/iam/reference/rest/v1/projects.roles), or
 *   [`organizations`](/iam/reference/rest/v1/organizations.roles). Each
 *   resource type's `parent` value format is described below:
 *
 *   * [`roles.list()`](/iam/reference/rest/v1/roles/list): An empty string.
 *     This method doesn't require a resource; it simply returns all
 *     [predefined roles](/iam/docs/understanding-roles#predefined_roles) in
 *     Cloud IAM. Example request URL:
 *     `https://iam.googleapis.com/v1/roles`
 *
 *   * [`projects.roles.list()`](/iam/reference/rest/v1/projects.roles/list):
 *     `projects/{PROJECT_ID}`. This method lists all project-level
 *     [custom roles](/iam/docs/understanding-custom-roles).
 *     Example request URL:
 *     `https://iam.googleapis.com/v1/projects/{PROJECT_ID}/roles`
 *
 *   * [`organizations.roles.list()`](/iam/reference/rest/v1/organizations.roles/list):
 *     `organizations/{ORGANIZATION_ID}`. This method lists all
 *     organization-level [custom roles](/iam/docs/understanding-custom-roles).
 *     Example request URL:
 *     `https://iam.googleapis.com/v1/organizations/{ORGANIZATION_ID}/roles`
 *
 *   Note: Wildcard (*) values are invalid; you must specify a complete project
 *   ID or organization ID.
 * @param {number} request.pageSize
 *   Optional limit on the number of roles to include in the response.
 * @param {string} request.pageToken
 *   Optional pagination token returned in an earlier ListRolesResponse.
 * @param {google.iam.admin.v1.RoleView} request.view
 *   Optional view for the returned Role objects. When `FULL` is specified,
 *   the `includedPermissions` field is returned, which includes a list of all
 *   permissions in the role. The default value is `BASIC`, which does not
 *   return the `includedPermissions` field.
 * @param {boolean} request.showDeleted
 *   Include Roles that have been deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Role]{@link google.iam.admin.v1.Role}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listRolesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listRoles(
      request: protos.google.iam.admin.v1.IListRolesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.iam.admin.v1.IListRolesRequest,
          protos.google.iam.admin.v1.IListRolesResponse|null|undefined,
          protos.google.iam.admin.v1.IRole>,
      callback?: PaginationCallback<
          protos.google.iam.admin.v1.IListRolesRequest,
          protos.google.iam.admin.v1.IListRolesResponse|null|undefined,
          protos.google.iam.admin.v1.IRole>):
      Promise<[
        protos.google.iam.admin.v1.IRole[],
        protos.google.iam.admin.v1.IListRolesRequest|null,
        protos.google.iam.admin.v1.IListRolesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listRoles(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The `parent` parameter's value depends on the target resource for the
 *   request, namely
 *   [`roles`](/iam/reference/rest/v1/roles),
 *   [`projects`](/iam/reference/rest/v1/projects.roles), or
 *   [`organizations`](/iam/reference/rest/v1/organizations.roles). Each
 *   resource type's `parent` value format is described below:
 *
 *   * [`roles.list()`](/iam/reference/rest/v1/roles/list): An empty string.
 *     This method doesn't require a resource; it simply returns all
 *     [predefined roles](/iam/docs/understanding-roles#predefined_roles) in
 *     Cloud IAM. Example request URL:
 *     `https://iam.googleapis.com/v1/roles`
 *
 *   * [`projects.roles.list()`](/iam/reference/rest/v1/projects.roles/list):
 *     `projects/{PROJECT_ID}`. This method lists all project-level
 *     [custom roles](/iam/docs/understanding-custom-roles).
 *     Example request URL:
 *     `https://iam.googleapis.com/v1/projects/{PROJECT_ID}/roles`
 *
 *   * [`organizations.roles.list()`](/iam/reference/rest/v1/organizations.roles/list):
 *     `organizations/{ORGANIZATION_ID}`. This method lists all
 *     organization-level [custom roles](/iam/docs/understanding-custom-roles).
 *     Example request URL:
 *     `https://iam.googleapis.com/v1/organizations/{ORGANIZATION_ID}/roles`
 *
 *   Note: Wildcard (*) values are invalid; you must specify a complete project
 *   ID or organization ID.
 * @param {number} request.pageSize
 *   Optional limit on the number of roles to include in the response.
 * @param {string} request.pageToken
 *   Optional pagination token returned in an earlier ListRolesResponse.
 * @param {google.iam.admin.v1.RoleView} request.view
 *   Optional view for the returned Role objects. When `FULL` is specified,
 *   the `includedPermissions` field is returned, which includes a list of all
 *   permissions in the role. The default value is `BASIC`, which does not
 *   return the `includedPermissions` field.
 * @param {boolean} request.showDeleted
 *   Include Roles that have been deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Role]{@link google.iam.admin.v1.Role} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listRolesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listRolesStream(
      request?: protos.google.iam.admin.v1.IListRolesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listRoles.createStream(
      this.innerApiCalls.listRoles as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listRoles`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The `parent` parameter's value depends on the target resource for the
 *   request, namely
 *   [`roles`](/iam/reference/rest/v1/roles),
 *   [`projects`](/iam/reference/rest/v1/projects.roles), or
 *   [`organizations`](/iam/reference/rest/v1/organizations.roles). Each
 *   resource type's `parent` value format is described below:
 *
 *   * [`roles.list()`](/iam/reference/rest/v1/roles/list): An empty string.
 *     This method doesn't require a resource; it simply returns all
 *     [predefined roles](/iam/docs/understanding-roles#predefined_roles) in
 *     Cloud IAM. Example request URL:
 *     `https://iam.googleapis.com/v1/roles`
 *
 *   * [`projects.roles.list()`](/iam/reference/rest/v1/projects.roles/list):
 *     `projects/{PROJECT_ID}`. This method lists all project-level
 *     [custom roles](/iam/docs/understanding-custom-roles).
 *     Example request URL:
 *     `https://iam.googleapis.com/v1/projects/{PROJECT_ID}/roles`
 *
 *   * [`organizations.roles.list()`](/iam/reference/rest/v1/organizations.roles/list):
 *     `organizations/{ORGANIZATION_ID}`. This method lists all
 *     organization-level [custom roles](/iam/docs/understanding-custom-roles).
 *     Example request URL:
 *     `https://iam.googleapis.com/v1/organizations/{ORGANIZATION_ID}/roles`
 *
 *   Note: Wildcard (*) values are invalid; you must specify a complete project
 *   ID or organization ID.
 * @param {number} request.pageSize
 *   Optional limit on the number of roles to include in the response.
 * @param {string} request.pageToken
 *   Optional pagination token returned in an earlier ListRolesResponse.
 * @param {google.iam.admin.v1.RoleView} request.view
 *   Optional view for the returned Role objects. When `FULL` is specified,
 *   the `includedPermissions` field is returned, which includes a list of all
 *   permissions in the role. The default value is `BASIC`, which does not
 *   return the `includedPermissions` field.
 * @param {boolean} request.showDeleted
 *   Include Roles that have been deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Role]{@link google.iam.admin.v1.Role}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listRolesAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listRolesAsync(
      request?: protos.google.iam.admin.v1.IListRolesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.iam.admin.v1.IRole>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listRoles.asyncIterate(
      this.innerApiCalls['listRoles'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.iam.admin.v1.IRole>;
  }
  queryTestablePermissions(
      request: protos.google.iam.admin.v1.IQueryTestablePermissionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.iam.admin.v1.IPermission[],
        protos.google.iam.admin.v1.IQueryTestablePermissionsRequest|null,
        protos.google.iam.admin.v1.IQueryTestablePermissionsResponse
      ]>;
  queryTestablePermissions(
      request: protos.google.iam.admin.v1.IQueryTestablePermissionsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.iam.admin.v1.IQueryTestablePermissionsRequest,
          protos.google.iam.admin.v1.IQueryTestablePermissionsResponse|null|undefined,
          protos.google.iam.admin.v1.IPermission>): void;
  queryTestablePermissions(
      request: protos.google.iam.admin.v1.IQueryTestablePermissionsRequest,
      callback: PaginationCallback<
          protos.google.iam.admin.v1.IQueryTestablePermissionsRequest,
          protos.google.iam.admin.v1.IQueryTestablePermissionsResponse|null|undefined,
          protos.google.iam.admin.v1.IPermission>): void;
/**
 * Lists the permissions testable on a resource.
 * A permission is testable if it can be tested for an identity on a resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.fullResourceName
 *   Required. The full resource name to query from the list of testable
 *   permissions.
 *
 *   The name follows the Google Cloud Platform resource format.
 *   For example, a Cloud Platform project with id `my-project` will be named
 *   `//cloudresourcemanager.googleapis.com/projects/my-project`.
 * @param {number} request.pageSize
 *   Optional limit on the number of permissions to include in the response.
 * @param {string} request.pageToken
 *   Optional pagination token returned in an earlier
 *   QueryTestablePermissionsRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Permission]{@link google.iam.admin.v1.Permission}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `queryTestablePermissionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  queryTestablePermissions(
      request: protos.google.iam.admin.v1.IQueryTestablePermissionsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.iam.admin.v1.IQueryTestablePermissionsRequest,
          protos.google.iam.admin.v1.IQueryTestablePermissionsResponse|null|undefined,
          protos.google.iam.admin.v1.IPermission>,
      callback?: PaginationCallback<
          protos.google.iam.admin.v1.IQueryTestablePermissionsRequest,
          protos.google.iam.admin.v1.IQueryTestablePermissionsResponse|null|undefined,
          protos.google.iam.admin.v1.IPermission>):
      Promise<[
        protos.google.iam.admin.v1.IPermission[],
        protos.google.iam.admin.v1.IQueryTestablePermissionsRequest|null,
        protos.google.iam.admin.v1.IQueryTestablePermissionsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.queryTestablePermissions(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.fullResourceName
 *   Required. The full resource name to query from the list of testable
 *   permissions.
 *
 *   The name follows the Google Cloud Platform resource format.
 *   For example, a Cloud Platform project with id `my-project` will be named
 *   `//cloudresourcemanager.googleapis.com/projects/my-project`.
 * @param {number} request.pageSize
 *   Optional limit on the number of permissions to include in the response.
 * @param {string} request.pageToken
 *   Optional pagination token returned in an earlier
 *   QueryTestablePermissionsRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Permission]{@link google.iam.admin.v1.Permission} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `queryTestablePermissionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  queryTestablePermissionsStream(
      request?: protos.google.iam.admin.v1.IQueryTestablePermissionsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.queryTestablePermissions.createStream(
      this.innerApiCalls.queryTestablePermissions as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `queryTestablePermissions`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.fullResourceName
 *   Required. The full resource name to query from the list of testable
 *   permissions.
 *
 *   The name follows the Google Cloud Platform resource format.
 *   For example, a Cloud Platform project with id `my-project` will be named
 *   `//cloudresourcemanager.googleapis.com/projects/my-project`.
 * @param {number} request.pageSize
 *   Optional limit on the number of permissions to include in the response.
 * @param {string} request.pageToken
 *   Optional pagination token returned in an earlier
 *   QueryTestablePermissionsRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Permission]{@link google.iam.admin.v1.Permission}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.queryTestablePermissionsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  queryTestablePermissionsAsync(
      request?: protos.google.iam.admin.v1.IQueryTestablePermissionsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.iam.admin.v1.IPermission>{
    request = request || {};
    options = options || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.queryTestablePermissions.asyncIterate(
      this.innerApiCalls['queryTestablePermissions'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.iam.admin.v1.IPermission>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified key resource name string.
   *
   * @param {string} project
   * @param {string} service_account
   * @param {string} key
   * @returns {string} Resource name string.
   */
  keyPath(project:string,serviceAccount:string,key:string) {
    return this.pathTemplates.keyPathTemplate.render({
      project: project,
      service_account: serviceAccount,
      key: key,
    });
  }

  /**
   * Parse the project from Key resource.
   *
   * @param {string} keyName
   *   A fully-qualified path representing Key resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromKeyName(keyName: string) {
    return this.pathTemplates.keyPathTemplate.match(keyName).project;
  }

  /**
   * Parse the service_account from Key resource.
   *
   * @param {string} keyName
   *   A fully-qualified path representing Key resource.
   * @returns {string} A string representing the service_account.
   */
  matchServiceAccountFromKeyName(keyName: string) {
    return this.pathTemplates.keyPathTemplate.match(keyName).service_account;
  }

  /**
   * Parse the key from Key resource.
   *
   * @param {string} keyName
   *   A fully-qualified path representing Key resource.
   * @returns {string} A string representing the key.
   */
  matchKeyFromKeyName(keyName: string) {
    return this.pathTemplates.keyPathTemplate.match(keyName).key;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified serviceAccount resource name string.
   *
   * @param {string} project
   * @param {string} service_account
   * @returns {string} Resource name string.
   */
  serviceAccountPath(project:string,serviceAccount:string) {
    return this.pathTemplates.serviceAccountPathTemplate.render({
      project: project,
      service_account: serviceAccount,
    });
  }

  /**
   * Parse the project from ServiceAccount resource.
   *
   * @param {string} serviceAccountName
   *   A fully-qualified path representing ServiceAccount resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServiceAccountName(serviceAccountName: string) {
    return this.pathTemplates.serviceAccountPathTemplate.match(serviceAccountName).project;
  }

  /**
   * Parse the service_account from ServiceAccount resource.
   *
   * @param {string} serviceAccountName
   *   A fully-qualified path representing ServiceAccount resource.
   * @returns {string} A string representing the service_account.
   */
  matchServiceAccountFromServiceAccountName(serviceAccountName: string) {
    return this.pathTemplates.serviceAccountPathTemplate.match(serviceAccountName).service_account;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.iAMStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}

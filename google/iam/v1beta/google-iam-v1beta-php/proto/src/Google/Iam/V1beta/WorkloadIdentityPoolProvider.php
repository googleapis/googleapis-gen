<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/iam/v1beta/workload_identity_pool.proto

namespace Google\Iam\V1beta;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A configuration for an external identity provider.
 *
 * Generated from protobuf message <code>google.iam.v1beta.WorkloadIdentityPoolProvider</code>
 */
class WorkloadIdentityPoolProvider extends \Google\Protobuf\Internal\Message
{
    /**
     * Output only. The resource name of the provider.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    protected $name = '';
    /**
     * A display name for the provider. Cannot exceed 32 characters.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     */
    protected $display_name = '';
    /**
     * A description for the provider. Cannot exceed 256 characters.
     *
     * Generated from protobuf field <code>string description = 3;</code>
     */
    protected $description = '';
    /**
     * Output only. The state of the provider.
     *
     * Generated from protobuf field <code>.google.iam.v1beta.WorkloadIdentityPoolProvider.State state = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    protected $state = 0;
    /**
     * Whether the provider is disabled. You cannot use a disabled provider to
     * exchange tokens. However, existing tokens still grant access.
     *
     * Generated from protobuf field <code>bool disabled = 5;</code>
     */
    protected $disabled = false;
    /**
     * Maps attributes from authentication credentials issued by an external
     * identity provider to Google Cloud attributes, such as `subject` and
     * `segment`.
     * Each key must be a string specifying the Google Cloud IAM attribute to
     * map to.
     * The following keys are supported:
     * * `google.subject`: The principal IAM is authenticating. You can reference
     *                     this value in IAM bindings. This is also the
     *                     subject that appears in Cloud Logging logs.
     *                     Cannot exceed 127 characters.
     * * `google.groups`: Groups the external identity belongs to. You can grant
     *                    groups access to resources using an IAM `principalSet`
     *                    binding; access applies to all members of the group.
     * You can also provide custom attributes by specifying
     * `attribute.{custom_attribute}`, where `{custom_attribute}` is the name of
     * the custom attribute to be mapped. You can define a maximum of 50 custom
     * attributes. The maximum length of a mapped attribute key is
     * 100 characters, and the key may only contain the characters [a-z0-9_].
     * You can reference these attributes in IAM policies to define fine-grained
     * access for a workload to Google Cloud resources. For example:
     * * `google.subject`:
     * `principal://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/subject/{value}`
     * * `google.groups`:
     * `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/group/{value}`
     * * `attribute.{custom_attribute}`:
     * `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/attribute.{custom_attribute}/{value}`
     * Each value must be a [Common Expression Language]
     * (https://opensource.google/projects/cel) function that maps an
     * identity provider credential to the normalized attribute specified by the
     * corresponding map key.
     * You can use the `assertion` keyword in the expression to access a JSON
     * representation of the authentication credential issued by the provider.
     * The maximum length of an attribute mapping expression is 2048 characters.
     * When evaluated, the total size of all mapped attributes must not exceed
     * 8KB.
     * For AWS providers, the following rules apply:
     * - If no attribute mapping is defined, the following default mapping
     *   applies:
     *   ```
     *   {
     *     "google.subject":"assertion.arn",
     *     "attribute.aws_role":
     *         "assertion.arn.contains('assumed-role')"
     *         " ? assertion.arn.extract('{account_arn}assumed-role/')"
     *         "   + 'assumed-role/'"
     *         "   + assertion.arn.extract('assumed-role/{role_name}/')"
     *         " : assertion.arn",
     *   }
     *   ```
     * - If any custom attribute mappings are defined, they must include a mapping
     *   to the `google.subject` attribute.
     * For OIDC providers, the following rules apply:
     * - Custom attribute mappings must be defined, and must include a mapping to
     *   the `google.subject` attribute. For example, the following maps the
     *   `sub` claim of the incoming credential to the `subject` attribute on
     *   a Google token.
     *   ```
     *   {"google.subject": "assertion.sub"}
     *   ```
     *
     * Generated from protobuf field <code>map<string, string> attribute_mapping = 6;</code>
     */
    private $attribute_mapping;
    /**
     * [A Common Expression Language](https://opensource.google/projects/cel)
     * expression, in plain text, to restrict what otherwise valid authentication
     * credentials issued by the provider should not be accepted.
     * The expression must output a boolean representing whether to allow the
     * federation.
     * The following keywords may be referenced in the expressions:
     * * `assertion`: JSON representing the authentication credential issued by
     *                the provider.
     * * `google`: The Google attributes mapped from the assertion in the
     *             `attribute_mappings`.
     * * `attribute`: The custom attributes mapped from the assertion in the
     *                `attribute_mappings`.
     * The maximum length of the attribute condition expression is 4096
     * characters. If unspecified, all valid authentication credential are
     * accepted.
     * The following example shows how to only allow credentials with a mapped
     * `google.groups` value of `admins`:
     * ```
     * "'admins' in google.groups"
     * ```
     *
     * Generated from protobuf field <code>string attribute_condition = 7;</code>
     */
    protected $attribute_condition = '';
    protected $provider_config;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           Output only. The resource name of the provider.
     *     @type string $display_name
     *           A display name for the provider. Cannot exceed 32 characters.
     *     @type string $description
     *           A description for the provider. Cannot exceed 256 characters.
     *     @type int $state
     *           Output only. The state of the provider.
     *     @type bool $disabled
     *           Whether the provider is disabled. You cannot use a disabled provider to
     *           exchange tokens. However, existing tokens still grant access.
     *     @type array|\Google\Protobuf\Internal\MapField $attribute_mapping
     *           Maps attributes from authentication credentials issued by an external
     *           identity provider to Google Cloud attributes, such as `subject` and
     *           `segment`.
     *           Each key must be a string specifying the Google Cloud IAM attribute to
     *           map to.
     *           The following keys are supported:
     *           * `google.subject`: The principal IAM is authenticating. You can reference
     *                               this value in IAM bindings. This is also the
     *                               subject that appears in Cloud Logging logs.
     *                               Cannot exceed 127 characters.
     *           * `google.groups`: Groups the external identity belongs to. You can grant
     *                              groups access to resources using an IAM `principalSet`
     *                              binding; access applies to all members of the group.
     *           You can also provide custom attributes by specifying
     *           `attribute.{custom_attribute}`, where `{custom_attribute}` is the name of
     *           the custom attribute to be mapped. You can define a maximum of 50 custom
     *           attributes. The maximum length of a mapped attribute key is
     *           100 characters, and the key may only contain the characters [a-z0-9_].
     *           You can reference these attributes in IAM policies to define fine-grained
     *           access for a workload to Google Cloud resources. For example:
     *           * `google.subject`:
     *           `principal://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/subject/{value}`
     *           * `google.groups`:
     *           `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/group/{value}`
     *           * `attribute.{custom_attribute}`:
     *           `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/attribute.{custom_attribute}/{value}`
     *           Each value must be a [Common Expression Language]
     *           (https://opensource.google/projects/cel) function that maps an
     *           identity provider credential to the normalized attribute specified by the
     *           corresponding map key.
     *           You can use the `assertion` keyword in the expression to access a JSON
     *           representation of the authentication credential issued by the provider.
     *           The maximum length of an attribute mapping expression is 2048 characters.
     *           When evaluated, the total size of all mapped attributes must not exceed
     *           8KB.
     *           For AWS providers, the following rules apply:
     *           - If no attribute mapping is defined, the following default mapping
     *             applies:
     *             ```
     *             {
     *               "google.subject":"assertion.arn",
     *               "attribute.aws_role":
     *                   "assertion.arn.contains('assumed-role')"
     *                   " ? assertion.arn.extract('{account_arn}assumed-role/')"
     *                   "   + 'assumed-role/'"
     *                   "   + assertion.arn.extract('assumed-role/{role_name}/')"
     *                   " : assertion.arn",
     *             }
     *             ```
     *           - If any custom attribute mappings are defined, they must include a mapping
     *             to the `google.subject` attribute.
     *           For OIDC providers, the following rules apply:
     *           - Custom attribute mappings must be defined, and must include a mapping to
     *             the `google.subject` attribute. For example, the following maps the
     *             `sub` claim of the incoming credential to the `subject` attribute on
     *             a Google token.
     *             ```
     *             {"google.subject": "assertion.sub"}
     *             ```
     *     @type string $attribute_condition
     *           [A Common Expression Language](https://opensource.google/projects/cel)
     *           expression, in plain text, to restrict what otherwise valid authentication
     *           credentials issued by the provider should not be accepted.
     *           The expression must output a boolean representing whether to allow the
     *           federation.
     *           The following keywords may be referenced in the expressions:
     *           * `assertion`: JSON representing the authentication credential issued by
     *                          the provider.
     *           * `google`: The Google attributes mapped from the assertion in the
     *                       `attribute_mappings`.
     *           * `attribute`: The custom attributes mapped from the assertion in the
     *                          `attribute_mappings`.
     *           The maximum length of the attribute condition expression is 4096
     *           characters. If unspecified, all valid authentication credential are
     *           accepted.
     *           The following example shows how to only allow credentials with a mapped
     *           `google.groups` value of `admins`:
     *           ```
     *           "'admins' in google.groups"
     *           ```
     *     @type \Google\Iam\V1beta\WorkloadIdentityPoolProvider\Aws $aws
     *           An Amazon Web Services identity provider.
     *     @type \Google\Iam\V1beta\WorkloadIdentityPoolProvider\Oidc $oidc
     *           An OpenId Connect 1.0 identity provider.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Iam\V1Beta\WorkloadIdentityPool::initOnce();
        parent::__construct($data);
    }

    /**
     * Output only. The resource name of the provider.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Output only. The resource name of the provider.
     *
     * Generated from protobuf field <code>string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * A display name for the provider. Cannot exceed 32 characters.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }

    /**
     * A display name for the provider. Cannot exceed 32 characters.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDisplayName($var)
    {
        GPBUtil::checkString($var, True);
        $this->display_name = $var;

        return $this;
    }

    /**
     * A description for the provider. Cannot exceed 256 characters.
     *
     * Generated from protobuf field <code>string description = 3;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * A description for the provider. Cannot exceed 256 characters.
     *
     * Generated from protobuf field <code>string description = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     * Output only. The state of the provider.
     *
     * Generated from protobuf field <code>.google.iam.v1beta.WorkloadIdentityPoolProvider.State state = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return int
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Output only. The state of the provider.
     *
     * Generated from protobuf field <code>.google.iam.v1beta.WorkloadIdentityPoolProvider.State state = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @param int $var
     * @return $this
     */
    public function setState($var)
    {
        GPBUtil::checkEnum($var, \Google\Iam\V1beta\WorkloadIdentityPoolProvider\State::class);
        $this->state = $var;

        return $this;
    }

    /**
     * Whether the provider is disabled. You cannot use a disabled provider to
     * exchange tokens. However, existing tokens still grant access.
     *
     * Generated from protobuf field <code>bool disabled = 5;</code>
     * @return bool
     */
    public function getDisabled()
    {
        return $this->disabled;
    }

    /**
     * Whether the provider is disabled. You cannot use a disabled provider to
     * exchange tokens. However, existing tokens still grant access.
     *
     * Generated from protobuf field <code>bool disabled = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setDisabled($var)
    {
        GPBUtil::checkBool($var);
        $this->disabled = $var;

        return $this;
    }

    /**
     * Maps attributes from authentication credentials issued by an external
     * identity provider to Google Cloud attributes, such as `subject` and
     * `segment`.
     * Each key must be a string specifying the Google Cloud IAM attribute to
     * map to.
     * The following keys are supported:
     * * `google.subject`: The principal IAM is authenticating. You can reference
     *                     this value in IAM bindings. This is also the
     *                     subject that appears in Cloud Logging logs.
     *                     Cannot exceed 127 characters.
     * * `google.groups`: Groups the external identity belongs to. You can grant
     *                    groups access to resources using an IAM `principalSet`
     *                    binding; access applies to all members of the group.
     * You can also provide custom attributes by specifying
     * `attribute.{custom_attribute}`, where `{custom_attribute}` is the name of
     * the custom attribute to be mapped. You can define a maximum of 50 custom
     * attributes. The maximum length of a mapped attribute key is
     * 100 characters, and the key may only contain the characters [a-z0-9_].
     * You can reference these attributes in IAM policies to define fine-grained
     * access for a workload to Google Cloud resources. For example:
     * * `google.subject`:
     * `principal://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/subject/{value}`
     * * `google.groups`:
     * `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/group/{value}`
     * * `attribute.{custom_attribute}`:
     * `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/attribute.{custom_attribute}/{value}`
     * Each value must be a [Common Expression Language]
     * (https://opensource.google/projects/cel) function that maps an
     * identity provider credential to the normalized attribute specified by the
     * corresponding map key.
     * You can use the `assertion` keyword in the expression to access a JSON
     * representation of the authentication credential issued by the provider.
     * The maximum length of an attribute mapping expression is 2048 characters.
     * When evaluated, the total size of all mapped attributes must not exceed
     * 8KB.
     * For AWS providers, the following rules apply:
     * - If no attribute mapping is defined, the following default mapping
     *   applies:
     *   ```
     *   {
     *     "google.subject":"assertion.arn",
     *     "attribute.aws_role":
     *         "assertion.arn.contains('assumed-role')"
     *         " ? assertion.arn.extract('{account_arn}assumed-role/')"
     *         "   + 'assumed-role/'"
     *         "   + assertion.arn.extract('assumed-role/{role_name}/')"
     *         " : assertion.arn",
     *   }
     *   ```
     * - If any custom attribute mappings are defined, they must include a mapping
     *   to the `google.subject` attribute.
     * For OIDC providers, the following rules apply:
     * - Custom attribute mappings must be defined, and must include a mapping to
     *   the `google.subject` attribute. For example, the following maps the
     *   `sub` claim of the incoming credential to the `subject` attribute on
     *   a Google token.
     *   ```
     *   {"google.subject": "assertion.sub"}
     *   ```
     *
     * Generated from protobuf field <code>map<string, string> attribute_mapping = 6;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getAttributeMapping()
    {
        return $this->attribute_mapping;
    }

    /**
     * Maps attributes from authentication credentials issued by an external
     * identity provider to Google Cloud attributes, such as `subject` and
     * `segment`.
     * Each key must be a string specifying the Google Cloud IAM attribute to
     * map to.
     * The following keys are supported:
     * * `google.subject`: The principal IAM is authenticating. You can reference
     *                     this value in IAM bindings. This is also the
     *                     subject that appears in Cloud Logging logs.
     *                     Cannot exceed 127 characters.
     * * `google.groups`: Groups the external identity belongs to. You can grant
     *                    groups access to resources using an IAM `principalSet`
     *                    binding; access applies to all members of the group.
     * You can also provide custom attributes by specifying
     * `attribute.{custom_attribute}`, where `{custom_attribute}` is the name of
     * the custom attribute to be mapped. You can define a maximum of 50 custom
     * attributes. The maximum length of a mapped attribute key is
     * 100 characters, and the key may only contain the characters [a-z0-9_].
     * You can reference these attributes in IAM policies to define fine-grained
     * access for a workload to Google Cloud resources. For example:
     * * `google.subject`:
     * `principal://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/subject/{value}`
     * * `google.groups`:
     * `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/group/{value}`
     * * `attribute.{custom_attribute}`:
     * `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/attribute.{custom_attribute}/{value}`
     * Each value must be a [Common Expression Language]
     * (https://opensource.google/projects/cel) function that maps an
     * identity provider credential to the normalized attribute specified by the
     * corresponding map key.
     * You can use the `assertion` keyword in the expression to access a JSON
     * representation of the authentication credential issued by the provider.
     * The maximum length of an attribute mapping expression is 2048 characters.
     * When evaluated, the total size of all mapped attributes must not exceed
     * 8KB.
     * For AWS providers, the following rules apply:
     * - If no attribute mapping is defined, the following default mapping
     *   applies:
     *   ```
     *   {
     *     "google.subject":"assertion.arn",
     *     "attribute.aws_role":
     *         "assertion.arn.contains('assumed-role')"
     *         " ? assertion.arn.extract('{account_arn}assumed-role/')"
     *         "   + 'assumed-role/'"
     *         "   + assertion.arn.extract('assumed-role/{role_name}/')"
     *         " : assertion.arn",
     *   }
     *   ```
     * - If any custom attribute mappings are defined, they must include a mapping
     *   to the `google.subject` attribute.
     * For OIDC providers, the following rules apply:
     * - Custom attribute mappings must be defined, and must include a mapping to
     *   the `google.subject` attribute. For example, the following maps the
     *   `sub` claim of the incoming credential to the `subject` attribute on
     *   a Google token.
     *   ```
     *   {"google.subject": "assertion.sub"}
     *   ```
     *
     * Generated from protobuf field <code>map<string, string> attribute_mapping = 6;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setAttributeMapping($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->attribute_mapping = $arr;

        return $this;
    }

    /**
     * [A Common Expression Language](https://opensource.google/projects/cel)
     * expression, in plain text, to restrict what otherwise valid authentication
     * credentials issued by the provider should not be accepted.
     * The expression must output a boolean representing whether to allow the
     * federation.
     * The following keywords may be referenced in the expressions:
     * * `assertion`: JSON representing the authentication credential issued by
     *                the provider.
     * * `google`: The Google attributes mapped from the assertion in the
     *             `attribute_mappings`.
     * * `attribute`: The custom attributes mapped from the assertion in the
     *                `attribute_mappings`.
     * The maximum length of the attribute condition expression is 4096
     * characters. If unspecified, all valid authentication credential are
     * accepted.
     * The following example shows how to only allow credentials with a mapped
     * `google.groups` value of `admins`:
     * ```
     * "'admins' in google.groups"
     * ```
     *
     * Generated from protobuf field <code>string attribute_condition = 7;</code>
     * @return string
     */
    public function getAttributeCondition()
    {
        return $this->attribute_condition;
    }

    /**
     * [A Common Expression Language](https://opensource.google/projects/cel)
     * expression, in plain text, to restrict what otherwise valid authentication
     * credentials issued by the provider should not be accepted.
     * The expression must output a boolean representing whether to allow the
     * federation.
     * The following keywords may be referenced in the expressions:
     * * `assertion`: JSON representing the authentication credential issued by
     *                the provider.
     * * `google`: The Google attributes mapped from the assertion in the
     *             `attribute_mappings`.
     * * `attribute`: The custom attributes mapped from the assertion in the
     *                `attribute_mappings`.
     * The maximum length of the attribute condition expression is 4096
     * characters. If unspecified, all valid authentication credential are
     * accepted.
     * The following example shows how to only allow credentials with a mapped
     * `google.groups` value of `admins`:
     * ```
     * "'admins' in google.groups"
     * ```
     *
     * Generated from protobuf field <code>string attribute_condition = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setAttributeCondition($var)
    {
        GPBUtil::checkString($var, True);
        $this->attribute_condition = $var;

        return $this;
    }

    /**
     * An Amazon Web Services identity provider.
     *
     * Generated from protobuf field <code>.google.iam.v1beta.WorkloadIdentityPoolProvider.Aws aws = 8;</code>
     * @return \Google\Iam\V1beta\WorkloadIdentityPoolProvider\Aws
     */
    public function getAws()
    {
        return $this->readOneof(8);
    }

    public function hasAws()
    {
        return $this->hasOneof(8);
    }

    /**
     * An Amazon Web Services identity provider.
     *
     * Generated from protobuf field <code>.google.iam.v1beta.WorkloadIdentityPoolProvider.Aws aws = 8;</code>
     * @param \Google\Iam\V1beta\WorkloadIdentityPoolProvider\Aws $var
     * @return $this
     */
    public function setAws($var)
    {
        GPBUtil::checkMessage($var, \Google\Iam\V1beta\WorkloadIdentityPoolProvider\Aws::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * An OpenId Connect 1.0 identity provider.
     *
     * Generated from protobuf field <code>.google.iam.v1beta.WorkloadIdentityPoolProvider.Oidc oidc = 9;</code>
     * @return \Google\Iam\V1beta\WorkloadIdentityPoolProvider\Oidc
     */
    public function getOidc()
    {
        return $this->readOneof(9);
    }

    public function hasOidc()
    {
        return $this->hasOneof(9);
    }

    /**
     * An OpenId Connect 1.0 identity provider.
     *
     * Generated from protobuf field <code>.google.iam.v1beta.WorkloadIdentityPoolProvider.Oidc oidc = 9;</code>
     * @param \Google\Iam\V1beta\WorkloadIdentityPoolProvider\Oidc $var
     * @return $this
     */
    public function setOidc($var)
    {
        GPBUtil::checkMessage($var, \Google\Iam\V1beta\WorkloadIdentityPoolProvider\Oidc::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getProviderConfig()
    {
        return $this->whichOneof("provider_config");
    }

}


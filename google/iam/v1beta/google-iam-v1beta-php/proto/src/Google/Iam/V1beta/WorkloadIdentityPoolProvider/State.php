<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/iam/v1beta/workload_identity_pool.proto

namespace Google\Iam\V1beta\WorkloadIdentityPoolProvider;

use UnexpectedValueException;

/**
 * The current state of the provider.
 *
 * Protobuf type <code>google.iam.v1beta.WorkloadIdentityPoolProvider.State</code>
 */
class State
{
    /**
     * State unspecified.
     *
     * Generated from protobuf enum <code>STATE_UNSPECIFIED = 0;</code>
     */
    const STATE_UNSPECIFIED = 0;
    /**
     * The provider is active, and may be used to validate authentication
     * credentials.
     *
     * Generated from protobuf enum <code>ACTIVE = 1;</code>
     */
    const ACTIVE = 1;
    /**
     * The provider is soft-deleted. Soft-deleted providers are permanently
     * deleted after approximately 30 days. You can restore a soft-deleted
     * provider using
     * [UndeleteWorkloadIdentityPoolProvider][google.iam.v1beta.WorkloadIdentityPools.UndeleteWorkloadIdentityPoolProvider].
     * You cannot reuse the ID of a soft-deleted provider until it is
     * permanently deleted.
     *
     * Generated from protobuf enum <code>DELETED = 2;</code>
     */
    const DELETED = 2;

    private static $valueToName = [
        self::STATE_UNSPECIFIED => 'STATE_UNSPECIFIED',
        self::ACTIVE => 'ACTIVE',
        self::DELETED => 'DELETED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(State::class, \Google\Iam\V1beta\WorkloadIdentityPoolProvider_State::class);


// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as workloadidentitypoolsModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1beta.WorkloadIdentityPoolsClient', () => {
    it('has servicePath', () => {
        const servicePath = workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.workloadIdentityPoolsStub, undefined);
        await client.initialize();
        assert(client.workloadIdentityPoolsStub);
    });

    it('has close method', () => {
        const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getWorkloadIdentityPool', () => {
        it('invokes getWorkloadIdentityPool without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.GetWorkloadIdentityPoolRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPool());
            client.innerApiCalls.getWorkloadIdentityPool = stubSimpleCall(expectedResponse);
            const [response] = await client.getWorkloadIdentityPool(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getWorkloadIdentityPool without error using callback', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.GetWorkloadIdentityPoolRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPool());
            client.innerApiCalls.getWorkloadIdentityPool = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getWorkloadIdentityPool(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1beta.IWorkloadIdentityPool|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getWorkloadIdentityPool with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.GetWorkloadIdentityPoolRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getWorkloadIdentityPool = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getWorkloadIdentityPool(request), expectedError);
            assert((client.innerApiCalls.getWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getWorkloadIdentityPoolProvider', () => {
        it('invokes getWorkloadIdentityPoolProvider without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.GetWorkloadIdentityPoolProviderRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPoolProvider());
            client.innerApiCalls.getWorkloadIdentityPoolProvider = stubSimpleCall(expectedResponse);
            const [response] = await client.getWorkloadIdentityPoolProvider(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getWorkloadIdentityPoolProvider without error using callback', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.GetWorkloadIdentityPoolProviderRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPoolProvider());
            client.innerApiCalls.getWorkloadIdentityPoolProvider = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getWorkloadIdentityPoolProvider(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1beta.IWorkloadIdentityPoolProvider|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getWorkloadIdentityPoolProvider with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.GetWorkloadIdentityPoolProviderRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getWorkloadIdentityPoolProvider = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getWorkloadIdentityPoolProvider(request), expectedError);
            assert((client.innerApiCalls.getWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createWorkloadIdentityPool', () => {
        it('invokes createWorkloadIdentityPool without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.CreateWorkloadIdentityPoolRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createWorkloadIdentityPool = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createWorkloadIdentityPool(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createWorkloadIdentityPool without error using callback', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.CreateWorkloadIdentityPoolRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createWorkloadIdentityPool = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createWorkloadIdentityPool(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.iam.v1beta.IWorkloadIdentityPool, protos.google.iam.v1beta.IWorkloadIdentityPoolOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.iam.v1beta.IWorkloadIdentityPool, protos.google.iam.v1beta.IWorkloadIdentityPoolOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createWorkloadIdentityPool with call error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.CreateWorkloadIdentityPoolRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createWorkloadIdentityPool = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createWorkloadIdentityPool(request), expectedError);
            assert((client.innerApiCalls.createWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createWorkloadIdentityPool with LRO error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.CreateWorkloadIdentityPoolRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createWorkloadIdentityPool = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createWorkloadIdentityPool(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateWorkloadIdentityPoolProgress without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateWorkloadIdentityPoolProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateWorkloadIdentityPoolProgress with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateWorkloadIdentityPoolProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateWorkloadIdentityPool', () => {
        it('invokes updateWorkloadIdentityPool without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UpdateWorkloadIdentityPoolRequest());
            request.workloadIdentityPool = {};
            request.workloadIdentityPool.name = '';
            const expectedHeaderRequestParams = "workload_identity_pool.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateWorkloadIdentityPool = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateWorkloadIdentityPool(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateWorkloadIdentityPool without error using callback', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UpdateWorkloadIdentityPoolRequest());
            request.workloadIdentityPool = {};
            request.workloadIdentityPool.name = '';
            const expectedHeaderRequestParams = "workload_identity_pool.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateWorkloadIdentityPool = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateWorkloadIdentityPool(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.iam.v1beta.IWorkloadIdentityPool, protos.google.iam.v1beta.IWorkloadIdentityPoolOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.iam.v1beta.IWorkloadIdentityPool, protos.google.iam.v1beta.IWorkloadIdentityPoolOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateWorkloadIdentityPool with call error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UpdateWorkloadIdentityPoolRequest());
            request.workloadIdentityPool = {};
            request.workloadIdentityPool.name = '';
            const expectedHeaderRequestParams = "workload_identity_pool.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateWorkloadIdentityPool = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateWorkloadIdentityPool(request), expectedError);
            assert((client.innerApiCalls.updateWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateWorkloadIdentityPool with LRO error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UpdateWorkloadIdentityPoolRequest());
            request.workloadIdentityPool = {};
            request.workloadIdentityPool.name = '';
            const expectedHeaderRequestParams = "workload_identity_pool.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateWorkloadIdentityPool = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateWorkloadIdentityPool(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateWorkloadIdentityPoolProgress without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateWorkloadIdentityPoolProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateWorkloadIdentityPoolProgress with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateWorkloadIdentityPoolProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteWorkloadIdentityPool', () => {
        it('invokes deleteWorkloadIdentityPool without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.DeleteWorkloadIdentityPoolRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteWorkloadIdentityPool = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteWorkloadIdentityPool(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteWorkloadIdentityPool without error using callback', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.DeleteWorkloadIdentityPoolRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteWorkloadIdentityPool = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteWorkloadIdentityPool(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.iam.v1beta.IWorkloadIdentityPool, protos.google.iam.v1beta.IWorkloadIdentityPoolOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.iam.v1beta.IWorkloadIdentityPool, protos.google.iam.v1beta.IWorkloadIdentityPoolOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteWorkloadIdentityPool with call error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.DeleteWorkloadIdentityPoolRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteWorkloadIdentityPool = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteWorkloadIdentityPool(request), expectedError);
            assert((client.innerApiCalls.deleteWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteWorkloadIdentityPool with LRO error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.DeleteWorkloadIdentityPoolRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteWorkloadIdentityPool = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteWorkloadIdentityPool(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteWorkloadIdentityPoolProgress without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteWorkloadIdentityPoolProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteWorkloadIdentityPoolProgress with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteWorkloadIdentityPoolProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('undeleteWorkloadIdentityPool', () => {
        it('invokes undeleteWorkloadIdentityPool without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UndeleteWorkloadIdentityPoolRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.undeleteWorkloadIdentityPool = stubLongRunningCall(expectedResponse);
            const [operation] = await client.undeleteWorkloadIdentityPool(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.undeleteWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes undeleteWorkloadIdentityPool without error using callback', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UndeleteWorkloadIdentityPoolRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.undeleteWorkloadIdentityPool = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.undeleteWorkloadIdentityPool(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.iam.v1beta.IWorkloadIdentityPool, protos.google.iam.v1beta.IWorkloadIdentityPoolOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.iam.v1beta.IWorkloadIdentityPool, protos.google.iam.v1beta.IWorkloadIdentityPoolOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.undeleteWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes undeleteWorkloadIdentityPool with call error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UndeleteWorkloadIdentityPoolRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.undeleteWorkloadIdentityPool = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.undeleteWorkloadIdentityPool(request), expectedError);
            assert((client.innerApiCalls.undeleteWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes undeleteWorkloadIdentityPool with LRO error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UndeleteWorkloadIdentityPoolRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.undeleteWorkloadIdentityPool = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.undeleteWorkloadIdentityPool(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.undeleteWorkloadIdentityPool as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUndeleteWorkloadIdentityPoolProgress without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUndeleteWorkloadIdentityPoolProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUndeleteWorkloadIdentityPoolProgress with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUndeleteWorkloadIdentityPoolProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createWorkloadIdentityPoolProvider', () => {
        it('invokes createWorkloadIdentityPoolProvider without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.CreateWorkloadIdentityPoolProviderRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createWorkloadIdentityPoolProvider = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createWorkloadIdentityPoolProvider(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createWorkloadIdentityPoolProvider without error using callback', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.CreateWorkloadIdentityPoolProviderRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createWorkloadIdentityPoolProvider = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createWorkloadIdentityPoolProvider(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.iam.v1beta.IWorkloadIdentityPoolProvider, protos.google.iam.v1beta.IWorkloadIdentityPoolProviderOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.iam.v1beta.IWorkloadIdentityPoolProvider, protos.google.iam.v1beta.IWorkloadIdentityPoolProviderOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createWorkloadIdentityPoolProvider with call error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.CreateWorkloadIdentityPoolProviderRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createWorkloadIdentityPoolProvider = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createWorkloadIdentityPoolProvider(request), expectedError);
            assert((client.innerApiCalls.createWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createWorkloadIdentityPoolProvider with LRO error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.CreateWorkloadIdentityPoolProviderRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createWorkloadIdentityPoolProvider = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createWorkloadIdentityPoolProvider(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateWorkloadIdentityPoolProviderProgress without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateWorkloadIdentityPoolProviderProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateWorkloadIdentityPoolProviderProgress with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateWorkloadIdentityPoolProviderProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateWorkloadIdentityPoolProvider', () => {
        it('invokes updateWorkloadIdentityPoolProvider without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UpdateWorkloadIdentityPoolProviderRequest());
            request.workloadIdentityPoolProvider = {};
            request.workloadIdentityPoolProvider.name = '';
            const expectedHeaderRequestParams = "workload_identity_pool_provider.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateWorkloadIdentityPoolProvider = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateWorkloadIdentityPoolProvider(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateWorkloadIdentityPoolProvider without error using callback', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UpdateWorkloadIdentityPoolProviderRequest());
            request.workloadIdentityPoolProvider = {};
            request.workloadIdentityPoolProvider.name = '';
            const expectedHeaderRequestParams = "workload_identity_pool_provider.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateWorkloadIdentityPoolProvider = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateWorkloadIdentityPoolProvider(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.iam.v1beta.IWorkloadIdentityPoolProvider, protos.google.iam.v1beta.IWorkloadIdentityPoolProviderOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.iam.v1beta.IWorkloadIdentityPoolProvider, protos.google.iam.v1beta.IWorkloadIdentityPoolProviderOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateWorkloadIdentityPoolProvider with call error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UpdateWorkloadIdentityPoolProviderRequest());
            request.workloadIdentityPoolProvider = {};
            request.workloadIdentityPoolProvider.name = '';
            const expectedHeaderRequestParams = "workload_identity_pool_provider.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateWorkloadIdentityPoolProvider = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateWorkloadIdentityPoolProvider(request), expectedError);
            assert((client.innerApiCalls.updateWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateWorkloadIdentityPoolProvider with LRO error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UpdateWorkloadIdentityPoolProviderRequest());
            request.workloadIdentityPoolProvider = {};
            request.workloadIdentityPoolProvider.name = '';
            const expectedHeaderRequestParams = "workload_identity_pool_provider.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateWorkloadIdentityPoolProvider = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateWorkloadIdentityPoolProvider(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateWorkloadIdentityPoolProviderProgress without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateWorkloadIdentityPoolProviderProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateWorkloadIdentityPoolProviderProgress with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateWorkloadIdentityPoolProviderProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteWorkloadIdentityPoolProvider', () => {
        it('invokes deleteWorkloadIdentityPoolProvider without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.DeleteWorkloadIdentityPoolProviderRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteWorkloadIdentityPoolProvider = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteWorkloadIdentityPoolProvider(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteWorkloadIdentityPoolProvider without error using callback', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.DeleteWorkloadIdentityPoolProviderRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteWorkloadIdentityPoolProvider = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteWorkloadIdentityPoolProvider(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.iam.v1beta.IWorkloadIdentityPoolProvider, protos.google.iam.v1beta.IWorkloadIdentityPoolProviderOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.iam.v1beta.IWorkloadIdentityPoolProvider, protos.google.iam.v1beta.IWorkloadIdentityPoolProviderOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteWorkloadIdentityPoolProvider with call error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.DeleteWorkloadIdentityPoolProviderRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteWorkloadIdentityPoolProvider = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteWorkloadIdentityPoolProvider(request), expectedError);
            assert((client.innerApiCalls.deleteWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteWorkloadIdentityPoolProvider with LRO error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.DeleteWorkloadIdentityPoolProviderRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteWorkloadIdentityPoolProvider = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteWorkloadIdentityPoolProvider(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteWorkloadIdentityPoolProviderProgress without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteWorkloadIdentityPoolProviderProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteWorkloadIdentityPoolProviderProgress with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteWorkloadIdentityPoolProviderProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('undeleteWorkloadIdentityPoolProvider', () => {
        it('invokes undeleteWorkloadIdentityPoolProvider without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UndeleteWorkloadIdentityPoolProviderRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.undeleteWorkloadIdentityPoolProvider = stubLongRunningCall(expectedResponse);
            const [operation] = await client.undeleteWorkloadIdentityPoolProvider(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.undeleteWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes undeleteWorkloadIdentityPoolProvider without error using callback', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UndeleteWorkloadIdentityPoolProviderRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.undeleteWorkloadIdentityPoolProvider = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.undeleteWorkloadIdentityPoolProvider(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.iam.v1beta.IWorkloadIdentityPoolProvider, protos.google.iam.v1beta.IWorkloadIdentityPoolProviderOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.iam.v1beta.IWorkloadIdentityPoolProvider, protos.google.iam.v1beta.IWorkloadIdentityPoolProviderOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.undeleteWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes undeleteWorkloadIdentityPoolProvider with call error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UndeleteWorkloadIdentityPoolProviderRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.undeleteWorkloadIdentityPoolProvider = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.undeleteWorkloadIdentityPoolProvider(request), expectedError);
            assert((client.innerApiCalls.undeleteWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes undeleteWorkloadIdentityPoolProvider with LRO error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.UndeleteWorkloadIdentityPoolProviderRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.undeleteWorkloadIdentityPoolProvider = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.undeleteWorkloadIdentityPoolProvider(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.undeleteWorkloadIdentityPoolProvider as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUndeleteWorkloadIdentityPoolProviderProgress without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUndeleteWorkloadIdentityPoolProviderProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUndeleteWorkloadIdentityPoolProviderProgress with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUndeleteWorkloadIdentityPoolProviderProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listWorkloadIdentityPools', () => {
        it('invokes listWorkloadIdentityPools without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.ListWorkloadIdentityPoolsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPool()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPool()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPool()),
            ];
            client.innerApiCalls.listWorkloadIdentityPools = stubSimpleCall(expectedResponse);
            const [response] = await client.listWorkloadIdentityPools(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listWorkloadIdentityPools as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listWorkloadIdentityPools without error using callback', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.ListWorkloadIdentityPoolsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPool()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPool()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPool()),
            ];
            client.innerApiCalls.listWorkloadIdentityPools = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listWorkloadIdentityPools(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1beta.IWorkloadIdentityPool[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listWorkloadIdentityPools as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listWorkloadIdentityPools with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.ListWorkloadIdentityPoolsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listWorkloadIdentityPools = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listWorkloadIdentityPools(request), expectedError);
            assert((client.innerApiCalls.listWorkloadIdentityPools as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listWorkloadIdentityPoolsStream without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.ListWorkloadIdentityPoolsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPool()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPool()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPool()),
            ];
            client.descriptors.page.listWorkloadIdentityPools.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listWorkloadIdentityPoolsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.iam.v1beta.WorkloadIdentityPool[] = [];
                stream.on('data', (response: protos.google.iam.v1beta.WorkloadIdentityPool) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listWorkloadIdentityPools.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listWorkloadIdentityPools, request));
            assert.strictEqual(
                (client.descriptors.page.listWorkloadIdentityPools.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listWorkloadIdentityPoolsStream with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.ListWorkloadIdentityPoolsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listWorkloadIdentityPools.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listWorkloadIdentityPoolsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.iam.v1beta.WorkloadIdentityPool[] = [];
                stream.on('data', (response: protos.google.iam.v1beta.WorkloadIdentityPool) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listWorkloadIdentityPools.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listWorkloadIdentityPools, request));
            assert.strictEqual(
                (client.descriptors.page.listWorkloadIdentityPools.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listWorkloadIdentityPools without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.ListWorkloadIdentityPoolsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPool()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPool()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPool()),
            ];
            client.descriptors.page.listWorkloadIdentityPools.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.iam.v1beta.IWorkloadIdentityPool[] = [];
            const iterable = client.listWorkloadIdentityPoolsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listWorkloadIdentityPools.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listWorkloadIdentityPools.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listWorkloadIdentityPools with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.ListWorkloadIdentityPoolsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listWorkloadIdentityPools.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listWorkloadIdentityPoolsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.iam.v1beta.IWorkloadIdentityPool[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listWorkloadIdentityPools.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listWorkloadIdentityPools.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listWorkloadIdentityPoolProviders', () => {
        it('invokes listWorkloadIdentityPoolProviders without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.ListWorkloadIdentityPoolProvidersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPoolProvider()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPoolProvider()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPoolProvider()),
            ];
            client.innerApiCalls.listWorkloadIdentityPoolProviders = stubSimpleCall(expectedResponse);
            const [response] = await client.listWorkloadIdentityPoolProviders(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listWorkloadIdentityPoolProviders as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listWorkloadIdentityPoolProviders without error using callback', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.ListWorkloadIdentityPoolProvidersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPoolProvider()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPoolProvider()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPoolProvider()),
            ];
            client.innerApiCalls.listWorkloadIdentityPoolProviders = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listWorkloadIdentityPoolProviders(
                    request,
                    (err?: Error|null, result?: protos.google.iam.v1beta.IWorkloadIdentityPoolProvider[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listWorkloadIdentityPoolProviders as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listWorkloadIdentityPoolProviders with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.ListWorkloadIdentityPoolProvidersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listWorkloadIdentityPoolProviders = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listWorkloadIdentityPoolProviders(request), expectedError);
            assert((client.innerApiCalls.listWorkloadIdentityPoolProviders as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listWorkloadIdentityPoolProvidersStream without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.ListWorkloadIdentityPoolProvidersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPoolProvider()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPoolProvider()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPoolProvider()),
            ];
            client.descriptors.page.listWorkloadIdentityPoolProviders.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listWorkloadIdentityPoolProvidersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.iam.v1beta.WorkloadIdentityPoolProvider[] = [];
                stream.on('data', (response: protos.google.iam.v1beta.WorkloadIdentityPoolProvider) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listWorkloadIdentityPoolProviders.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listWorkloadIdentityPoolProviders, request));
            assert.strictEqual(
                (client.descriptors.page.listWorkloadIdentityPoolProviders.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listWorkloadIdentityPoolProvidersStream with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.ListWorkloadIdentityPoolProvidersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listWorkloadIdentityPoolProviders.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listWorkloadIdentityPoolProvidersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.iam.v1beta.WorkloadIdentityPoolProvider[] = [];
                stream.on('data', (response: protos.google.iam.v1beta.WorkloadIdentityPoolProvider) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listWorkloadIdentityPoolProviders.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listWorkloadIdentityPoolProviders, request));
            assert.strictEqual(
                (client.descriptors.page.listWorkloadIdentityPoolProviders.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listWorkloadIdentityPoolProviders without error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.ListWorkloadIdentityPoolProvidersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPoolProvider()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPoolProvider()),
              generateSampleMessage(new protos.google.iam.v1beta.WorkloadIdentityPoolProvider()),
            ];
            client.descriptors.page.listWorkloadIdentityPoolProviders.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.iam.v1beta.IWorkloadIdentityPoolProvider[] = [];
            const iterable = client.listWorkloadIdentityPoolProvidersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listWorkloadIdentityPoolProviders.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listWorkloadIdentityPoolProviders.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listWorkloadIdentityPoolProviders with error', async () => {
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.iam.v1beta.ListWorkloadIdentityPoolProvidersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listWorkloadIdentityPoolProviders.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listWorkloadIdentityPoolProvidersAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.iam.v1beta.IWorkloadIdentityPoolProvider[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listWorkloadIdentityPoolProviders.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listWorkloadIdentityPoolProviders.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('workloadIdentityPool', () => {
            const fakePath = "/rendered/path/workloadIdentityPool";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                workload_identity_pool: "workloadIdentityPoolValue",
            };
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.workloadIdentityPoolPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.workloadIdentityPoolPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('workloadIdentityPoolPath', () => {
                const result = client.workloadIdentityPoolPath("projectValue", "locationValue", "workloadIdentityPoolValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.workloadIdentityPoolPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromWorkloadIdentityPoolName', () => {
                const result = client.matchProjectFromWorkloadIdentityPoolName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.workloadIdentityPoolPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromWorkloadIdentityPoolName', () => {
                const result = client.matchLocationFromWorkloadIdentityPoolName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.workloadIdentityPoolPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchWorkloadIdentityPoolFromWorkloadIdentityPoolName', () => {
                const result = client.matchWorkloadIdentityPoolFromWorkloadIdentityPoolName(fakePath);
                assert.strictEqual(result, "workloadIdentityPoolValue");
                assert((client.pathTemplates.workloadIdentityPoolPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('workloadIdentityPoolProvider', () => {
            const fakePath = "/rendered/path/workloadIdentityPoolProvider";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                workload_identity_pool: "workloadIdentityPoolValue",
                workload_identity_pool_provider: "workloadIdentityPoolProviderValue",
            };
            const client = new workloadidentitypoolsModule.v1beta.WorkloadIdentityPoolsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.workloadIdentityPoolProviderPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.workloadIdentityPoolProviderPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('workloadIdentityPoolProviderPath', () => {
                const result = client.workloadIdentityPoolProviderPath("projectValue", "locationValue", "workloadIdentityPoolValue", "workloadIdentityPoolProviderValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.workloadIdentityPoolProviderPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromWorkloadIdentityPoolProviderName', () => {
                const result = client.matchProjectFromWorkloadIdentityPoolProviderName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.workloadIdentityPoolProviderPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromWorkloadIdentityPoolProviderName', () => {
                const result = client.matchLocationFromWorkloadIdentityPoolProviderName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.workloadIdentityPoolProviderPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchWorkloadIdentityPoolFromWorkloadIdentityPoolProviderName', () => {
                const result = client.matchWorkloadIdentityPoolFromWorkloadIdentityPoolProviderName(fakePath);
                assert.strictEqual(result, "workloadIdentityPoolValue");
                assert((client.pathTemplates.workloadIdentityPoolProviderPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchWorkloadIdentityPoolProviderFromWorkloadIdentityPoolProviderName', () => {
                const result = client.matchWorkloadIdentityPoolProviderFromWorkloadIdentityPoolProviderName(fakePath);
                assert.strictEqual(result, "workloadIdentityPoolProviderValue");
                assert((client.pathTemplates.workloadIdentityPoolProviderPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});

// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package iam_test

import (
	"context"

	iam "cloud.google.com/go/iam/apiv1beta"
	"google.golang.org/api/iterator"
	iampb "google.golang.org/genproto/googleapis/iam/v1beta"
)

func ExampleNewWorkloadIdentityPoolsClient() {
	ctx := context.Background()
	c, err := iam.NewWorkloadIdentityPoolsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use client.
	_ = c
}

func ExampleWorkloadIdentityPoolsClient_ListWorkloadIdentityPools() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1beta"
	// import "google.golang.org/api/iterator"

	ctx := context.Background()
	c, err := iam.NewWorkloadIdentityPoolsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.ListWorkloadIdentityPoolsRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListWorkloadIdentityPools(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleWorkloadIdentityPoolsClient_GetWorkloadIdentityPool() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1beta"

	ctx := context.Background()
	c, err := iam.NewWorkloadIdentityPoolsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.GetWorkloadIdentityPoolRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetWorkloadIdentityPool(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleWorkloadIdentityPoolsClient_CreateWorkloadIdentityPool() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1beta"

	ctx := context.Background()
	c, err := iam.NewWorkloadIdentityPoolsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.CreateWorkloadIdentityPoolRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.CreateWorkloadIdentityPool(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleWorkloadIdentityPoolsClient_UpdateWorkloadIdentityPool() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1beta"

	ctx := context.Background()
	c, err := iam.NewWorkloadIdentityPoolsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.UpdateWorkloadIdentityPoolRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.UpdateWorkloadIdentityPool(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleWorkloadIdentityPoolsClient_DeleteWorkloadIdentityPool() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1beta"

	ctx := context.Background()
	c, err := iam.NewWorkloadIdentityPoolsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.DeleteWorkloadIdentityPoolRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.DeleteWorkloadIdentityPool(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleWorkloadIdentityPoolsClient_UndeleteWorkloadIdentityPool() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1beta"

	ctx := context.Background()
	c, err := iam.NewWorkloadIdentityPoolsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.UndeleteWorkloadIdentityPoolRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.UndeleteWorkloadIdentityPool(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleWorkloadIdentityPoolsClient_ListWorkloadIdentityPoolProviders() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1beta"
	// import "google.golang.org/api/iterator"

	ctx := context.Background()
	c, err := iam.NewWorkloadIdentityPoolsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.ListWorkloadIdentityPoolProvidersRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListWorkloadIdentityPoolProviders(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleWorkloadIdentityPoolsClient_GetWorkloadIdentityPoolProvider() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1beta"

	ctx := context.Background()
	c, err := iam.NewWorkloadIdentityPoolsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.GetWorkloadIdentityPoolProviderRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetWorkloadIdentityPoolProvider(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleWorkloadIdentityPoolsClient_CreateWorkloadIdentityPoolProvider() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1beta"

	ctx := context.Background()
	c, err := iam.NewWorkloadIdentityPoolsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.CreateWorkloadIdentityPoolProviderRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.CreateWorkloadIdentityPoolProvider(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleWorkloadIdentityPoolsClient_UpdateWorkloadIdentityPoolProvider() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1beta"

	ctx := context.Background()
	c, err := iam.NewWorkloadIdentityPoolsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.UpdateWorkloadIdentityPoolProviderRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.UpdateWorkloadIdentityPoolProvider(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleWorkloadIdentityPoolsClient_DeleteWorkloadIdentityPoolProvider() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1beta"

	ctx := context.Background()
	c, err := iam.NewWorkloadIdentityPoolsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.DeleteWorkloadIdentityPoolProviderRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.DeleteWorkloadIdentityPoolProvider(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleWorkloadIdentityPoolsClient_UndeleteWorkloadIdentityPoolProvider() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1beta"

	ctx := context.Background()
	c, err := iam.NewWorkloadIdentityPoolsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.UndeleteWorkloadIdentityPoolProviderRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.UndeleteWorkloadIdentityPoolProvider(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

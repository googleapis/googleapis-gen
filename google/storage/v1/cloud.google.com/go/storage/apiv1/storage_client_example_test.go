// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package storage_test

import (
	"context"

	storage "cloud.google.com/go/storage/apiv1"
	storagepb "google.golang.org/genproto/googleapis/storage/v1"
)

func ExampleNewClient() {
	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use client.
	_ = c
}

func ExampleClient_DeleteBucketAccessControl() {
	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.DeleteBucketAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteBucketAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleClient_GetBucketAccessControl() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.GetBucketAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetBucketAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_InsertBucketAccessControl() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.InsertBucketAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.InsertBucketAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_ListBucketAccessControls() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.ListBucketAccessControlsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ListBucketAccessControls(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_UpdateBucketAccessControl() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.UpdateBucketAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateBucketAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_PatchBucketAccessControl() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.PatchBucketAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.PatchBucketAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_DeleteBucket() {
	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.DeleteBucketRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteBucket(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleClient_GetBucket() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.GetBucketRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetBucket(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_InsertBucket() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.InsertBucketRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.InsertBucket(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_ListChannels() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.ListChannelsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ListChannels(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_ListBuckets() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.ListBucketsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ListBuckets(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_LockBucketRetentionPolicy() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.LockRetentionPolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.LockBucketRetentionPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_GetBucketIamPolicy() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.GetIamPolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetBucketIamPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_SetBucketIamPolicy() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.SetIamPolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.SetBucketIamPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_TestBucketIamPermissions() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.TestIamPermissionsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.TestBucketIamPermissions(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_PatchBucket() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.PatchBucketRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.PatchBucket(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_UpdateBucket() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.UpdateBucketRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateBucket(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_StopChannel() {
	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.StopChannelRequest{
		// TODO: Fill request struct fields.
	}
	err = c.StopChannel(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleClient_DeleteDefaultObjectAccessControl() {
	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.DeleteDefaultObjectAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteDefaultObjectAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleClient_GetDefaultObjectAccessControl() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.GetDefaultObjectAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetDefaultObjectAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_InsertDefaultObjectAccessControl() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.InsertDefaultObjectAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.InsertDefaultObjectAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_ListDefaultObjectAccessControls() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.ListDefaultObjectAccessControlsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ListDefaultObjectAccessControls(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_PatchDefaultObjectAccessControl() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.PatchDefaultObjectAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.PatchDefaultObjectAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_UpdateDefaultObjectAccessControl() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.UpdateDefaultObjectAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateDefaultObjectAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_DeleteNotification() {
	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.DeleteNotificationRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteNotification(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleClient_GetNotification() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.GetNotificationRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetNotification(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_InsertNotification() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.InsertNotificationRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.InsertNotification(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_ListNotifications() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.ListNotificationsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ListNotifications(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_DeleteObjectAccessControl() {
	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.DeleteObjectAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteObjectAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleClient_GetObjectAccessControl() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.GetObjectAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetObjectAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_InsertObjectAccessControl() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.InsertObjectAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.InsertObjectAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_ListObjectAccessControls() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.ListObjectAccessControlsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ListObjectAccessControls(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_PatchObjectAccessControl() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.PatchObjectAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.PatchObjectAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_UpdateObjectAccessControl() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.UpdateObjectAccessControlRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateObjectAccessControl(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_ComposeObject() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.ComposeObjectRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ComposeObject(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_CopyObject() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.CopyObjectRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CopyObject(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_DeleteObject() {
	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.DeleteObjectRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteObject(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleClient_GetObject() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.GetObjectRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetObject(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_ListObjects() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.ListObjectsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ListObjects(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_RewriteObject() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.RewriteObjectRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.RewriteObject(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_StartResumableWrite() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.StartResumableWriteRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.StartResumableWrite(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_QueryWriteStatus() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.QueryWriteStatusRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.QueryWriteStatus(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_PatchObject() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.PatchObjectRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.PatchObject(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_UpdateObject() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.UpdateObjectRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateObject(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_GetObjectIamPolicy() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.GetIamPolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetObjectIamPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_SetObjectIamPolicy() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.SetIamPolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.SetObjectIamPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_TestObjectIamPermissions() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.TestIamPermissionsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.TestObjectIamPermissions(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_WatchAllObjects() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.WatchAllObjectsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.WatchAllObjects(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_GetServiceAccount() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.GetProjectServiceAccountRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetServiceAccount(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_CreateHmacKey() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.CreateHmacKeyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CreateHmacKey(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_DeleteHmacKey() {
	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.DeleteHmacKeyRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteHmacKey(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleClient_GetHmacKey() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.GetHmacKeyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetHmacKey(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_ListHmacKeys() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.ListHmacKeysRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.ListHmacKeys(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_UpdateHmacKey() {
	// import storagepb "google.golang.org/genproto/googleapis/storage/v1"

	ctx := context.Background()
	c, err := storage.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &storagepb.UpdateHmacKeyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateHmacKey(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

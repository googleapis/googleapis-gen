<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/storage/v2/storage.proto

namespace Google\Storage\V2;

use UnexpectedValueException;

/**
 * Predefined or "canned" aliases for sets of specific object ACL entries.
 *
 * Protobuf type <code>google.storage.v2.PredefinedObjectAcl</code>
 */
class PredefinedObjectAcl
{
    /**
     * No predefined ACL.
     *
     * Generated from protobuf enum <code>PREDEFINED_OBJECT_ACL_UNSPECIFIED = 0;</code>
     */
    const PREDEFINED_OBJECT_ACL_UNSPECIFIED = 0;
    /**
     * Object owner gets `OWNER` access, and
     * `allAuthenticatedUsers` get `READER` access.
     *
     * Generated from protobuf enum <code>OBJECT_ACL_AUTHENTICATED_READ = 1;</code>
     */
    const OBJECT_ACL_AUTHENTICATED_READ = 1;
    /**
     * Object owner gets `OWNER` access, and project team owners get
     * `OWNER` access.
     *
     * Generated from protobuf enum <code>OBJECT_ACL_BUCKET_OWNER_FULL_CONTROL = 2;</code>
     */
    const OBJECT_ACL_BUCKET_OWNER_FULL_CONTROL = 2;
    /**
     * Object owner gets `OWNER` access, and project team owners get
     * `READER` access.
     *
     * Generated from protobuf enum <code>OBJECT_ACL_BUCKET_OWNER_READ = 3;</code>
     */
    const OBJECT_ACL_BUCKET_OWNER_READ = 3;
    /**
     * Object owner gets `OWNER` access.
     *
     * Generated from protobuf enum <code>OBJECT_ACL_PRIVATE = 4;</code>
     */
    const OBJECT_ACL_PRIVATE = 4;
    /**
     * Object owner gets `OWNER` access, and project team members get
     * access according to their roles.
     *
     * Generated from protobuf enum <code>OBJECT_ACL_PROJECT_PRIVATE = 5;</code>
     */
    const OBJECT_ACL_PROJECT_PRIVATE = 5;
    /**
     * Object owner gets `OWNER` access, and `allUsers`
     * get `READER` access.
     *
     * Generated from protobuf enum <code>OBJECT_ACL_PUBLIC_READ = 6;</code>
     */
    const OBJECT_ACL_PUBLIC_READ = 6;

    private static $valueToName = [
        self::PREDEFINED_OBJECT_ACL_UNSPECIFIED => 'PREDEFINED_OBJECT_ACL_UNSPECIFIED',
        self::OBJECT_ACL_AUTHENTICATED_READ => 'OBJECT_ACL_AUTHENTICATED_READ',
        self::OBJECT_ACL_BUCKET_OWNER_FULL_CONTROL => 'OBJECT_ACL_BUCKET_OWNER_FULL_CONTROL',
        self::OBJECT_ACL_BUCKET_OWNER_READ => 'OBJECT_ACL_BUCKET_OWNER_READ',
        self::OBJECT_ACL_PRIVATE => 'OBJECT_ACL_PRIVATE',
        self::OBJECT_ACL_PROJECT_PRIVATE => 'OBJECT_ACL_PROJECT_PRIVATE',
        self::OBJECT_ACL_PUBLIC_READ => 'OBJECT_ACL_PUBLIC_READ',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/maps/playablelocations/v3/resources.proto

namespace Google\Maps\PlayableLocations\V3;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Encapsulates impression event details.
 *
 * Generated from protobuf message <code>google.maps.playablelocations.v3.Impression</code>
 */
class Impression extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The name of the playable location.
     *
     * Generated from protobuf field <code>string location_name = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $location_name = '';
    /**
     * Required. The type of impression event.
     *
     * Generated from protobuf field <code>.google.maps.playablelocations.v3.Impression.ImpressionType impression_type = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    protected $impression_type = 0;
    /**
     * An arbitrary, developer-defined type identifier for each type of game
     * object used in your game.
     * Since players interact with differ types of game objects in different ways,
     * this field allows you to segregate impression data by type for analysis.
     * You should assign a unique `game_object_type` ID to represent a distinct
     * type of game object in your game.
     * For example, 1=monster location, 2=powerup location.
     *
     * Generated from protobuf field <code>int32 game_object_type = 4;</code>
     */
    protected $game_object_type = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $location_name
     *           Required. The name of the playable location.
     *     @type int $impression_type
     *           Required. The type of impression event.
     *     @type int $game_object_type
     *           An arbitrary, developer-defined type identifier for each type of game
     *           object used in your game.
     *           Since players interact with differ types of game objects in different ways,
     *           this field allows you to segregate impression data by type for analysis.
     *           You should assign a unique `game_object_type` ID to represent a distinct
     *           type of game object in your game.
     *           For example, 1=monster location, 2=powerup location.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Maps\Playablelocations\V3\Resources::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The name of the playable location.
     *
     * Generated from protobuf field <code>string location_name = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getLocationName()
    {
        return $this->location_name;
    }

    /**
     * Required. The name of the playable location.
     *
     * Generated from protobuf field <code>string location_name = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setLocationName($var)
    {
        GPBUtil::checkString($var, True);
        $this->location_name = $var;

        return $this;
    }

    /**
     * Required. The type of impression event.
     *
     * Generated from protobuf field <code>.google.maps.playablelocations.v3.Impression.ImpressionType impression_type = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return int
     */
    public function getImpressionType()
    {
        return $this->impression_type;
    }

    /**
     * Required. The type of impression event.
     *
     * Generated from protobuf field <code>.google.maps.playablelocations.v3.Impression.ImpressionType impression_type = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param int $var
     * @return $this
     */
    public function setImpressionType($var)
    {
        GPBUtil::checkEnum($var, \Google\Maps\PlayableLocations\V3\Impression\ImpressionType::class);
        $this->impression_type = $var;

        return $this;
    }

    /**
     * An arbitrary, developer-defined type identifier for each type of game
     * object used in your game.
     * Since players interact with differ types of game objects in different ways,
     * this field allows you to segregate impression data by type for analysis.
     * You should assign a unique `game_object_type` ID to represent a distinct
     * type of game object in your game.
     * For example, 1=monster location, 2=powerup location.
     *
     * Generated from protobuf field <code>int32 game_object_type = 4;</code>
     * @return int
     */
    public function getGameObjectType()
    {
        return $this->game_object_type;
    }

    /**
     * An arbitrary, developer-defined type identifier for each type of game
     * object used in your game.
     * Since players interact with differ types of game objects in different ways,
     * this field allows you to segregate impression data by type for analysis.
     * You should assign a unique `game_object_type` ID to represent a distinct
     * type of game object in your game.
     * For example, 1=monster location, 2=powerup location.
     *
     * Generated from protobuf field <code>int32 game_object_type = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setGameObjectType($var)
    {
        GPBUtil::checkInt32($var);
        $this->game_object_type = $var;

        return $this;
    }

}


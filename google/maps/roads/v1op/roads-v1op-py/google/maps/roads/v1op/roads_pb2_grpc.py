# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.maps.roads.v1op import roads_pb2 as google_dot_maps_dot_roads_dot_v1op_dot_roads__pb2


class RoadsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SnapToRoads = channel.unary_unary(
                '/google.maps.roads.v1op.RoadsService/SnapToRoads',
                request_serializer=google_dot_maps_dot_roads_dot_v1op_dot_roads__pb2.SnapToRoadsRequest.SerializeToString,
                response_deserializer=google_dot_maps_dot_roads_dot_v1op_dot_roads__pb2.SnapToRoadsResponse.FromString,
                )
        self.ListNearestRoads = channel.unary_unary(
                '/google.maps.roads.v1op.RoadsService/ListNearestRoads',
                request_serializer=google_dot_maps_dot_roads_dot_v1op_dot_roads__pb2.ListNearestRoadsRequest.SerializeToString,
                response_deserializer=google_dot_maps_dot_roads_dot_v1op_dot_roads__pb2.ListNearestRoadsResponse.FromString,
                )


class RoadsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SnapToRoads(self, request, context):
        """This method takes a sequence of latitude,longitude points and snaps them to
        the most likely road segments. Optionally returns additional points giving
        the full road geometry. Also returns a place ID for each snapped point.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNearestRoads(self, request, context):
        """This method takes a list of latitude,longitude points and snaps them each
        to their nearest road. Also returns a place ID for each snapped point.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoadsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SnapToRoads': grpc.unary_unary_rpc_method_handler(
                    servicer.SnapToRoads,
                    request_deserializer=google_dot_maps_dot_roads_dot_v1op_dot_roads__pb2.SnapToRoadsRequest.FromString,
                    response_serializer=google_dot_maps_dot_roads_dot_v1op_dot_roads__pb2.SnapToRoadsResponse.SerializeToString,
            ),
            'ListNearestRoads': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNearestRoads,
                    request_deserializer=google_dot_maps_dot_roads_dot_v1op_dot_roads__pb2.ListNearestRoadsRequest.FromString,
                    response_serializer=google_dot_maps_dot_roads_dot_v1op_dot_roads__pb2.ListNearestRoadsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'google.maps.roads.v1op.RoadsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RoadsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SnapToRoads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/google.maps.roads.v1op.RoadsService/SnapToRoads',
            google_dot_maps_dot_roads_dot_v1op_dot_roads__pb2.SnapToRoadsRequest.SerializeToString,
            google_dot_maps_dot_roads_dot_v1op_dot_roads__pb2.SnapToRoadsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListNearestRoads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/google.maps.roads.v1op.RoadsService/ListNearestRoads',
            google_dot_maps_dot_roads_dot_v1op_dot_roads__pb2.ListNearestRoadsRequest.SerializeToString,
            google_dot_maps_dot_roads_dot_v1op_dot_roads__pb2.ListNearestRoadsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

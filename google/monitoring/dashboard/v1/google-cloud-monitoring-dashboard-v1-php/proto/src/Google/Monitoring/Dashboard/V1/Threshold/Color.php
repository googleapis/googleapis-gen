<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/monitoring/dashboard/v1/metrics.proto

namespace Google\Monitoring\Dashboard\V1\Threshold;

use UnexpectedValueException;

/**
 * The color suggests an interpretation to the viewer when actual values cross
 * the threshold. Comments on each color provide UX guidance on how users can
 * be expected to interpret a given state color.
 *
 * Protobuf type <code>google.monitoring.dashboard.v1.Threshold.Color</code>
 */
class Color
{
    /**
     * Color is unspecified. Not allowed in well-formed requests.
     *
     * Generated from protobuf enum <code>COLOR_UNSPECIFIED = 0;</code>
     */
    const COLOR_UNSPECIFIED = 0;
    /**
     * Crossing the threshold is "concerning" behavior.
     *
     * Generated from protobuf enum <code>YELLOW = 4;</code>
     */
    const YELLOW = 4;
    /**
     * Crossing the threshold is "emergency" behavior.
     *
     * Generated from protobuf enum <code>RED = 6;</code>
     */
    const RED = 6;

    private static $valueToName = [
        self::COLOR_UNSPECIFIED => 'COLOR_UNSPECIFIED',
        self::YELLOW => 'YELLOW',
        self::RED => 'RED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Color::class, \Google\Monitoring\Dashboard\V1\Threshold_Color::class);


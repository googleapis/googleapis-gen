// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package streetviewpublish

import (
	"context"
	"fmt"
	"math"
	"net/url"

	"github.com/golang/protobuf/proto"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	publishpb "google.golang.org/genproto/googleapis/streetview/publish/v1"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

var newClientHook clientHook

// CallOptions contains the retry settings for each method of Client.
type CallOptions struct {
	StartUpload       []gax.CallOption
	CreatePhoto       []gax.CallOption
	GetPhoto          []gax.CallOption
	BatchGetPhotos    []gax.CallOption
	ListPhotos        []gax.CallOption
	UpdatePhoto       []gax.CallOption
	BatchUpdatePhotos []gax.CallOption
	DeletePhoto       []gax.CallOption
	BatchDeletePhotos []gax.CallOption
}

func defaultClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("streetviewpublish.googleapis.com:443"),
		internaloption.WithDefaultMTLSEndpoint("streetviewpublish.mtls.googleapis.com:443"),
		internaloption.WithDefaultAudience("https://streetviewpublish.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		option.WithGRPCDialOption(grpc.WithDisableServiceConfig()),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultCallOptions() *CallOptions {
	return &CallOptions{
		StartUpload:       []gax.CallOption{},
		CreatePhoto:       []gax.CallOption{},
		GetPhoto:          []gax.CallOption{},
		BatchGetPhotos:    []gax.CallOption{},
		ListPhotos:        []gax.CallOption{},
		UpdatePhoto:       []gax.CallOption{},
		BatchUpdatePhotos: []gax.CallOption{},
		DeletePhoto:       []gax.CallOption{},
		BatchDeletePhotos: []gax.CallOption{},
	}
}

// Client is a client for interacting with Street View Publish API.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type Client struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// The gRPC API client.
	client publishpb.StreetViewPublishServiceClient

	// The call options for this service.
	CallOptions *CallOptions

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewClient creates a new street view publish service client.
//
// Publishes and connects user-contributed photos on Street View.
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := defaultClientOptions()

	if newClientHook != nil {
		hookOpts, err := newClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	c := &Client{
		connPool:         connPool,
		disableDeadlines: disableDeadlines,
		CallOptions:      defaultCallOptions(),

		client: publishpb.NewStreetViewPublishServiceClient(connPool),
	}
	c.setGoogleClientInfo()

	return c, nil
}

// Connection returns a connection to the API service.
//
// Deprecated.
func (c *Client) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
	return c.connPool.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", versionClient, "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// StartUpload creates an upload session to start uploading photo bytes. The method uses
// the upload URL of the returned
// UploadRef to upload the bytes for
// the [Photo][google.streetview.publish.v1.Photo (at http://google.streetview.publish.v1.Photo)].
//
// In addition to the photo requirements shown in
// https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604 (at https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604),
// the photo must meet the following requirements:
//
//   Photo Sphere XMP metadata must be included in the photo medadata. See
//   https://developers.google.com/streetview/spherical-metadata (at https://developers.google.com/streetview/spherical-metadata) for the
//   required fields.
//
//   The pixel size of the photo must meet the size requirements listed in
//   https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604 (at https://support.google.com/maps/answer/7012050?hl=en&ref_topic=6275604), and
//   the photo must be a full 360 horizontally.
//
// After the upload completes, the method uses
// UploadRef with
// CreatePhoto
// to create the [Photo][google.streetview.publish.v1.Photo (at http://google.streetview.publish.v1.Photo)] object entry.
func (c *Client) StartUpload(ctx context.Context, req *emptypb.Empty, opts ...gax.CallOption) (*publishpb.UploadRef, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append(c.CallOptions.StartUpload[0:len(c.CallOptions.StartUpload):len(c.CallOptions.StartUpload)], opts...)
	var resp *publishpb.UploadRef
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.StartUpload(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// CreatePhoto after the client finishes uploading the photo with the returned
// UploadRef,
// CreatePhoto
// publishes the uploaded [Photo][google.streetview.publish.v1.Photo (at http://google.streetview.publish.v1.Photo)] to
// Street View on Google Maps.
//
// Currently, the only way to set heading, pitch, and roll in CreatePhoto is
// through the Photo Sphere XMP
// metadata (at https://developers.google.com/streetview/spherical-metadata) in
// the photo bytes. CreatePhoto ignores the pose.heading, pose.pitch,
// pose.roll, pose.altitude, and pose.level fields in Pose.
//
// This method returns the following error codes:
//
//   google.rpc.Code.INVALID_ARGUMENT if
//   the request is malformed or if the uploaded photo is not a 360 photo.
//
//   google.rpc.Code.NOT_FOUND if the upload
//   reference does not exist.
//
//   google.rpc.Code.RESOURCE_EXHAUSTED
//   if the account has reached the storage limit.
func (c *Client) CreatePhoto(ctx context.Context, req *publishpb.CreatePhotoRequest, opts ...gax.CallOption) (*publishpb.Photo, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append(c.CallOptions.CreatePhoto[0:len(c.CallOptions.CreatePhoto):len(c.CallOptions.CreatePhoto)], opts...)
	var resp *publishpb.Photo
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreatePhoto(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// GetPhoto gets the metadata of the specified
// [Photo][google.streetview.publish.v1.Photo (at http://google.streetview.publish.v1.Photo)].
//
// This method returns the following error codes:
//
//   google.rpc.Code.PERMISSION_DENIED if
//   the requesting user did not create the requested
//   [Photo][google.streetview.publish.v1.Photo (at http://google.streetview.publish.v1.Photo)].
//
//   google.rpc.Code.NOT_FOUND if the requested
//   [Photo][google.streetview.publish.v1.Photo (at http://google.streetview.publish.v1.Photo)] does not exist.
//
//   google.rpc.Code.UNAVAILABLE if the
//   requested [Photo][google.streetview.publish.v1.Photo (at http://google.streetview.publish.v1.Photo)] is still being
//   indexed.
func (c *Client) GetPhoto(ctx context.Context, req *publishpb.GetPhotoRequest, opts ...gax.CallOption) (*publishpb.Photo, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "photo_id", url.QueryEscape(req.GetPhotoId())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append(c.CallOptions.GetPhoto[0:len(c.CallOptions.GetPhoto):len(c.CallOptions.GetPhoto)], opts...)
	var resp *publishpb.Photo
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetPhoto(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// BatchGetPhotos gets the metadata of the specified
// [Photo][google.streetview.publish.v1.Photo (at http://google.streetview.publish.v1.Photo)] batch.
//
// Note that if
// BatchGetPhotos
// fails, either critical fields are missing or there is an authentication
// error. Even if
// BatchGetPhotos
// succeeds, individual photos in the batch may have failures.
// These failures are specified in each
// PhotoResponse.status
// in
// BatchGetPhotosResponse.results.
// See
// GetPhoto
// for specific failures that can occur per photo.
func (c *Client) BatchGetPhotos(ctx context.Context, req *publishpb.BatchGetPhotosRequest, opts ...gax.CallOption) (*publishpb.BatchGetPhotosResponse, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append(c.CallOptions.BatchGetPhotos[0:len(c.CallOptions.BatchGetPhotos):len(c.CallOptions.BatchGetPhotos)], opts...)
	var resp *publishpb.BatchGetPhotosResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.BatchGetPhotos(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// ListPhotos lists all the [Photos][google.streetview.publish.v1.Photo (at http://google.streetview.publish.v1.Photo)] that belong to
// the user.
func (c *Client) ListPhotos(ctx context.Context, req *publishpb.ListPhotosRequest, opts ...gax.CallOption) *PhotoIterator {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append(c.CallOptions.ListPhotos[0:len(c.CallOptions.ListPhotos):len(c.CallOptions.ListPhotos)], opts...)
	it := &PhotoIterator{}
	req = proto.Clone(req).(*publishpb.ListPhotosRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*publishpb.Photo, string, error) {
		var resp *publishpb.ListPhotosResponse
		req.PageToken = pageToken
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListPhotos(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetPhotos(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}
	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()
	return it
}

// UpdatePhoto updates the metadata of a [Photo][google.streetview.publish.v1.Photo (at http://google.streetview.publish.v1.Photo)], such
// as pose, place association, connections, etc. Changing the pixels of a
// photo is not supported.
//
// Only the fields specified in the
// updateMask
// field are used. If updateMask is not present, the update applies to all
// fields.
//
// This method returns the following error codes:
//
//   google.rpc.Code.PERMISSION_DENIED if
//   the requesting user did not create the requested photo.
//
//   google.rpc.Code.INVALID_ARGUMENT if
//   the request is malformed.
//
//   google.rpc.Code.NOT_FOUND if the requested
//   photo does not exist.
//
//   google.rpc.Code.UNAVAILABLE if the
//   requested [Photo][google.streetview.publish.v1.Photo (at http://google.streetview.publish.v1.Photo)] is still being
//   indexed.
func (c *Client) UpdatePhoto(ctx context.Context, req *publishpb.UpdatePhotoRequest, opts ...gax.CallOption) (*publishpb.Photo, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "photo.photo_id.id", url.QueryEscape(req.GetPhoto().GetPhotoId().GetId())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append(c.CallOptions.UpdatePhoto[0:len(c.CallOptions.UpdatePhoto):len(c.CallOptions.UpdatePhoto)], opts...)
	var resp *publishpb.Photo
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.UpdatePhoto(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// BatchUpdatePhotos updates the metadata of [Photos][google.streetview.publish.v1.Photo (at http://google.streetview.publish.v1.Photo)], such
// as pose, place association, connections, etc. Changing the pixels of photos
// is not supported.
//
// Note that if
// BatchUpdatePhotos
// fails, either critical fields are missing or there is an authentication
// error. Even if
// BatchUpdatePhotos
// succeeds, individual photos in the batch may have failures.
// These failures are specified in each
// PhotoResponse.status
// in
// BatchUpdatePhotosResponse.results.
// See
// UpdatePhoto
// for specific failures that can occur per photo.
//
// Only the fields specified in
// updateMask
// field are used. If updateMask is not present, the update applies to all
// fields.
//
// The number of
// UpdatePhotoRequest
// messages in a
// BatchUpdatePhotosRequest
// must not exceed 20.
func (c *Client) BatchUpdatePhotos(ctx context.Context, req *publishpb.BatchUpdatePhotosRequest, opts ...gax.CallOption) (*publishpb.BatchUpdatePhotosResponse, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append(c.CallOptions.BatchUpdatePhotos[0:len(c.CallOptions.BatchUpdatePhotos):len(c.CallOptions.BatchUpdatePhotos)], opts...)
	var resp *publishpb.BatchUpdatePhotosResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.BatchUpdatePhotos(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// DeletePhoto deletes a [Photo][google.streetview.publish.v1.Photo (at http://google.streetview.publish.v1.Photo)] and its metadata.
//
// This method returns the following error codes:
//
//   google.rpc.Code.PERMISSION_DENIED if
//   the requesting user did not create the requested photo.
//
//   google.rpc.Code.NOT_FOUND if the photo ID
//   does not exist.
func (c *Client) DeletePhoto(ctx context.Context, req *publishpb.DeletePhotoRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "photo_id", url.QueryEscape(req.GetPhotoId())))
	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append(c.CallOptions.DeletePhoto[0:len(c.CallOptions.DeletePhoto):len(c.CallOptions.DeletePhoto)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.client.DeletePhoto(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

// BatchDeletePhotos deletes a list of [Photos][google.streetview.publish.v1.Photo (at http://google.streetview.publish.v1.Photo)] and their
// metadata.
//
// Note that if
// BatchDeletePhotos
// fails, either critical fields are missing or there was an authentication
// error. Even if
// BatchDeletePhotos
// succeeds, individual photos in the batch may have failures.
// These failures are specified in each
// PhotoResponse.status
// in
// BatchDeletePhotosResponse.results.
// See
// DeletePhoto
// for specific failures that can occur per photo.
func (c *Client) BatchDeletePhotos(ctx context.Context, req *publishpb.BatchDeletePhotosRequest, opts ...gax.CallOption) (*publishpb.BatchDeletePhotosResponse, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append(c.CallOptions.BatchDeletePhotos[0:len(c.CallOptions.BatchDeletePhotos):len(c.CallOptions.BatchDeletePhotos)], opts...)
	var resp *publishpb.BatchDeletePhotosResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.BatchDeletePhotos(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// PhotoIterator manages a stream of *publishpb.Photo.
type PhotoIterator struct {
	items    []*publishpb.Photo
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*publishpb.Photo, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *PhotoIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *PhotoIterator) Next() (*publishpb.Photo, error) {
	var item *publishpb.Photo
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *PhotoIterator) bufLen() int {
	return len(it.items)
}

func (it *PhotoIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}

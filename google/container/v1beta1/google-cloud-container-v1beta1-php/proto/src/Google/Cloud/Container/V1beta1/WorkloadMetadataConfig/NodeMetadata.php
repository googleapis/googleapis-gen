<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/container/v1beta1/cluster_service.proto

namespace Google\Cloud\Container\V1beta1\WorkloadMetadataConfig;

use UnexpectedValueException;

/**
 * NodeMetadata is the configuration for if and how to expose the node
 * metadata to the workload running on the node.
 *
 * Protobuf type <code>google.container.v1beta1.WorkloadMetadataConfig.NodeMetadata</code>
 */
class NodeMetadata
{
    /**
     * Not set.
     *
     * Generated from protobuf enum <code>UNSPECIFIED = 0;</code>
     */
    const UNSPECIFIED = 0;
    /**
     * Prevent workloads not in hostNetwork from accessing certain VM metadata,
     * specifically kube-env, which contains Kubelet credentials, and the
     * instance identity token.
     * Metadata concealment is a temporary security solution available while the
     * bootstrapping process for cluster nodes is being redesigned with
     * significant security improvements.  This feature is scheduled to be
     * deprecated in the future and later removed.
     *
     * Generated from protobuf enum <code>SECURE = 1;</code>
     */
    const SECURE = 1;
    /**
     * Expose all VM metadata to pods.
     *
     * Generated from protobuf enum <code>EXPOSE = 2;</code>
     */
    const EXPOSE = 2;
    /**
     * Run the GKE Metadata Server on this node. The GKE Metadata Server exposes
     * a metadata API to workloads that is compatible with the V1 Compute
     * Metadata APIs exposed by the Compute Engine and App Engine Metadata
     * Servers. This feature can only be enabled if Workload Identity is enabled
     * at the cluster level.
     *
     * Generated from protobuf enum <code>GKE_METADATA_SERVER = 3;</code>
     */
    const GKE_METADATA_SERVER = 3;

    private static $valueToName = [
        self::UNSPECIFIED => 'UNSPECIFIED',
        self::SECURE => 'SECURE',
        self::EXPOSE => 'EXPOSE',
        self::GKE_METADATA_SERVER => 'GKE_METADATA_SERVER',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(NodeMetadata::class, \Google\Cloud\Container\V1beta1\WorkloadMetadataConfig_NodeMetadata::class);


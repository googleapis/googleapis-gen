# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# EDITING INSTRUCTIONS
# This file was generated from the file
# https://github.com/googleapis/googleapis/blob/master/google/devtools/build/v1/publish_build_event.proto,
# and updates to that file get reflected here through a refresh process.
# For the short term, the refresh process will only be runnable by Google
# engineers.

require "json"
require "pathname"

require "google/gax"

require "google/devtools/build/v1/publish_build_event_pb"
require "google/cloud/devtools/build/v1/credentials"

module Google
  module Cloud
    module Devtools
      module Build
        module V1
          # A service for publishing BuildEvents. BuildEvents are generated by Build
          # Systems to record actions taken during a Build. Events occur in streams,
          # are identified by a StreamId, and ordered by sequence number in a stream.
          #
          # A Build may contain several streams of BuildEvents, depending on the systems
          # that are involved in the Build. Some BuildEvents are used to declare the
          # beginning and end of major portions of a Build; these are called
          # LifecycleEvents, and are used (for example) to indicate the beginning or end
          # of a Build, and the beginning or end of an Invocation attempt (there can be
          # more than 1 Invocation in a Build if, for example, a failure occurs somewhere
          # and it needs to be retried).
          #
          # Other, build-tool events represent actions taken by the Build tool, such as
          # target objects produced via compilation, tests run, et cetera. There could be
          # more than one build tool stream for an invocation attempt of a build.
          #
          # @!attribute [r] publish_build_event_stub
          #   @return [Google::Devtools::Build::V1::PublishBuildEvent::Stub]
          class PublishBuildEventClient
            attr_reader :publish_build_event_stub

            # The default address of the service.
            SERVICE_ADDRESS = "buildeventservice.googleapis.com".freeze

            # The default port of the service.
            DEFAULT_SERVICE_PORT = 443

            # The default set of gRPC interceptors.
            GRPC_INTERCEPTORS = []

            DEFAULT_TIMEOUT = 30

            # The scopes needed to make gRPC calls to all of the methods defined in
            # this service.
            ALL_SCOPES = [
              "https://www.googleapis.com/auth/cloud-platform"
            ].freeze


            # @param credentials [Google::Auth::Credentials, String, Hash, GRPC::Core::Channel, GRPC::Core::ChannelCredentials, Proc]
            #   Provides the means for authenticating requests made by the client. This parameter can
            #   be many types.
            #   A `Google::Auth::Credentials` uses a the properties of its represented keyfile for
            #   authenticating requests made by this client.
            #   A `String` will be treated as the path to the keyfile to be used for the construction of
            #   credentials for this client.
            #   A `Hash` will be treated as the contents of a keyfile to be used for the construction of
            #   credentials for this client.
            #   A `GRPC::Core::Channel` will be used to make calls through.
            #   A `GRPC::Core::ChannelCredentials` for the setting up the RPC client. The channel credentials
            #   should already be composed with a `GRPC::Core::CallCredentials` object.
            #   A `Proc` will be used as an updater_proc for the Grpc channel. The proc transforms the
            #   metadata for requests, generally, to give OAuth credentials.
            # @param scopes [Array<String>]
            #   The OAuth scopes for this service. This parameter is ignored if
            #   an updater_proc is supplied.
            # @param client_config [Hash]
            #   A Hash for call options for each method. See
            #   Google::Gax#construct_settings for the structure of
            #   this data. Falls back to the default config if not specified
            #   or the specified config is missing data points.
            # @param timeout [Numeric]
            #   The default timeout, in seconds, for calls made through this client.
            # @param metadata [Hash]
            #   Default metadata to be sent with each request. This can be overridden on a per call basis.
            # @param exception_transformer [Proc]
            #   An optional proc that intercepts any exceptions raised during an API call to inject
            #   custom error handling.
            def initialize \
                credentials: nil,
                scopes: ALL_SCOPES,
                client_config: {},
                timeout: DEFAULT_TIMEOUT,
                metadata: nil,
                exception_transformer: nil,
                lib_name: nil,
                lib_version: ""
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "google/gax/grpc"
              require "google/devtools/build/v1/publish_build_event_services_pb"

              credentials ||= Google::Cloud::Devtools::Build::V1::Credentials.default

              if credentials.is_a?(String) || credentials.is_a?(Hash)
                updater_proc = Google::Cloud::Devtools::Build::V1::Credentials.new(credentials).updater_proc
              end
              if credentials.is_a?(GRPC::Core::Channel)
                channel = credentials
              end
              if credentials.is_a?(GRPC::Core::ChannelCredentials)
                chan_creds = credentials
              end
              if credentials.is_a?(Proc)
                updater_proc = credentials
              end
              if credentials.is_a?(Google::Auth::Credentials)
                updater_proc = credentials.updater_proc
              end

              package_version = Gem.loaded_specs['google-cloud-devtools-build'].version.version

              google_api_client = "gl-ruby/#{RUBY_VERSION}"
              google_api_client << " #{lib_name}/#{lib_version}" if lib_name
              google_api_client << " gapic/#{package_version} gax/#{Google::Gax::VERSION}"
              google_api_client << " grpc/#{GRPC::VERSION}"
              google_api_client.freeze

              headers = { :"x-goog-api-client" => google_api_client }
              if credentials.respond_to?(:quota_project_id) && credentials.quota_project_id
                headers[:"x-goog-user-project"] = credentials.quota_project_id
              end
              headers.merge!(metadata) unless metadata.nil?
              client_config_file = Pathname.new(__dir__).join(
                "publish_build_event_client_config.json"
              )
              defaults = client_config_file.open do |f|
                Google::Gax.construct_settings(
                  "google.devtools.build.v1.PublishBuildEvent",
                  JSON.parse(f.read),
                  client_config,
                  Google::Gax::Grpc::STATUS_CODE_NAMES,
                  timeout,
                  errors: Google::Gax::Grpc::API_ERRORS,
                  metadata: headers
                )
              end

              # Allow overriding the service path/port in subclasses.
              service_path = self.class::SERVICE_ADDRESS
              port = self.class::DEFAULT_SERVICE_PORT
              interceptors = self.class::GRPC_INTERCEPTORS
              @publish_build_event_stub = Google::Gax::Grpc.create_stub(
                service_path,
                port,
                chan_creds: chan_creds,
                channel: channel,
                updater_proc: updater_proc,
                scopes: scopes,
                interceptors: interceptors,
                &Google::Devtools::Build::V1::PublishBuildEvent::Stub.method(:new)
              )

              @publish_lifecycle_event = Google::Gax.create_api_call(
                @publish_build_event_stub.method(:publish_lifecycle_event),
                defaults["publish_lifecycle_event"],
                exception_transformer: exception_transformer,
                params_extractor: proc do |request|
                  {'project_id' => request.project_id}
                end
              )
              @publish_build_tool_event_stream = Google::Gax.create_api_call(
                @publish_build_event_stub.method(:publish_build_tool_event_stream),
                defaults["publish_build_tool_event_stream"],
                exception_transformer: exception_transformer
              )
            end

            # Service calls

            # Publish a build event stating the new state of a build (typically from the
            # build queue). The BuildEnqueued event must be publishd before all other
            # events for the same build ID.
            #
            # The backend will persist the event and deliver it to registered frontend
            # jobs immediately without batching.
            #
            # The commit status of the request is reported by the RPC's util_status()
            # function. The error code is the canoncial error code defined in
            # //util/task/codes.proto.
            #
            # @param build_event [Google::Devtools::Build::V1::OrderedBuildEvent | Hash]
            #   Required. The lifecycle build event. If this is a build tool event, the RPC
            #   will fail with INVALID_REQUEST.
            #   A hash of the same form as `Google::Devtools::Build::V1::OrderedBuildEvent`
            #   can also be provided.
            # @param project_id [String]
            #   Required. The project this build is associated with.
            #   This should match the project used for the initial call to
            #   PublishLifecycleEvent (containing a BuildEnqueued message).
            # @param service_level [Google::Devtools::Build::V1::PublishLifecycleEventRequest::ServiceLevel]
            #   The interactivity of this build.
            # @param stream_timeout [Google::Protobuf::Duration | Hash]
            #   If the next event for this build or invocation (depending on the event
            #   type) hasn't been published after this duration from when {build_event}
            #   is written to BES, consider this stream expired. If this field is not set,
            #   BES backend will use its own default value.
            #   A hash of the same form as `Google::Protobuf::Duration`
            #   can also be provided.
            # @param notification_keywords [Array<String>]
            #   Additional information about a build request. These are define by the event
            #   publishers, and the Build Event Service does not validate or interpret
            #   them. They are used while notifying internal systems of new builds and
            #   invocations if the OrderedBuildEvent.event type is
            #   BuildEnqueued/InvocationAttemptStarted.
            # @param options [Google::Gax::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout,
            #   retries, etc.
            # @yield [result, operation] Access the result along with the RPC operation
            # @yieldparam result []
            # @yieldparam operation [GRPC::ActiveCall::Operation]
            # @raise [Google::Gax::GaxError] if the RPC is aborted.
            # @example
            #   require "google/cloud/devtools/build"
            #
            #   publish_build_event_client = Google::Cloud::Devtools::Build.new(version: :v1)
            #
            #   # TODO: Initialize `build_event`:
            #   build_event = {}
            #
            #   # TODO: Initialize `project_id`:
            #   project_id = ''
            #   publish_build_event_client.publish_lifecycle_event(build_event, project_id)

            def publish_lifecycle_event \
                build_event,
                project_id,
                service_level: nil,
                stream_timeout: nil,
                notification_keywords: nil,
                options: nil,
                &block
              req = {
                build_event: build_event,
                project_id: project_id,
                service_level: service_level,
                stream_timeout: stream_timeout,
                notification_keywords: notification_keywords
              }.delete_if { |_, v| v.nil? }
              req = Google::Gax::to_proto(req, Google::Devtools::Build::V1::PublishLifecycleEventRequest)
              @publish_lifecycle_event.call(req, options, &block)
              nil
            end

            # Publish build tool events belonging to the same stream to a backend job
            # using bidirectional streaming.
            #
            # @param reqs [Enumerable<Google::Devtools::Build::V1::PublishBuildToolEventStreamRequest>]
            #   The input requests.
            # @param options [Google::Gax::CallOptions]
            #   Overrides the default settings for this call, e.g, timeout,
            #   retries, etc.
            # @return [Enumerable<Google::Devtools::Build::V1::PublishBuildToolEventStreamResponse>]
            #   An enumerable of Google::Devtools::Build::V1::PublishBuildToolEventStreamResponse instances.
            #
            # @raise [Google::Gax::GaxError] if the RPC is aborted.
            #
            # @note
            #   EXPERIMENTAL:
            #     Streaming requests are still undergoing review.
            #     This method interface might change in the future.
            #
            # @example
            #   require "google/cloud/devtools/build"
            #
            #   publish_build_event_client = Google::Cloud::Devtools::Build.new(version: :v1)
            #
            #   # TODO: Initialize `ordered_build_event`:
            #   ordered_build_event = {}
            #
            #   # TODO: Initialize `project_id`:
            #   project_id = ''
            #   request = { ordered_build_event: ordered_build_event, project_id: project_id }
            #   requests = [request]
            #   publish_build_event_client.publish_build_tool_event_stream(requests).each do |element|
            #     # Process element.
            #   end

            def publish_build_tool_event_stream reqs, options: nil
              request_protos = reqs.lazy.map do |req|
                Google::Gax::to_proto(req, Google::Devtools::Build::V1::PublishBuildToolEventStreamRequest)
              end
              @publish_build_tool_event_stream.call(request_protos, options)
            end
          end
        end
      end
    end
  end
end

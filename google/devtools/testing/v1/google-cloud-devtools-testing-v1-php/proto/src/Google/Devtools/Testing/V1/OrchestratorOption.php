<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/testing/v1/test_execution.proto

namespace Google\Devtools\Testing\V1;

use UnexpectedValueException;

/**
 * Specifies how to execute the test.
 *
 * Protobuf type <code>google.devtools.testing.v1.OrchestratorOption</code>
 */
class OrchestratorOption
{
    /**
     * Default value: the server will choose the mode. Currently implies that
     * the test will run without the orchestrator. In the future,
     * all instrumentation tests will be run with the orchestrator.
     * Using the orchestrator is highly encouraged because of all the benefits it
     * offers.
     *
     * Generated from protobuf enum <code>ORCHESTRATOR_OPTION_UNSPECIFIED = 0;</code>
     */
    const ORCHESTRATOR_OPTION_UNSPECIFIED = 0;
    /**
     * Run test using orchestrator.
     * ** Only compatible with AndroidJUnitRunner version 1.0 or higher! **
     * Recommended.
     *
     * Generated from protobuf enum <code>USE_ORCHESTRATOR = 1;</code>
     */
    const USE_ORCHESTRATOR = 1;
    /**
     * Run test without using orchestrator.
     *
     * Generated from protobuf enum <code>DO_NOT_USE_ORCHESTRATOR = 2;</code>
     */
    const DO_NOT_USE_ORCHESTRATOR = 2;

    private static $valueToName = [
        self::ORCHESTRATOR_OPTION_UNSPECIFIED => 'ORCHESTRATOR_OPTION_UNSPECIFIED',
        self::USE_ORCHESTRATOR => 'USE_ORCHESTRATOR',
        self::DO_NOT_USE_ORCHESTRATOR => 'DO_NOT_USE_ORCHESTRATOR',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/testing/v1/test_environment_discovery.proto

namespace Google\Devtools\Testing\V1\GetTestEnvironmentCatalogRequest;

use UnexpectedValueException;

/**
 * Types of environments the Test API supports.
 *
 * Protobuf type <code>google.devtools.testing.v1.GetTestEnvironmentCatalogRequest.EnvironmentType</code>
 */
class EnvironmentType
{
    /**
     * Do not use.  For proto versioning only.
     *
     * Generated from protobuf enum <code>ENVIRONMENT_TYPE_UNSPECIFIED = 0;</code>
     */
    const ENVIRONMENT_TYPE_UNSPECIFIED = 0;
    /**
     * A device running a version of the Android OS.
     *
     * Generated from protobuf enum <code>ANDROID = 1;</code>
     */
    const ANDROID = 1;
    /**
     * A device running a version of iOS.
     *
     * Generated from protobuf enum <code>IOS = 3;</code>
     */
    const IOS = 3;
    /**
     * A network configuration to use when running a test.
     *
     * Generated from protobuf enum <code>NETWORK_CONFIGURATION = 4;</code>
     */
    const NETWORK_CONFIGURATION = 4;
    /**
     * The software environment provided by TestExecutionService.
     *
     * Generated from protobuf enum <code>PROVIDED_SOFTWARE = 5;</code>
     */
    const PROVIDED_SOFTWARE = 5;
    /**
     * The IP blocks used by devices in the test environment.
     *
     * Generated from protobuf enum <code>DEVICE_IP_BLOCKS = 6;</code>
     */
    const DEVICE_IP_BLOCKS = 6;

    private static $valueToName = [
        self::ENVIRONMENT_TYPE_UNSPECIFIED => 'ENVIRONMENT_TYPE_UNSPECIFIED',
        self::ANDROID => 'ANDROID',
        self::IOS => 'IOS',
        self::NETWORK_CONFIGURATION => 'NETWORK_CONFIGURATION',
        self::PROVIDED_SOFTWARE => 'PROVIDED_SOFTWARE',
        self::DEVICE_IP_BLOCKS => 'DEVICE_IP_BLOCKS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(EnvironmentType::class, \Google\Devtools\Testing\V1\GetTestEnvironmentCatalogRequest_EnvironmentType::class);


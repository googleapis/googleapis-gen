<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/testing/v1/test_execution.proto

namespace Google\Devtools\Testing\V1;

use UnexpectedValueException;

/**
 * Outcome summary for a finished test matrix.
 *
 * Protobuf type <code>google.devtools.testing.v1.OutcomeSummary</code>
 */
class OutcomeSummary
{
    /**
     * Do not use. For proto versioning only.
     *
     * Generated from protobuf enum <code>OUTCOME_SUMMARY_UNSPECIFIED = 0;</code>
     */
    const OUTCOME_SUMMARY_UNSPECIFIED = 0;
    /**
     * The test matrix run was successful, for instance:
     * - All the test cases passed.
     * - Robo did not detect a crash of the application under test.
     *
     * Generated from protobuf enum <code>SUCCESS = 1;</code>
     */
    const SUCCESS = 1;
    /**
     * A run failed, for instance:
     * - One or more test case failed.
     * - A test timed out.
     * - The application under test crashed.
     *
     * Generated from protobuf enum <code>FAILURE = 2;</code>
     */
    const FAILURE = 2;
    /**
     * Something unexpected happened. The run should still be considered
     * unsuccessful but this is likely a transient problem and re-running the
     * test might be successful.
     *
     * Generated from protobuf enum <code>INCONCLUSIVE = 3;</code>
     */
    const INCONCLUSIVE = 3;
    /**
     * All tests were skipped, for instance:
     * - All device configurations were incompatible.
     *
     * Generated from protobuf enum <code>SKIPPED = 4;</code>
     */
    const SKIPPED = 4;

    private static $valueToName = [
        self::OUTCOME_SUMMARY_UNSPECIFIED => 'OUTCOME_SUMMARY_UNSPECIFIED',
        self::SUCCESS => 'SUCCESS',
        self::FAILURE => 'FAILURE',
        self::INCONCLUSIVE => 'INCONCLUSIVE',
        self::SKIPPED => 'SKIPPED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


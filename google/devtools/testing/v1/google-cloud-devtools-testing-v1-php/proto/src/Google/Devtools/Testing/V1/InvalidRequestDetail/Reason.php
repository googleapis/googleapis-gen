<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/testing/v1/test_execution.proto

namespace Google\Devtools\Testing\V1\InvalidRequestDetail;

use UnexpectedValueException;

/**
 * Possible invalid request reasons.
 *
 * Protobuf type <code>google.devtools.testing.v1.InvalidRequestDetail.Reason</code>
 */
class Reason
{
    /**
     * No reason has been specified - the default.
     *
     * Generated from protobuf enum <code>REASON_UNSPECIFIED = 0;</code>
     */
    const REASON_UNSPECIFIED = 0;
    /**
     * The request is not valid.
     *
     * Generated from protobuf enum <code>REQUEST_INVALID = 1;</code>
     */
    const REQUEST_INVALID = 1;
    /**
     * One or more of the resources specified in the request is too large.
     *
     * Generated from protobuf enum <code>RESOURCE_TOO_BIG = 2;</code>
     */
    const RESOURCE_TOO_BIG = 2;
    /**
     * One or more resources specified in the request cannot be found.
     *
     * Generated from protobuf enum <code>RESOURCE_NOT_FOUND = 3;</code>
     */
    const RESOURCE_NOT_FOUND = 3;
    /**
     * This request is not (currently) supported.
     *
     * Generated from protobuf enum <code>UNSUPPORTED = 4;</code>
     */
    const UNSUPPORTED = 4;
    /**
     * This request is not currently implemented.
     *
     * Generated from protobuf enum <code>NOT_IMPLEMENTED = 5;</code>
     */
    const NOT_IMPLEMENTED = 5;

    private static $valueToName = [
        self::REASON_UNSPECIFIED => 'REASON_UNSPECIFIED',
        self::REQUEST_INVALID => 'REQUEST_INVALID',
        self::RESOURCE_TOO_BIG => 'RESOURCE_TOO_BIG',
        self::RESOURCE_NOT_FOUND => 'RESOURCE_NOT_FOUND',
        self::UNSUPPORTED => 'UNSUPPORTED',
        self::NOT_IMPLEMENTED => 'NOT_IMPLEMENTED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Reason::class, \Google\Devtools\Testing\V1\InvalidRequestDetail_Reason::class);


/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.devtools.testing.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.devtools.testing.v1.stub.TestExecutionServiceStub;
import com.google.devtools.testing.v1.stub.TestExecutionServiceStubSettings;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * Service Description: A service for requesting test executions and querying their status.
 *
 * <p>This service is part of Firebase Test Lab. To learn about how to use the product, and how to
 * integrate it with your system, visit https://firebase.google.com/docs/test-lab.
 *
 * <p>Each test execution will wait for available capacity. It will then be invoked as described.
 * The test may be invoked multiple times if an infrastructure failure is detected. Results and
 * other files generated by the test will be stored in an external storage system.
 *
 * <p>The TestExecutionService models this behavior using two resource types:
 *
 * <p>- TestMatrix: a group of one or more TestExecutions, built by taking a product of values over
 * a pre-defined set of axes. In the case of Android Tests, for example, device model and OS version
 * are two axes of the matrix.
 *
 * <p>- TestExecution: a single execution of one or more test targets on a single device. These are
 * created automatically when a TestMatrix is created.
 *
 * <p>This service returns any error codes from the canonical error space (i.e. google.rpc.Code).
 * The errors which may be returned are specified on each method. In addition, any method may return
 * UNAVAILABLE or INTERNAL.
 *
 * <p>This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * <pre>{@code
 * try (TestExecutionServiceClient testExecutionServiceClient =
 *     TestExecutionServiceClient.create()) {
 *   CreateTestMatrixRequest request =
 *       CreateTestMatrixRequest.newBuilder()
 *           .setProjectId("projectId-894832108")
 *           .setTestMatrix(TestMatrix.newBuilder().build())
 *           .setRequestId("requestId693933066")
 *           .build();
 *   TestMatrix response = testExecutionServiceClient.createTestMatrix(request);
 * }
 * }</pre>
 *
 * <p>Note: close() needs to be called on the TestExecutionServiceClient object to clean up
 * resources such as threads. In the example above, try-with-resources is used, which automatically
 * calls close().
 *
 * <p>The surface of this class includes several types of Java methods for each of the API's
 * methods:
 *
 * <ol>
 *   <li> A "flattened" method. With this type of method, the fields of the request type have been
 *       converted into function parameters. It may be the case that not all fields are available as
 *       parameters, and not every API method will have a flattened method entry point.
 *   <li> A "request object" method. This type of method only takes one parameter, a request object,
 *       which must be constructed before the call. Not every API method will have a request object
 *       method.
 *   <li> A "callable" method. This type of method takes no parameters and returns an immutable API
 *       callable object, which can be used to initiate calls to the service.
 * </ol>
 *
 * <p>See the individual methods for example code.
 *
 * <p>Many parameters require resource names to be formatted in a particular way. To assist with
 * these names, this class includes a format method for each type of name, and additionally a parse
 * method to extract the individual identifiers contained within names that are returned.
 *
 * <p>This class can be customized by passing in a custom instance of TestExecutionServiceSettings
 * to create(). For example:
 *
 * <p>To customize credentials:
 *
 * <pre>{@code
 * TestExecutionServiceSettings testExecutionServiceSettings =
 *     TestExecutionServiceSettings.newBuilder()
 *         .setCredentialsProvider(FixedCredentialsProvider.create(myCredentials))
 *         .build();
 * TestExecutionServiceClient testExecutionServiceClient =
 *     TestExecutionServiceClient.create(testExecutionServiceSettings);
 * }</pre>
 *
 * <p>To customize the endpoint:
 *
 * <pre>{@code
 * TestExecutionServiceSettings testExecutionServiceSettings =
 *     TestExecutionServiceSettings.newBuilder().setEndpoint(myEndpoint).build();
 * TestExecutionServiceClient testExecutionServiceClient =
 *     TestExecutionServiceClient.create(testExecutionServiceSettings);
 * }</pre>
 *
 * <p>Please refer to the GitHub repository's samples for more quickstart code snippets.
 */
@Generated("by gapic-generator-java")
public class TestExecutionServiceClient implements BackgroundResource {
  private final TestExecutionServiceSettings settings;
  private final TestExecutionServiceStub stub;

  /** Constructs an instance of TestExecutionServiceClient with default settings. */
  public static final TestExecutionServiceClient create() throws IOException {
    return create(TestExecutionServiceSettings.newBuilder().build());
  }

  /**
   * Constructs an instance of TestExecutionServiceClient, using the given settings. The channels
   * are created based on the settings passed in, or defaults for any settings that are not set.
   */
  public static final TestExecutionServiceClient create(TestExecutionServiceSettings settings)
      throws IOException {
    return new TestExecutionServiceClient(settings);
  }

  /**
   * Constructs an instance of TestExecutionServiceClient, using the given stub for making calls.
   * This is for advanced usage - prefer using create(TestExecutionServiceSettings).
   */
  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public static final TestExecutionServiceClient create(TestExecutionServiceStub stub) {
    return new TestExecutionServiceClient(stub);
  }

  /**
   * Constructs an instance of TestExecutionServiceClient, using the given settings. This is
   * protected so that it is easy to make a subclass, but otherwise, the static factory methods
   * should be preferred.
   */
  protected TestExecutionServiceClient(TestExecutionServiceSettings settings) throws IOException {
    this.settings = settings;
    this.stub = ((TestExecutionServiceStubSettings) settings.getStubSettings()).createStub();
  }

  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  protected TestExecutionServiceClient(TestExecutionServiceStub stub) {
    this.settings = null;
    this.stub = stub;
  }

  public final TestExecutionServiceSettings getSettings() {
    return settings;
  }

  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public TestExecutionServiceStub getStub() {
    return stub;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD.
  /**
   * Creates and runs a matrix of tests according to the given specifications. Unsupported
   * environments will be returned in the state UNSUPPORTED. A test matrix is limited to use at most
   * 2000 devices in parallel.
   *
   * <p>May return any of the following canonical error codes:
   *
   * <p>- PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT -
   * if the request is malformed or if the matrix tries to use too many simultaneous devices.
   *
   * <p>Sample code:
   *
   * <pre>{@code
   * try (TestExecutionServiceClient testExecutionServiceClient =
   *     TestExecutionServiceClient.create()) {
   *   CreateTestMatrixRequest request =
   *       CreateTestMatrixRequest.newBuilder()
   *           .setProjectId("projectId-894832108")
   *           .setTestMatrix(TestMatrix.newBuilder().build())
   *           .setRequestId("requestId693933066")
   *           .build();
   *   TestMatrix response = testExecutionServiceClient.createTestMatrix(request);
   * }
   * }</pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final TestMatrix createTestMatrix(CreateTestMatrixRequest request) {
    return createTestMatrixCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD.
  /**
   * Creates and runs a matrix of tests according to the given specifications. Unsupported
   * environments will be returned in the state UNSUPPORTED. A test matrix is limited to use at most
   * 2000 devices in parallel.
   *
   * <p>May return any of the following canonical error codes:
   *
   * <p>- PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT -
   * if the request is malformed or if the matrix tries to use too many simultaneous devices.
   *
   * <p>Sample code:
   *
   * <pre>{@code
   * try (TestExecutionServiceClient testExecutionServiceClient =
   *     TestExecutionServiceClient.create()) {
   *   CreateTestMatrixRequest request =
   *       CreateTestMatrixRequest.newBuilder()
   *           .setProjectId("projectId-894832108")
   *           .setTestMatrix(TestMatrix.newBuilder().build())
   *           .setRequestId("requestId693933066")
   *           .build();
   *   ApiFuture<TestMatrix> future =
   *       testExecutionServiceClient.createTestMatrixCallable().futureCall(request);
   *   // Do something.
   *   TestMatrix response = future.get();
   * }
   * }</pre>
   */
  public final UnaryCallable<CreateTestMatrixRequest, TestMatrix> createTestMatrixCallable() {
    return stub.createTestMatrixCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD.
  /**
   * Checks the status of a test matrix.
   *
   * <p>May return any of the following canonical error codes:
   *
   * <p>- PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if
   * the request is malformed - NOT_FOUND - if the Test Matrix does not exist
   *
   * <p>Sample code:
   *
   * <pre>{@code
   * try (TestExecutionServiceClient testExecutionServiceClient =
   *     TestExecutionServiceClient.create()) {
   *   GetTestMatrixRequest request =
   *       GetTestMatrixRequest.newBuilder()
   *           .setProjectId("projectId-894832108")
   *           .setTestMatrixId("testMatrixId1025157998")
   *           .build();
   *   TestMatrix response = testExecutionServiceClient.getTestMatrix(request);
   * }
   * }</pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final TestMatrix getTestMatrix(GetTestMatrixRequest request) {
    return getTestMatrixCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD.
  /**
   * Checks the status of a test matrix.
   *
   * <p>May return any of the following canonical error codes:
   *
   * <p>- PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if
   * the request is malformed - NOT_FOUND - if the Test Matrix does not exist
   *
   * <p>Sample code:
   *
   * <pre>{@code
   * try (TestExecutionServiceClient testExecutionServiceClient =
   *     TestExecutionServiceClient.create()) {
   *   GetTestMatrixRequest request =
   *       GetTestMatrixRequest.newBuilder()
   *           .setProjectId("projectId-894832108")
   *           .setTestMatrixId("testMatrixId1025157998")
   *           .build();
   *   ApiFuture<TestMatrix> future =
   *       testExecutionServiceClient.getTestMatrixCallable().futureCall(request);
   *   // Do something.
   *   TestMatrix response = future.get();
   * }
   * }</pre>
   */
  public final UnaryCallable<GetTestMatrixRequest, TestMatrix> getTestMatrixCallable() {
    return stub.getTestMatrixCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD.
  /**
   * Cancels unfinished test executions in a test matrix. This call returns immediately and
   * cancellation proceeds asynchronously. If the matrix is already final, this operation will have
   * no effect.
   *
   * <p>May return any of the following canonical error codes:
   *
   * <p>- PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if
   * the request is malformed - NOT_FOUND - if the Test Matrix does not exist
   *
   * <p>Sample code:
   *
   * <pre>{@code
   * try (TestExecutionServiceClient testExecutionServiceClient =
   *     TestExecutionServiceClient.create()) {
   *   CancelTestMatrixRequest request =
   *       CancelTestMatrixRequest.newBuilder()
   *           .setProjectId("projectId-894832108")
   *           .setTestMatrixId("testMatrixId1025157998")
   *           .build();
   *   CancelTestMatrixResponse response = testExecutionServiceClient.cancelTestMatrix(request);
   * }
   * }</pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final CancelTestMatrixResponse cancelTestMatrix(CancelTestMatrixRequest request) {
    return cancelTestMatrixCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD.
  /**
   * Cancels unfinished test executions in a test matrix. This call returns immediately and
   * cancellation proceeds asynchronously. If the matrix is already final, this operation will have
   * no effect.
   *
   * <p>May return any of the following canonical error codes:
   *
   * <p>- PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if
   * the request is malformed - NOT_FOUND - if the Test Matrix does not exist
   *
   * <p>Sample code:
   *
   * <pre>{@code
   * try (TestExecutionServiceClient testExecutionServiceClient =
   *     TestExecutionServiceClient.create()) {
   *   CancelTestMatrixRequest request =
   *       CancelTestMatrixRequest.newBuilder()
   *           .setProjectId("projectId-894832108")
   *           .setTestMatrixId("testMatrixId1025157998")
   *           .build();
   *   ApiFuture<CancelTestMatrixResponse> future =
   *       testExecutionServiceClient.cancelTestMatrixCallable().futureCall(request);
   *   // Do something.
   *   CancelTestMatrixResponse response = future.get();
   * }
   * }</pre>
   */
  public final UnaryCallable<CancelTestMatrixRequest, CancelTestMatrixResponse>
      cancelTestMatrixCallable() {
    return stub.cancelTestMatrixCallable();
  }

  @Override
  public final void close() {
    stub.close();
  }

  @Override
  public void shutdown() {
    stub.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return stub.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return stub.isTerminated();
  }

  @Override
  public void shutdownNow() {
    stub.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return stub.awaitTermination(duration, unit);
  }
}

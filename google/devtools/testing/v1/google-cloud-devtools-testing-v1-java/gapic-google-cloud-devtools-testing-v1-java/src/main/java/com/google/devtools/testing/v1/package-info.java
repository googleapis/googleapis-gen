/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The interfaces provided are listed below, along with usage samples.
 *
 * <p>======================= ApplicationDetailServiceClient =======================
 *
 * <p>Service Description: A service which parses input applications and returns details that can be
 * useful in the context of testing.
 *
 * <p>Sample for ApplicationDetailServiceClient:
 *
 * <pre>{@code
 * try (ApplicationDetailServiceClient applicationDetailServiceClient =
 *     ApplicationDetailServiceClient.create()) {
 *   GetApkDetailsRequest request =
 *       GetApkDetailsRequest.newBuilder().setLocation(FileReference.newBuilder().build()).build();
 *   GetApkDetailsResponse response = applicationDetailServiceClient.getApkDetails(request);
 * }
 * }</pre>
 *
 * <p>======================= TestEnvironmentDiscoveryServiceClient =======================
 *
 * <p>Service Description: Service for discovering environments supported by the
 * TestExecutionService.
 *
 * <p>Over time the TestService may add or remove devices or configuration options (e.g., when new
 * devices and APIs are released). Clients should check here periodically to discover what options
 * are supported.
 *
 * <p>It defines the following resource model:
 *
 * <p>- The API a collection of [TestEnvironmentCatalog]
 * [google.devtools.test.v1.TestEnvironmentCatalog] resources, named `testEnvironmentCatalog/&#42;`
 *
 * <p>- Each TestEnvironmentCatalog resource describes a set of supported environments.
 *
 * <p>- An [AndroidDeviceCatalog][google.devtools.test.v1.AndroidDeviceCatalog] describes supported
 * Android devices. It contains lists of supported
 * [AndroidModels][google.devtools.test.v1.AndroidModel] and
 * [AndroidVersions][google.devtools.test.v1.AndroidVersion] along with a
 * [AndroidRuntimeConfiguration][google.devtools.test.v1.AndroidRuntimeConfiguration]. Each
 * AndroidModel contains a list of Versions it supports. All models support all locales and
 * orientations described by the AndroidRuntimeConfiguration
 *
 * <p>- An [IosDeviceCatalog][google.devtools.test.v1.IosDeviceCatalog] describes supported iOS
 * devices. It contains lists of supported [IosModels][google.devtools.test.v1.IosModel] and
 * [IosVersions][google.devtools.test.v1.IosVersion] along with a
 * [IosRuntimeConfiguration][google.devtools.test.v1.IosRuntimeConfiguration]. Each IosModel
 * contains a list of Versions it supports. All models support all locales and orientations
 * described by the IosRuntimeConfiguration.
 *
 * <p>Sample for TestEnvironmentDiscoveryServiceClient:
 *
 * <pre>{@code
 * try (TestEnvironmentDiscoveryServiceClient testEnvironmentDiscoveryServiceClient =
 *     TestEnvironmentDiscoveryServiceClient.create()) {
 *   GetTestEnvironmentCatalogRequest request =
 *       GetTestEnvironmentCatalogRequest.newBuilder().setProjectId("projectId-894832108").build();
 *   TestEnvironmentCatalog response =
 *       testEnvironmentDiscoveryServiceClient.getTestEnvironmentCatalog(request);
 * }
 * }</pre>
 *
 * <p>======================= TestExecutionServiceClient =======================
 *
 * <p>Service Description: A service for requesting test executions and querying their status.
 *
 * <p>This service is part of Firebase Test Lab. To learn about how to use the product, and how to
 * integrate it with your system, visit https://firebase.google.com/docs/test-lab.
 *
 * <p>Each test execution will wait for available capacity. It will then be invoked as described.
 * The test may be invoked multiple times if an infrastructure failure is detected. Results and
 * other files generated by the test will be stored in an external storage system.
 *
 * <p>The TestExecutionService models this behavior using two resource types:
 *
 * <p>- TestMatrix: a group of one or more TestExecutions, built by taking a product of values over
 * a pre-defined set of axes. In the case of Android Tests, for example, device model and OS version
 * are two axes of the matrix.
 *
 * <p>- TestExecution: a single execution of one or more test targets on a single device. These are
 * created automatically when a TestMatrix is created.
 *
 * <p>This service returns any error codes from the canonical error space (i.e. google.rpc.Code).
 * The errors which may be returned are specified on each method. In addition, any method may return
 * UNAVAILABLE or INTERNAL.
 *
 * <p>Sample for TestExecutionServiceClient:
 *
 * <pre>{@code
 * try (TestExecutionServiceClient testExecutionServiceClient =
 *     TestExecutionServiceClient.create()) {
 *   CreateTestMatrixRequest request =
 *       CreateTestMatrixRequest.newBuilder()
 *           .setProjectId("projectId-894832108")
 *           .setTestMatrix(TestMatrix.newBuilder().build())
 *           .setRequestId("requestId693933066")
 *           .build();
 *   TestMatrix response = testExecutionServiceClient.createTestMatrix(request);
 * }
 * }</pre>
 */
@Generated("by gapic-generator-java")
package com.google.devtools.testing.v1;

import javax.annotation.Generated;

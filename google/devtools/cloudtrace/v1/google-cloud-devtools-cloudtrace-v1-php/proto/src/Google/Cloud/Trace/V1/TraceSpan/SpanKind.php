<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/cloudtrace/v1/trace.proto

namespace Google\Cloud\Trace\V1\TraceSpan;

use UnexpectedValueException;

/**
 * Type of span. Can be used to specify additional relationships between spans
 * in addition to a parent/child relationship.
 *
 * Protobuf type <code>google.devtools.cloudtrace.v1.TraceSpan.SpanKind</code>
 */
class SpanKind
{
    /**
     * Unspecified.
     *
     * Generated from protobuf enum <code>SPAN_KIND_UNSPECIFIED = 0;</code>
     */
    const SPAN_KIND_UNSPECIFIED = 0;
    /**
     * Indicates that the span covers server-side handling of an RPC or other
     * remote network request.
     *
     * Generated from protobuf enum <code>RPC_SERVER = 1;</code>
     */
    const RPC_SERVER = 1;
    /**
     * Indicates that the span covers the client-side wrapper around an RPC or
     * other remote request.
     *
     * Generated from protobuf enum <code>RPC_CLIENT = 2;</code>
     */
    const RPC_CLIENT = 2;

    private static $valueToName = [
        self::SPAN_KIND_UNSPECIFIED => 'SPAN_KIND_UNSPECIFIED',
        self::RPC_SERVER => 'RPC_SERVER',
        self::RPC_CLIENT => 'RPC_CLIENT',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(SpanKind::class, \Google\Cloud\Trace\V1\TraceSpan_SpanKind::class);


<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/remoteworkers/v1test2/bots.proto

namespace Google\Cloud\Remoteworkers\V1test2;

use UnexpectedValueException;

/**
 * The state of the lease. All leases start in the PENDING state. A bot can
 * change PENDING to ACTIVE or (in the case of an error) COMPLETED, or from
 * ACTIVE to COMPLETED. The server can change PENDING or ACTIVE to CANCELLED if
 * it wants the bot to release its resources - for example, if the bot needs to
 * be quarantined (it's producing bad output) or a cell needs to be drained.
 *
 * Protobuf type <code>google.devtools.remoteworkers.v1test2.LeaseState</code>
 */
class LeaseState
{
    /**
     * Default value; do not use.
     *
     * Generated from protobuf enum <code>LEASE_STATE_UNSPECIFIED = 0;</code>
     */
    const LEASE_STATE_UNSPECIFIED = 0;
    /**
     * Pending: the server expects the bot to accept this lease. This may only be
     * set by the server.
     *
     * Generated from protobuf enum <code>PENDING = 1;</code>
     */
    const PENDING = 1;
    /**
     * Active: the bot has accepted this lease. This may only be set by the bot.
     *
     * Generated from protobuf enum <code>ACTIVE = 2;</code>
     */
    const ACTIVE = 2;
    /**
     * Completed: the bot is no longer leased. This may only be set by the bot,
     * and the status field must be populated iff the state is COMPLETED.
     *
     * Generated from protobuf enum <code>COMPLETED = 4;</code>
     */
    const COMPLETED = 4;
    /**
     * Cancelled: The bot should immediately release all resources associated with
     * the lease. This may only be set by the server.
     *
     * Generated from protobuf enum <code>CANCELLED = 5;</code>
     */
    const CANCELLED = 5;

    private static $valueToName = [
        self::LEASE_STATE_UNSPECIFIED => 'LEASE_STATE_UNSPECIFIED',
        self::PENDING => 'PENDING',
        self::ACTIVE => 'ACTIVE',
        self::COMPLETED => 'COMPLETED',
        self::CANCELLED => 'CANCELLED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}


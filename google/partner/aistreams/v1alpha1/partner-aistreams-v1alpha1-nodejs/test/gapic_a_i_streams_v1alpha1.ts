// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as aistreamsModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1alpha1.AIStreamsClient', () => {
    it('has servicePath', () => {
        const servicePath = aistreamsModule.v1alpha1.AIStreamsClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = aistreamsModule.v1alpha1.AIStreamsClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = aistreamsModule.v1alpha1.AIStreamsClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new aistreamsModule.v1alpha1.AIStreamsClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new aistreamsModule.v1alpha1.AIStreamsClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new aistreamsModule.v1alpha1.AIStreamsClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.aIStreamsStub, undefined);
        await client.initialize();
        assert(client.aIStreamsStub);
    });

    it('has close method', () => {
        const client = new aistreamsModule.v1alpha1.AIStreamsClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new aistreamsModule.v1alpha1.AIStreamsClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new aistreamsModule.v1alpha1.AIStreamsClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getCluster', () => {
        it('invokes getCluster without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.GetClusterRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Cluster());
            client.innerApiCalls.getCluster = stubSimpleCall(expectedResponse);
            const [response] = await client.getCluster(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getCluster without error using callback', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.GetClusterRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Cluster());
            client.innerApiCalls.getCluster = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCluster(
                    request,
                    (err?: Error|null, result?: protos.google.partner.aistreams.v1alpha1.ICluster|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getCluster with error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.GetClusterRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getCluster = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCluster(request), expectedError);
            assert((client.innerApiCalls.getCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getStream', () => {
        it('invokes getStream without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.GetStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Stream());
            client.innerApiCalls.getStream = stubSimpleCall(expectedResponse);
            const [response] = await client.getStream(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getStream without error using callback', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.GetStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Stream());
            client.innerApiCalls.getStream = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getStream(
                    request,
                    (err?: Error|null, result?: protos.google.partner.aistreams.v1alpha1.IStream|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getStream with error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.GetStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getStream = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getStream(request), expectedError);
            assert((client.innerApiCalls.getStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createCluster', () => {
        it('invokes createCluster without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.CreateClusterRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createCluster = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createCluster(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createCluster without error using callback', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.CreateClusterRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createCluster = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCluster(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.partner.aistreams.v1alpha1.ICluster, protos.google.partner.aistreams.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.partner.aistreams.v1alpha1.ICluster, protos.google.partner.aistreams.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createCluster with call error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.CreateClusterRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createCluster = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createCluster(request), expectedError);
            assert((client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createCluster with LRO error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.CreateClusterRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createCluster = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createCluster(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateClusterProgress without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateClusterProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateClusterProgress with error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateClusterProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateCluster', () => {
        it('invokes updateCluster without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.UpdateClusterRequest());
            request.cluster = {};
            request.cluster.name = '';
            const expectedHeaderRequestParams = "cluster.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateCluster = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateCluster(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCluster without error using callback', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.UpdateClusterRequest());
            request.cluster = {};
            request.cluster.name = '';
            const expectedHeaderRequestParams = "cluster.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateCluster = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateCluster(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.partner.aistreams.v1alpha1.ICluster, protos.google.partner.aistreams.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.partner.aistreams.v1alpha1.ICluster, protos.google.partner.aistreams.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateCluster with call error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.UpdateClusterRequest());
            request.cluster = {};
            request.cluster.name = '';
            const expectedHeaderRequestParams = "cluster.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCluster = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateCluster(request), expectedError);
            assert((client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateCluster with LRO error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.UpdateClusterRequest());
            request.cluster = {};
            request.cluster.name = '';
            const expectedHeaderRequestParams = "cluster.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateCluster = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateCluster(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateClusterProgress without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateClusterProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateClusterProgress with error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateClusterProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteCluster', () => {
        it('invokes deleteCluster without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.DeleteClusterRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteCluster = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteCluster(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteCluster without error using callback', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.DeleteClusterRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteCluster = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteCluster(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.partner.aistreams.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.partner.aistreams.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteCluster with call error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.DeleteClusterRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCluster = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteCluster(request), expectedError);
            assert((client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteCluster with LRO error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.DeleteClusterRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCluster = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteCluster(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteCluster as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteClusterProgress without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteClusterProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteClusterProgress with error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteClusterProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createStream', () => {
        it('invokes createStream without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.CreateStreamRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createStream = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createStream(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createStream without error using callback', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.CreateStreamRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createStream = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createStream(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.partner.aistreams.v1alpha1.IStream, protos.google.partner.aistreams.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.partner.aistreams.v1alpha1.IStream, protos.google.partner.aistreams.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createStream with call error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.CreateStreamRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createStream = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createStream(request), expectedError);
            assert((client.innerApiCalls.createStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createStream with LRO error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.CreateStreamRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createStream = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createStream(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateStreamProgress without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateStreamProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateStreamProgress with error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateStreamProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateStream', () => {
        it('invokes updateStream without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.UpdateStreamRequest());
            request.stream = {};
            request.stream.name = '';
            const expectedHeaderRequestParams = "stream.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateStream = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateStream(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateStream without error using callback', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.UpdateStreamRequest());
            request.stream = {};
            request.stream.name = '';
            const expectedHeaderRequestParams = "stream.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateStream = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateStream(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.partner.aistreams.v1alpha1.IStream, protos.google.partner.aistreams.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.partner.aistreams.v1alpha1.IStream, protos.google.partner.aistreams.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateStream with call error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.UpdateStreamRequest());
            request.stream = {};
            request.stream.name = '';
            const expectedHeaderRequestParams = "stream.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateStream = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateStream(request), expectedError);
            assert((client.innerApiCalls.updateStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateStream with LRO error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.UpdateStreamRequest());
            request.stream = {};
            request.stream.name = '';
            const expectedHeaderRequestParams = "stream.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateStream = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateStream(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateStreamProgress without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateStreamProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateStreamProgress with error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateStreamProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteStream', () => {
        it('invokes deleteStream without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.DeleteStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteStream = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteStream(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteStream without error using callback', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.DeleteStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteStream = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteStream(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.partner.aistreams.v1alpha1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.partner.aistreams.v1alpha1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteStream with call error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.DeleteStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteStream = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteStream(request), expectedError);
            assert((client.innerApiCalls.deleteStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteStream with LRO error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.DeleteStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteStream = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteStream(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteStreamProgress without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteStreamProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteStreamProgress with error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteStreamProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listClusters', () => {
        it('invokes listClusters without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.ListClustersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Cluster()),
            ];
            client.innerApiCalls.listClusters = stubSimpleCall(expectedResponse);
            const [response] = await client.listClusters(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listClusters as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listClusters without error using callback', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.ListClustersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Cluster()),
            ];
            client.innerApiCalls.listClusters = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listClusters(
                    request,
                    (err?: Error|null, result?: protos.google.partner.aistreams.v1alpha1.ICluster[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listClusters as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listClusters with error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.ListClustersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listClusters = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listClusters(request), expectedError);
            assert((client.innerApiCalls.listClusters as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listClustersStream without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.ListClustersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Cluster()),
            ];
            client.descriptors.page.listClusters.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listClustersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.partner.aistreams.v1alpha1.Cluster[] = [];
                stream.on('data', (response: protos.google.partner.aistreams.v1alpha1.Cluster) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listClusters.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listClusters, request));
            assert.strictEqual(
                (client.descriptors.page.listClusters.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listClustersStream with error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.ListClustersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listClusters.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listClustersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.partner.aistreams.v1alpha1.Cluster[] = [];
                stream.on('data', (response: protos.google.partner.aistreams.v1alpha1.Cluster) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listClusters.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listClusters, request));
            assert.strictEqual(
                (client.descriptors.page.listClusters.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listClusters without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.ListClustersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Cluster()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Cluster()),
            ];
            client.descriptors.page.listClusters.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.partner.aistreams.v1alpha1.ICluster[] = [];
            const iterable = client.listClustersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listClusters.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listClusters.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listClusters with error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.ListClustersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listClusters.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listClustersAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.partner.aistreams.v1alpha1.ICluster[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listClusters.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listClusters.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listStreams', () => {
        it('invokes listStreams without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.ListStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Stream()),
            ];
            client.innerApiCalls.listStreams = stubSimpleCall(expectedResponse);
            const [response] = await client.listStreams(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listStreams as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listStreams without error using callback', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.ListStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Stream()),
            ];
            client.innerApiCalls.listStreams = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listStreams(
                    request,
                    (err?: Error|null, result?: protos.google.partner.aistreams.v1alpha1.IStream[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listStreams as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listStreams with error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.ListStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listStreams = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listStreams(request), expectedError);
            assert((client.innerApiCalls.listStreams as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listStreamsStream without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.ListStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Stream()),
            ];
            client.descriptors.page.listStreams.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listStreamsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.partner.aistreams.v1alpha1.Stream[] = [];
                stream.on('data', (response: protos.google.partner.aistreams.v1alpha1.Stream) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listStreams.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listStreams, request));
            assert.strictEqual(
                (client.descriptors.page.listStreams.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listStreamsStream with error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.ListStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listStreams.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listStreamsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.partner.aistreams.v1alpha1.Stream[] = [];
                stream.on('data', (response: protos.google.partner.aistreams.v1alpha1.Stream) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listStreams.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listStreams, request));
            assert.strictEqual(
                (client.descriptors.page.listStreams.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listStreams without error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.ListStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Stream()),
              generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.Stream()),
            ];
            client.descriptors.page.listStreams.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.partner.aistreams.v1alpha1.IStream[] = [];
            const iterable = client.listStreamsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listStreams.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listStreams.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listStreams with error', async () => {
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.partner.aistreams.v1alpha1.ListStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listStreams.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listStreamsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.partner.aistreams.v1alpha1.IStream[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listStreams.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listStreams.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('cluster', () => {
            const fakePath = "/rendered/path/cluster";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
            };
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.clusterPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.clusterPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('clusterPath', () => {
                const result = client.clusterPath("projectValue", "locationValue", "clusterValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.clusterPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromClusterName', () => {
                const result = client.matchProjectFromClusterName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromClusterName', () => {
                const result = client.matchLocationFromClusterName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromClusterName', () => {
                const result = client.matchClusterFromClusterName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('stream', () => {
            const fakePath = "/rendered/path/stream";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
                stream: "streamValue",
            };
            const client = new aistreamsModule.v1alpha1.AIStreamsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.streamPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.streamPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('streamPath', () => {
                const result = client.streamPath("projectValue", "locationValue", "clusterValue", "streamValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.streamPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromStreamName', () => {
                const result = client.matchProjectFromStreamName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromStreamName', () => {
                const result = client.matchLocationFromStreamName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromStreamName', () => {
                const result = client.matchClusterFromStreamName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStreamFromStreamName', () => {
                const result = client.matchStreamFromStreamName(fakePath);
                assert.strictEqual(result, "streamValue");
                assert((client.pathTemplates.streamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
